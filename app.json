[{"name":"app.R","content":"library(shiny)\nlibrary(bslib)\nlibrary(DiagrammeR)\n\nui <- page_navbar(\n  tags$head(\n    tags$style(HTML(\"\n      body { zoom: 110%; }\n      .modal-dialog { max-width: 1100px !important; width: 100% !important; }\n    \"))\n  ),\n  id = \"main_nav\",\n  title = \"Hypothesis Tests Visualised\",\n  theme = bs_theme(version = 5, bootswatch = \"lumen\"),  # You can switch to \"lumen\", \"materia\", \"sketchy\", \"united\", \"yeti\" etc.\n  \n  # Make the modal wider.\n  tags$style(HTML(\"\n        .modal-dialog {\n          max-width: 1100px !important;\n          width: 100% !important;\n        }\n      \"),),\n  \n  nav_panel(\n    title = \"Home\",\n    fluidPage(\n      fluidRow(\n        column(8,\n            h1(\"Home\"),\n            HTML(\"<br>\"),\n            tight_card(\n              \"Welcome!\",\n              HTML(\"\n                  <p>Welcome to the Hypothesis Tests Visualised Project (HTPV)!\n\n                  <ul>\n                    <li>This project is aimed at helping people better understand hypothesis tests through an interactive environment.<\/li>\n                    <li> Many of the hypothesis tests on this site are motivated using the box model. If unfamiliar, please refer to the 'Fundamentals' section, and complete \n                    the three 'Box Model' pages.<\/li>\n                    <li><b>To get started<\/b> on this site, navigate to an exercise by clicking the links in the header above, or the links below!<\/li>\n                  <\/ul>\n                  <\/p>\n                \"),\n              header_colour = \"#3179ae\"\n            ),\n            HTML(\"<br>\"),\n            tight_card(\n              \"Quick Links\",\n              fluidRow(\n                column(4,\n                  HTML(\"<b>Fundamentals 📦<\/b>\"),\n                  HTML(\"<br>\"),\n                  actionLink(\"go_box_model_part_1\", \"Box Model - Part 1\", style = \"color:blue; text-decoration:underline;\"),\n                  HTML(\"<br>\"),\n                  actionLink(\"go_box_model_part_2\", \"Box Model - Part 2\", style = \"color:blue; text-decoration:underline;\"),\n                  HTML(\"<br>\"),\n                  actionLink(\"go_box_model_part_3\", \"Box Model - Part 3\", style = \"color:blue; text-decoration:underline;\"),\n                  HTML(\"<br>\"),\n                  actionLink(\"go_confidence_intervals\", \"Confidence Intervals\", style = \"color:blue; text-decoration:underline;\"),\n                  HTML(\"<br>\"),\n                ),\n                column(4,\n                   HTML(\"<b>Z-Tests 🧪<\/b>\"),\n                   HTML(\"<br>\"),\n                   actionLink(\"go_1_sampe_z_test\", \"1-Sample Z-Test\", style = \"color:blue; text-decoration:underline;\"),\n                   HTML(\"<br>\"),\n                   actionLink(\"go_propotion_z_test\", \"Proportion (Z-test)\", style = \"color:blue; text-decoration:underline;\"),\n                   HTML(\"<br>\"),\n                ),\n                column(4,\n                   HTML(\"<b>T-Tests 🧪<\/b>\"),\n                   HTML(\"<br>\"),\n                   actionLink(\"go_t_curve_motivation\", \"T-Curve Motivation\", style = \"color:blue; text-decoration:underline;\"),\n                   HTML(\"<br>\"),\n                   actionLink(\"go_1_sample_t_test\", \"1-Sample T-Test\", style = \"color:blue; text-decoration:underline;\"),\n                   HTML(\"<br>\"),\n                   actionLink(\"go_paired_t_test\", \"Paired T-Test\", style = \"color:blue; text-decoration:underline;\"),\n                   HTML(\"<br>\"),\n                   actionLink(\"go_2_sample_t_test\", \"2-Sample T-Test\", style = \"color:blue; text-decoration:underline;\"),\n                   HTML(\"<br>\"),\n                   actionLink(\"go_regression_t_test\", \"Regression T-Test\", style = \"color:blue; text-decoration:underline;\"),\n                   HTML(\"<br>\"),\n                )\n              )\n            )\n        ),\n        column(4,\n               card(\n                 full_screen = FALSE,\n                 style = \"width: 100%; padding: 0; margin: 0;\",\n                 \n                 # Header with background color and white text,\n                 # but no horizontal padding here:\n                 card_header(\n                   tags$div(\n                     HTML(\"<center>\"),\n                     \"Supporting the Project\",\n                     HTML(\"<\/center>\"),\n                     style = \"padding-left: 0.25rem; padding-right: 0.25rem;\"\n                   ),\n                   style = paste(\n                     \"background-color:\", \"#FFD700\", \";\",\n                     \"color:\", \"#000000\", \";\",\n                     \"font-size: 1.25rem;\",\n                     \"padding-top: 0.8rem; padding-bottom: 0.8rem;\",  # vertical padding only here\n                     \"line-height: 1.2;\",\n                     \"margin: 0;\"\n                   )\n                 ),\n                 \n                 # Body with inner div padding:\n                 card_body(\n                   tags$div(\n                     HTML(\"<center>\"),\n                     HTML(\"<p>\n                           <br>\n                           The best way to support the project is by starring it on GitHub. Click on the button below to go to this project's repository.\n                           <br><br>\n                           <\/p>\"),\n                     actionButton(\"go_repository\", \"HTPV Repo\", style = \"background-color: #FFD700\"),\n                     HTML(\"<br><br>\"),\n                     HTML(\"<\/center>\"),\n                     tags$script(HTML(\"\n                        document.getElementById('go_repository').onclick = function() {\n                          window.open('https://github.com/tjelton/Hypothesis-Tests-Visualised', '_blank');\n                        }\n                      \")),\n                     style = \"padding-left: 0.25rem; padding-right: 0.25rem;\"\n                   ),\n                   class = \"primary-card-content\",\n                   style = paste(\n                     \"padding-top: 0.5rem;\",\n                     \"padding-bottom: 0.5rem;\",\n                     \"margin: 0;\",\n                     \"background-color: rgba(255, 215, 0, 0.1);\"\n                   )\n                 )\n               ),\n               HTML(\"<br>\"),\n               card(\n                 full_screen = FALSE,\n                 style = \"width: 100%; padding: 0; margin: 0;\",\n                 \n                 # Header with background color and white text,\n                 # but no horizontal padding here:\n                 card_header(\n                   tags$div(\n                     HTML(\"<center>\"),\n                     \"Something not quite right?\",\n                     HTML(\"<\/center>\"),\n                     style = \"padding-left: 0.25rem; padding-right: 0.25rem;\"\n                   ),\n                   style = paste(\n                     \"background-color:\", \"#3179ae\", \";\",\n                     \"color:\", \"#FFFFFF\", \";\",\n                     \"font-size: 1.25rem;\",\n                     \"padding-top: 0.8rem; padding-bottom: 0.8rem;\",  # vertical padding only here\n                     \"line-height: 1.2;\",\n                     \"margin: 0;\"\n                   )\n                 ),\n                 \n                 # Body with inner div padding:\n                 card_body(\n                   tags$div(\n                     HTML(\"<center>\"),\n                     HTML(\"<p>\n                           <br>\n                           Did you find a bug? Is one of the statistical explanations incorrect, or is the math not quite what you would expect?\n                           <br><br>\n                           I'd apprecaite you letting me know! Please click on the button above to go the projects respoistory so that you can launch an issue. Important information\n                           is provided in the projects README file.\n                           <br>\n                           <\/p>\"),\n                     HTML(\"<br>\"),\n                     HTML(\"<\/center>\"),\n                     style = \"padding-left: 0.25rem; padding-right: 0.25rem;\"\n                   ),\n                   class = \"primary-card-content\",\n                   style = paste(\n                     \"padding-top: 0.5rem;\",\n                     \"padding-bottom: 0.5rem;\",\n                     \"margin: 0;\",\n                     \"background-color: rgba(49, 121, 174, 0.1);\"\n                   )\n                 )\n               )\n        )\n      ),\n    )\n  ),\n  \n  nav_menu(\"Fundamentals\",\n           nav_panel(\"Box Model - Part 1\", \n                     boxModelPart1UI(\"box_model_part_1\")\n           ),\n           \n           nav_panel(\"Box Model - Part 2\", \n                     boxModelPart2UI(\"box_model_part_2\")\n           ),\n           \n           nav_panel(\"Box Model - Part 3\", \n                     boxModelPart3UI(\"box_model_part_3\"),\n           ),\n           \n           nav_panel(\"Confidence Intervals\",\n                     confidenceIntervalUI(\"confidence_interval\")\n           )\n  ),\n  \n  nav_menu(\"Z-Tests\",\n           \n           nav_panel(\"1-Sample Z-Test\",\n                     oneSampleZTestUI(\"1_sample_z_test\"),\n           ),\n           nav_panel(\"Proportion (Z-test)\", \n                     proportionTestMainUI(\"proportion_z_test\"),\n           ),\n  ),\n  \n  nav_menu(\"T-Tests\",\n           nav_panel(\"T-Curve Motivation\", \n                     tCurveMotivationUI(\"t_curve_motivation\")\n           ),\n           nav_panel(\"1-Sample T-Test\",\n                     oneSampleTTestUI(\"1_sample_t_test\")\n           ),\n           nav_panel(\"Paired T-Test\",\n                     pairedTTestUI(\"paired_t_test\") \n           ),\n           nav_panel(\"2-Sample T-Test\",\n                     twoSampleTTestUI(\"2_sample_t_test\")\n           ),\n           nav_panel(\"Regression T-Test\",\n                     regressionTTestUI(\"regression_t_test\")\n           )\n  )\n)\n\n\nserver <- function(input, output, session) {\n  \n  ##################### HYPERLINKS ##################### \n  \n  observeEvent(input$go_box_model_part_1, {\n    updateTabsetPanel(session, \"main_nav\", selected = \"Box Model - Part 1\")\n  })\n  \n  observeEvent(input$go_box_model_part_2, {\n    updateTabsetPanel(session, \"main_nav\", selected = \"Box Model - Part 2\")\n  })\n  \n  observeEvent(input$go_box_model_part_3, {\n    updateTabsetPanel(session, \"main_nav\", selected = \"Box Model - Part 3\")\n  })\n  \n  observeEvent(input$go_confidence_intervals, {\n    updateTabsetPanel(session, \"main_nav\", selected = \"Confidence Intervals\")\n  })\n  \n  observeEvent(input$go_1_sampe_z_test, {\n    updateTabsetPanel(session, \"main_nav\", selected = \"1-Sample Z-Test\")\n  })\n  \n  observeEvent(input$go_propotion_z_test, {\n    updateTabsetPanel(session, \"main_nav\", selected = \"Proportion (Z-test)\")\n  })\n  \n  observeEvent(input$go_t_curve_motivation, {\n    updateTabsetPanel(session, \"main_nav\", selected = \"T-Curve Motivation\")\n  })\n  \n  observeEvent(input$go_1_sample_t_test, {\n    updateTabsetPanel(session, \"main_nav\", selected = \"1-Sample T-Test\")\n  })\n  \n  observeEvent(input$go_paired_t_test, {\n    updateTabsetPanel(session, \"main_nav\", selected = \"Paired T-Test\")\n  })\n  \n  observeEvent(input$go_2_sample_t_test, {\n    updateTabsetPanel(session, \"main_nav\", selected = \"2-Sample T-Test\")\n  })\n  \n  observeEvent(input$go_regression_t_test, {\n    updateTabsetPanel(session, \"main_nav\", selected = \"Regression T-Test\")\n  })\n  \n  ######################################################\n  \n  boxModelPart1Server(id = \"box_model_part_1\")\n  boxModelPart2Server(id = \"box_model_part_2\")\n  boxModelPart3Server(id = \"box_model_part_3\")\n  confidenceIntervalServer(id = \"confidence_interval\")\n  oneSampleZTestServer(id = \"1_sample_z_test\")\n  proportionTestMainServer(id = \"proportion_z_test\")\n  tCurveMotivationServer(id = \"t_curve_motivation\")\n  oneSampleTTestServer(id = \"1_sample_t_test\")\n  pairedTTestServer(id = \"paired_t_test\")\n  twoSampleTTestServer(id = \"2_sample_t_test\")\n  regressionTTestServer(id = \"regression_t_test\")\n\n}\n\nshinyApp(ui, server)","type":"text"},{"name":"R/fundamentals_box_model_part_1_srv.R","content":"boxModelPart1Server <- function(id) {\n  \n  moduleServer(id, function(input, output, session) {\n    \n    ns <- session$ns\n    \n    # Heads and tails box model (with words).\n    make_coin_flip_plot <- function() {\n      string <- \"\n        digraph diagram {\n          graph [layout = dot, rankdir = TB]\n      \n          node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12, width = 2.5]\n          box [label = 'Head (H), Tail (T)']\n      \n          node [shape = oval,width = 1.5,fillcolor = \\\"#f9ffbd\\\", fontsize = 12]\n          sample [label = 'Sample']\n      \n          edge [minlen = 2]\n            box->sample [label = '  n = 5', fontsize = 12, labeldistance = 5]\n        }\"\n      grViz(string)\n    }\n    \n    output$example_coin_flip_1 <- renderGrViz({\n      make_coin_flip_plot()\n    })\n    \n    output$example_coin_flip_2 <- renderGrViz({\n      make_coin_flip_plot()\n    })\n    \n    ###################### Simulated Coin Flip Samples (With Words) ###################### \n    \n    coin_flip_word_labels = reactiveVal(c())\n    count_coin_flip_simulation = reactiveVal(0)\n    observeEvent(input$simulate_coin_flip_1, {\n      # For the first 10, we just add a new coin flip.\n      if (count_coin_flip_simulation() < 10) {\n        count_coin_flip_simulation(count_coin_flip_simulation() + 1)\n        coin_flip_word_labels(c(coin_flip_word_labels(), paste0(sample(c(\"H\", \"T\"), size = 5, replace = TRUE), collapse = \" \")))\n        # For subsequent, we replaced samples that have already been displayed.\n      } else {\n        count_coin_flip_simulation(count_coin_flip_simulation() + 1)\n        current_flip_int = count_coin_flip_simulation()\n        current_flip_int = current_flip_int %% 10\n        if (current_flip_int == 0) { # Because 10 %% 10 = 0\n          current_flip_int = 10\n        }\n        coin_flip_word_labels_new = coin_flip_word_labels()\n        coin_flip_word_labels_new[current_flip_int] = paste0(sample(c(\"H\", \"T\"), size = 5, replace = TRUE), collapse = \" \")\n        coin_flip_word_labels(coin_flip_word_labels_new)\n      }\n    })\n    \n    # Display the samples. Arranged in yellow circles in 5 row by 2 column arrangment.\n    output$simulated_coin_flip_samples <- renderGrViz({\n      \n      if (count_coin_flip_simulation() == 0) {\n        return(NULL)\n      }\n      \n      n <- min(count_coin_flip_simulation(), 10)\n      \n      labels <- coin_flip_word_labels()\n      \n      num_rows <- ceiling(n / 2)\n      \n      table_rows <- \"\"\n      for (i in 1:num_rows) {\n        left_label <- labels[(i - 1) * 2 + 1]\n        right_index <- (i - 1) * 2 + 2\n        right_label <- if (right_index <= n) labels[right_index] else NULL\n        \n        # Left cell (always present)\n        left_cell <- sprintf(\n              \"<TD FIXEDSIZE='TRUE' WIDTH='120' HEIGHT='40' BGCOLOR='#f9ffbd' STYLE='rounded' BORDER='1' COLOR='black' CELLPADDING='4' ALIGN='CENTER' VALIGN='MIDDLE'>\n           <FONT POINT-SIZE='12'>%s<\/FONT>\n         <\/TD>\", left_label)\n        \n        right_cell <- if (!is.null(right_label)) {\n          sprintf(\n                \"<TD FIXEDSIZE='TRUE' WIDTH='120' HEIGHT='40' BGCOLOR='#f9ffbd' STYLE='rounded' BORDER='1' COLOR='black' CELLPADDING='4' ALIGN='CENTER' VALIGN='MIDDLE'>\n             <FONT POINT-SIZE='12'>%s<\/FONT>\n           <\/TD>\", right_label)\n        } else {\n          \"<TD FIXEDSIZE='TRUE' WIDTH='120' HEIGHT='40' CELLPADDING='4'><\/TD>\"\n        }\n        \n        row <- sprintf(\"<TR>%s%s<\/TR>\", left_cell, right_cell)\n        table_rows <- paste0(table_rows, row, \"\\n\")\n      }\n      \n      graph_string <- sprintf(\"\n          digraph diagram {\n            node [shape=plaintext]\n            graph [layout=dot]\n    \n            tbl [label=<\n              <TABLE BORDER='0' CELLBORDER='0' CELLSPACING='10'>\n                %s\n              <\/TABLE>\n            >]\n          }\n        \", table_rows)\n      \n      grViz(graph_string)\n    })\n    \n    ###################### Sample Single Word Examples ###################### \n    \n    output$single_sample_words <- renderGrViz({\n      grViz(\"\n        digraph diagram {\n          node [shape=plaintext]\n          graph [margin=0, rankdir=LR]\n    \n          tbl [label=<\n            <TABLE BORDER='0' CELLBORDER='0' CELLSPACING='0'>\n              <TR>\n                <TD FIXEDSIZE='TRUE' WIDTH='120' HEIGHT='40' \n                    BGCOLOR='#f9ffbd' STYLE='rounded' BORDER='1' COLOR='black' \n                    CELLPADDING='4' ALIGN='CENTER' VALIGN='MIDDLE'>\n                  <FONT POINT-SIZE='12'>H T T H T<\/FONT>\n                <\/TD>\n              <\/TR>\n            <\/TABLE>\n          >]\n        }\n      \")\n    })\n    \n    output$single_sample_numbers <- renderGrViz({\n      grViz(\"\n        digraph diagram {\n          node [shape=plaintext]\n          graph [margin=0, rankdir=LR]\n    \n          tbl [label=<\n            <TABLE BORDER='0' CELLBORDER='0' CELLSPACING='0'>\n              <TR>\n                <TD FIXEDSIZE='TRUE' WIDTH='120' HEIGHT='40' \n                    BGCOLOR='#f9ffbd' STYLE='rounded' BORDER='1' COLOR='black' \n                    CELLPADDING='4' ALIGN='CENTER' VALIGN='MIDDLE'>\n                  <FONT POINT-SIZE='12'>1 0 0 1 0<\/FONT>\n                <\/TD>\n              <\/TR>\n            <\/TABLE>\n          >]\n        }\n      \")\n    })\n    \n    ###################### Simulated Coin Flip Samples (Sums and Means) ###################### \n    \n    output$coin_flip_numeric_box_model <- renderGrViz({\n      string <- paste(\"\n        digraph diagram {\n          graph [layout = dot, rankdir = TB]\n      \n          node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12, width = 2.5]\n          box [label = '1, 0']\n      \n          node [shape = oval,width = 1.5,fillcolor = \\\"#f9ffbd\\\", fontsize = 12]\n          sample [label = 'Sample \", input$demonstration_sum_or_mean, \"']\n      \n          edge [minlen = 2]\n            box->sample [label = '  n = 5', fontsize = 12, labeldistance = 5]\n        }\", sep = \"\")\n      grViz(string)\n    })\n    \n    # When the radio button is changed, re-set counter and simulated values.\n    observeEvent(input$demonstration_sum_or_mean, {\n      coin_flip_number_labels(c())\n      count_coin_flip_simulation_2(0)\n    })\n    \n    # Simulate the coin flips, calculating the sum or mean depending on the user choices.\n    coin_flip_number_labels = reactiveVal(c())\n    count_coin_flip_simulation_2 = reactiveVal(0)\n    observeEvent(input$simulate_coin_flip_2, {\n      # For the first 10, we just add a new coin flip.\n      if (count_coin_flip_simulation_2() < 10) {\n        count_coin_flip_simulation_2(count_coin_flip_simulation_2() + 1)\n        sample_draw = sample(c(1, 0), size = 5, replace = TRUE)\n        # Find the sum or mean of the sample.\n        sample_summary = sum(sample_draw)\n        if (input$demonstration_sum_or_mean == \"Mean\") {\n          sample_summary = mean(sample_draw)\n        }\n        result_str <- paste0(\n          sample_summary, \" (\", \n          paste(sample_draw, collapse = \" \"), \n          \")\"\n        )\n        coin_flip_number_labels(c(coin_flip_number_labels(), result_str))\n        # For subsequent, we replaced samples that have already been displayed.\n      } else {\n        count_coin_flip_simulation_2(count_coin_flip_simulation_2() + 1)\n        current_flip_int = count_coin_flip_simulation_2()\n        current_flip_int = current_flip_int %% 10\n        if (current_flip_int == 0) { # Because 10 %% 10 = 0\n          current_flip_int = 10\n        }\n        sample_draw = sample(c(1, 0), size = 5, replace = TRUE)\n        # Find the sum or mean of the sample.\n        sample_summary = sum(sample_draw)\n        if (input$demonstration_sum_or_mean == \"Mean\") {\n          sample_summary = mean(sample_draw)\n        }\n        result_str <- paste0(\n          sample_summary, \" (\", \n          paste(sample_draw, collapse = \" \"), \n          \")\"\n        )\n        coin_flip_number_labels_new = coin_flip_number_labels()\n        coin_flip_number_labels_new[current_flip_int] = result_str\n        coin_flip_number_labels(coin_flip_number_labels_new)\n      }\n    })\n    \n    # Display the samples. Arranged in yellow circles in 5 row by 2 column arrangment.\n    output$simulated_coin_flip_samples_numbers <- renderGrViz({\n      \n      if (count_coin_flip_simulation_2() == 0) {\n        return(NULL)\n      }\n      \n      n <- min(count_coin_flip_simulation_2(), 10)\n      \n      labels <- coin_flip_number_labels()\n      \n      num_rows <- ceiling(n / 2)\n      \n      table_rows <- \"\"\n      for (i in 1:num_rows) {\n        left_label <- labels[(i - 1) * 2 + 1]\n        right_index <- (i - 1) * 2 + 2\n        right_label <- if (right_index <= n) labels[right_index] else NULL\n        \n        # Left cell (always present)\n        left_cell <- sprintf(\n              \"<TD FIXEDSIZE='TRUE' WIDTH='120' HEIGHT='40' BGCOLOR='#f9ffbd' STYLE='rounded' BORDER='1' COLOR='black' CELLPADDING='4' ALIGN='CENTER' VALIGN='MIDDLE'>\n           <FONT POINT-SIZE='12'>%s<\/FONT>\n         <\/TD>\", left_label)\n        \n        right_cell <- if (!is.null(right_label)) {\n          sprintf(\n              \"<TD FIXEDSIZE='TRUE' WIDTH='120' HEIGHT='40' BGCOLOR='#f9ffbd' STYLE='rounded' BORDER='1' COLOR='black' CELLPADDING='4' ALIGN='CENTER' VALIGN='MIDDLE'>\n           <FONT POINT-SIZE='12'>%s<\/FONT>\n         <\/TD>\", right_label)\n        } else {\n          \"<TD FIXEDSIZE='TRUE' WIDTH='120' HEIGHT='40' CELLPADDING='4'><\/TD>\"\n        }\n        \n        row <- sprintf(\"<TR>%s%s<\/TR>\", left_cell, right_cell)\n        table_rows <- paste0(table_rows, row, \"\\n\")\n      }\n      \n      graph_string <- sprintf(\"\n        digraph diagram {\n          node [shape=plaintext]\n          graph [layout=dot]\n  \n          tbl [label=<\n            <TABLE BORDER='0' CELLBORDER='0' CELLSPACING='10'>\n              %s\n            <\/TABLE>\n          >]\n        }\n      \", table_rows)\n        \n      grViz(graph_string)\n    })\n    \n    ###################### Choose your own box ###################### \n    \n    ticket_numbers <- reactiveVal(c(1,0,0,0,0,0))\n    invalid_tickets_string_bool <- reactiveVal(FALSE)\n    number_of_ticket_draws <- reactiveVal(25)\n    \n    # Process tickets text box strings.\n    observeEvent(input$submit_tickets, {\n      \n      # Extract the values that are separated between the commas.\n      characters <- strsplit(input$box_tickets_text_entry, \"\")[[1]]\n      values = c()\n      current_string = \"\"\n      for (char in characters) {\n        if (char == \",\") {\n          values = c(values, current_string)\n          current_string = \"\"\n        } else {\n          current_string = paste(current_string, char, sep = \"\")\n        }\n      }\n      if (current_string != \"\") {\n        values = c(values, current_string)\n      }\n      \n      # Convert the values to numbers.\n      numeric_vec <- as.numeric(values)\n      \n      # Set the tickets in the box to default (1,0,0,0,0,0) if NA's present, or the string is empty.\n      if (any(is.na(numeric_vec))) {\n        invalid_tickets_string_bool(TRUE)\n        ticket_numbers(c(1,0,0,0,0,0))\n      } else if (length(numeric_vec) <= 1) {\n        invalid_tickets_string_bool(TRUE)\n        ticket_numbers(c(1,0,0,0,0,0))\n      } else {\n        ticket_numbers(numeric_vec)\n        invalid_tickets_string_bool(FALSE)\n      }\n    })\n    \n    # Error message for when the text box for entering the tickets for the box is invalid\n    output$tickets_text_error_message <- renderUI({\n      if (invalid_tickets_string_bool()) {\n        return(\n          HTML(\"<span style='color: red;'><p>Error: One or move values that you added cannot be interpreted. Please carefully\n               check what you entered. You must enter at least 2 valid tickets. Setting contents of the box to 1,0,0,0.<\/p><\/span>\")\n        )\n      }\n    })\n    \n    invalid_number_of_draws_bool = reactiveVal(FALSE)\n    \n    # Process number_of_draws value.\n    observeEvent(input$number_of_draws, {\n      if (!is.na(input$number_of_draws) && input$number_of_draws >= 1) {\n        number_of_ticket_draws(ceiling(input$number_of_draws))\n        invalid_number_of_draws_bool(FALSE)\n      } else {\n        invalid_number_of_draws_bool(TRUE)\n        number_of_ticket_draws(25)\n      }\n    })\n    \n    # Error message for when the number of draws is invalid\n    output$number_of_draws_error_message <- renderUI({\n      if (invalid_number_of_draws_bool()) {\n        return(\n          HTML(\"<span style='color: red;'><p>Error: The value for the 'number of draws' must be an integer greater than or equal to 1.\n               Setting value to 25 until the error is resolved.<\/p><\/span>\")\n        )\n      }\n    })\n    \n    output$box_model <- renderGrViz({\n      \n      your_own_model_number_labels(c())\n      count_your_own_box_model(0)\n      \n      # Place the tickets into a string.\n      # If greater than 15 tickets, split tickets onto new line.\n      tickets_string = \"\"\n      count = 0\n      for (val in ticket_numbers()){\n        count = count + 1\n        if (count == 15) {\n          tickets_string = paste(tickets_string, as.character(val), sep = \"\\n\")\n          count = 0\n        } else {\n          tickets_string = paste(tickets_string, as.character(val), sep = \", \")\n        }\n      }\n      tickets_string <- substring(tickets_string,2)\n      \n      # Get other elements for the box model\n      n = number_of_ticket_draws()\n      sample = \"Sample Sum\"\n      if (input$box_sum_or_mean == 2) {\n        sample = \"Sample Mean\"\n      }\n      \n      ##### Specify model ##### \n      # Set up graph and box\n      diagram = \"digraph diagram { graph [layout = dot, rankdir = TB] node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12, width = 2.5] box [label = '\"\n      diagram = paste(diagram, tickets_string, \"']\", sep = \"\")\n      \n      # Set up sample circle.\n      diagram = paste(diagram, \" node [shape = oval,width = 1.5,fillcolor = \\\"#f9ffbd\\\", fontsize = 12]sample [label = '\", sample, \"']\", sep = \"\")\n      \n      # Create edge between box and circle.\n      # Annotate edge with n value.\n      diagram = paste(diagram, \" edge [minlen = 2] box->sample [label = '  n = \", n, \"', fontsize = 12, labeldistance = 5]}\", sep = \"\")\n      \n      return (grViz(diagram))\n    })\n    \n    your_own_model_number_labels = reactiveVal(c())\n    count_your_own_box_model = reactiveVal(0)\n    \n    # When the radio button is changed, re-set counter and simulated values.\n    observeEvent(input$box_sum_or_mean, {\n      your_own_model_number_labels(c())\n      count_your_own_box_model(0)\n    })\n    \n    # Simulate the coin flips, calculating the sum or mean depending on the user choices.\n    observeEvent(input$simulate_your_own_box_model_button, {\n      # For the first 10, we just add a new coin flip.\n      if (count_your_own_box_model() < 10) {\n        count_your_own_box_model(count_your_own_box_model() + 1)\n        sample_draw = sample(ticket_numbers(), size = number_of_ticket_draws(), replace = TRUE)\n        # Find the sum or mean of the sample.\n        sample_summary = sum(sample_draw)\n        if (input$box_sum_or_mean == 2) {\n          sample_summary = mean(sample_draw)\n        }\n        result_str <- sample_summary\n        your_own_model_number_labels(c(your_own_model_number_labels(), result_str))\n        # For subsequent, we replaced samples that have already been displayed.\n      } else {\n        count_your_own_box_model(count_your_own_box_model() + 1)\n        current_flip_int = count_your_own_box_model()\n        current_flip_int = current_flip_int %% 10\n        if (current_flip_int == 0) { # Because 10 %% 10 = 0\n          current_flip_int = 10\n        }\n        sample_draw = sample(ticket_numbers(), size = number_of_ticket_draws(), replace = TRUE)\n        # Find the sum or mean of the sample.\n        sample_summary = sum(sample_draw)\n        if (input$box_sum_or_mean == 2) {\n          sample_summary = mean(sample_draw)\n        }\n        result_str <- sample_summary\n        labels_new = your_own_model_number_labels()\n        labels_new[current_flip_int] = result_str\n        your_own_model_number_labels(labels_new)\n      }\n    })\n    \n    # Display the sample means or sums for the user defined box. Arranged in yellow circles in 5 row by 2 column arrangement.\n    output$simulated_your_own_box_model_values <- renderGrViz({\n      \n      if (count_your_own_box_model() == 0) {\n        return(NULL)\n      }\n      \n      n <- min(count_your_own_box_model(), 10)\n      \n      labels <- your_own_model_number_labels()\n      \n      num_rows <- ceiling(n / 2)\n      \n      table_rows <- \"\"\n      for (i in 1:num_rows) {\n        left_label <- labels[(i - 1) * 2 + 1]\n        right_index <- (i - 1) * 2 + 2\n        right_label <- if (right_index <= n) labels[right_index] else NULL\n        \n        # Left cell (always present)\n        left_cell <- sprintf(\n              \"<TD FIXEDSIZE='TRUE' WIDTH='120' HEIGHT='40' BGCOLOR='#f9ffbd' STYLE='rounded' BORDER='1' COLOR='black' CELLPADDING='4' ALIGN='CENTER' VALIGN='MIDDLE'>\n           <FONT POINT-SIZE='12'>%s<\/FONT>\n         <\/TD>\", left_label)\n          \n        right_cell <- if (!is.null(right_label)) {\n          sprintf(\n              \"<TD FIXEDSIZE='TRUE' WIDTH='120' HEIGHT='40' BGCOLOR='#f9ffbd' STYLE='rounded' BORDER='1' COLOR='black' CELLPADDING='4' ALIGN='CENTER' VALIGN='MIDDLE'>\n           <FONT POINT-SIZE='12'>%s<\/FONT>\n         <\/TD>\", right_label)\n        } else {\n          \"<TD FIXEDSIZE='TRUE' WIDTH='120' HEIGHT='40' CELLPADDING='4'><\/TD>\"\n        }\n        \n        row <- sprintf(\"<TR>%s%s<\/TR>\", left_cell, right_cell)\n        table_rows <- paste0(table_rows, row, \"\\n\")\n      }\n      \n      graph_string <- sprintf(\"\n        digraph diagram {\n          node [shape=plaintext]\n          graph [layout=dot]\n  \n          tbl [label=<\n            <TABLE BORDER='0' CELLBORDER='0' CELLSPACING='10'>\n              %s\n            <\/TABLE>\n          >]\n        }\n      \", table_rows)\n      \n      grViz(graph_string)\n    })\n    \n  })\n    \n}","type":"text"},{"name":"R/fundamentals_box_model_part_1_ui.R","content":"boxModelPart1UI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    \n    HTML(\"<h1>The Box Model Part 1 - What is the Box Model?<\/h1>\"),\n    \n    fluidRow(\n      column(8,\n             tight_card(\n               \"What is the 'box model'?\",\n               HTML(\"<p>\n                      The box model, popularised by Freedman, Pisani, and Purves (1978), is a conceptual tool used in statistics to represent chance processes involving \n                      random draws. The 'box' contains tickets, each labelled with a possible outcome of a single trial. By imagining drawing tickets at random (with or\n                      without replacement), the model helps us simulate and understand the behaviour of random processes.\n                      <br><br>\n                      \n                      This may seem quite abstract, so in this page, we will break down the box model through the lens of flipping a coin. We know that if you flip one coin, \n                      that is, we perform one trial of flipping a coin, the coin will land on either a 'head' or a 'tail' (see the box part in the model to the right). Hence, \n                      inside the box, we would place two tickets, a 'head' ticket, and a 'tail' ticket. You can think of the box as the population of all possible outcomes of\n                      a single trial (in this case, the trial is flipping a coin).\n                      <br><br>\n                      \n                      <i>A sample is where we do more than one trial.<\/i> For example, if we were flipping a coin, you would flip it multiple times — say, 5 flips — and record\n                      the outcome each time. In terms of the box model, this is like drawing 5 tickets at random from the box (with replacement), where each ticket represents \n                      either a head or a tail.\n                      <br><br>\n\n                      Why use the box model? As we will see soon, it helps us reason about random variation, expected values, and the role of chance in statistics. In particular,\n                      examining different hypothesis tests on other pages of this site, where possible, they will be motivated through the lens of the box model. The goal with \n                      this is to develop your conceptual understanding of the hypothesis tests we study. However, it is still possible to engage with most of the content in this\n                      web app without understanding/studying the box model!<\/p>\"),\n               header_colour = \"#3179ae\"\n             ),\n      ),\n      column(4,\n             tight_card(\n               NULL,\n               HTML(\"<center>\"),\n               grVizOutput(ns(\"example_coin_flip_1\"), width = \"85%\", height = \"80%\"),\n               HTML(\"<\/center>\")\n             )\n      )\n    ),\n    \n    HTML(\"<br><br><br>\"),\n    \n    fluidRow(\n      \n      column(5,\n             tight_card(\n               \"Simulating Box-Model Draws\",\n               HTML(\"<p>For the example we are using in this section, consider that our sample involves flipping a coin 5 times and recording the number of heads and tails\n                        observed. We could think of our sample as 1 experiment with 5 trials, that is, 5 flips of a coin.\n                        <br><br>\n                                     \n                        For example, in one experiment, we might find that after 5 coin flips, we see 3 heads and 2 tails (HHHTT). Perhaps in the next experiment, we got\n                        really lucky and had 5 heads (HHHHH).\n                        <br><br>\n                         \n                        Instead of thinking about this as coin flips, another way of thinking about this is that we have a cardboard box with two tickets in it, a 'H' ticket, \n                        and a 'T' ticket. Then, the experiment is drawing a ticket from the box, recording whether we saw a 'H' or 'T', placing the ticket back into the box, \n                        and then repeating the process until we have drawn from the box 5 times (assuming we are doing 5 trials). This is what we mean by the box model \n                        representing a chance process. Each experiment is itself the result of random draws from the box.  \n                        <br><br>\n                        \n                        <span style='color: blue;'><b>Your turn!<\/b><\/span> In the section to the right, you can simulate taking different samples from the box model that we just\n                        described.<\/p>\"),\n               header_colour = \"#3179ae\"\n             ),\n      ),\n      column(7,\n             primary_card(\n               \"Demonstration\",\n               HTML(\"<p><b><i>Press 'Simulate' to do 1 experiment of the box-model below.<\/i><\/b><\/p>\"),\n               fluidRow(\n                 column(6,\n                        HTML(\"<center>\"),\n                        HTML(\"<br>\"),\n                        grVizOutput(ns(\"example_coin_flip_2\"), width = \"70%\", height = \"80%\"),\n                        HTML(\"<br><br>\"),\n                        actionButton(\n                          inputId = ns(\"simulate_coin_flip_1\"), label = HTML('<i class=\"fa fa-plus\"><\/i>Simulate'),\n                          class = \"btn btn-success\", style=\"color: #fff;\", width = \"50%\"\n                        ),\n                        HTML(\"<br><br><br>\"),\n                        HTML(\"<\/center>\"),\n                        \n                 ),\n                 column(6,\n                        grVizOutput(ns(\"simulated_coin_flip_samples\"))\n                 )\n               ),\n               header_colour = \"#3179ae\"\n             )\n      )\n    ),\n    \n    HTML(\"<br><br><br>\"),\n    \n    fluidRow(\n      \n      column(5,\n             tight_card(\n               \"Representing the Problem Numerically\",\n               HTML(\"<p>Using the same box model from before, let's consider that after our experiment, we observed the sample:<\/p>\"),\n               fluidRow(\n                 column(3),\n                 column(6, grVizOutput(ns(\"single_sample_words\"), height = \"80%\")),\n                 column(3)\n               ),\n               HTML(\"<p>\n                     An issue that we will run into is that 'H' and 'T' are not numbers. Ideally, we would like to summarise our sample using a single\n                     number, without having to specify the number of heads and tails individually.\n                     <br><br>\n                     \n                     Because of this, let’s change the tickets in our box to the numbers '1' and '0'. We can say that the number '1' represents drawing a head, and the\n                     number '0' represents drawing a tail. Under the same example as before, that means we drew 2 x '1' tickets and 3 x '0' tickets:\n                     <\/p>\"),\n               fluidRow(\n                 column(3),\n                 column(6, grVizOutput(ns(\"single_sample_numbers\"), height = \"80%\")),\n                 column(3)\n               ),\n               HTML(\"<p>\n                     Now that the tickets are numeric, we can model the sample using the sum or the mean:\n                     <ul>\n                       <li>Sum: 2 x 1 tickets + 3 x 0 tickets = 2 + 0 = 2<\/li>\n                       <li>Mean: (2 x 1 tickets + 3 x 0 tickets)/5 = (2 + 0)/5 = 0.4<\/li>\n                     <\/ul>\n                     In practice, it doesn’t matter whether we model the sample using the sum or mean, as long as we are consistent throughout.\n                     <br><br>\n                     \n                     <span style='color: blue;'><b>Your turn!<\/b><\/span> In the section to the right, you can simulate taking different samples from the \n                     box model with numeric tickets. You can choose whether you summarise the samples using the sum or the mean. \n                     <\/p>\"),\n               header_colour = \"#3179ae\"\n             ),\n      ),\n      column(7,\n             primary_card(\n               \"Demonstration\",\n               fluidRow(\n                 column(8,\n                        HTML(\"<p><b><i>Press 'Simulate' to do 1 experiment of the box-model below.<\/i><\/b><\/p>\"),\n                 ),\n                 column(4,\n                        radioButtons( \n                          inputId = ns(\"demonstration_sum_or_mean\"), \n                          label = \"Model using sum or mean:\", \n                          choices = c(\"Sum\", \"Mean\")\n                        ),\n                 )\n               ),\n               \n               \n               fluidRow(\n                 column(6,\n                        HTML(\"<center>\"),\n                        HTML(\"<br>\"),\n                        grVizOutput(ns(\"coin_flip_numeric_box_model\"), width = \"70%\", height = \"80%\"),\n                        HTML(\"<br><br>\"),\n                        actionButton(\n                          inputId = ns(\"simulate_coin_flip_2\"), label = HTML('<i class=\"fa fa-plus\"><\/i>Simulate'),\n                          class = \"btn btn-success\", style=\"color: #fff;\", width = \"50%\"\n                        ),\n                        HTML(\"<br><br><br>\"),\n                        HTML(\"<\/center>\"),\n                        \n                 ),\n                 column(6,\n                        grVizOutput(ns(\"simulated_coin_flip_samples_numbers\"))\n                 )\n               ),\n               header_colour = \"#3179ae\"\n             )\n      ),\n      \n    ),\n    \n    HTML(\"<br><br><br>\"),\n    \n    # Make your own box.\n    fluidRow(\n      column(5,\n             tight_card(\n               \"Testing Your Own Box\",\n               HTML(\"<p>\n                     The example box model that we have been using so far was flipping a coin 5 times, but you can create any box model that you want!\n                     <br><br>\n                     \n                     For example, we might be interested in modelling the number of times a die lands on the '1' face after 20 rolls of a die. If interested in that example,\n                     you would have one '1' ticket in the box, and five '0' tickets (to account for the other five sides on the die).\n                     <br><br>\n                     \n                     Below you can experiment with making your own box model and then generating samples from it. This time, we will not show you the actual tickets that were \n                     drawn for each sample, but rather the mean or sum of the tickets (depending on whether you are modelling the sample using the mean or sum).\n                     <\/p>\"),\n               \n               accordion(\n                 open = FALSE,\n                 \n                 # Step 1: Enter tickets.\n                 accordion_panel(\n                   HTML(\"<b>Step 1) Tickets<\/b>\"),\n                   HTML(\"<p>First, we need to specify the tickets that we will be adding to the box.<\/p>\"),\n                   HTML(\"<p>In the text box below, enter the tickets that you wish to place into the box. Only <i>numbers<\/i> can be\n                                     added, and <i>each ticket should be seperated by a comma<\/i>. For example, if you want to have 1x1 ticket\n                                     and 6x0 tickets in the box, enter <i>1,0,0,0,0,0<\/i>.\"),\n                   textAreaInput(\n                     ns(\"box_tickets_text_entry\"),\n                     NULL,\n                     value = \"1,0,0,0,0,0\",\n                     width = \"100%\"\n                   ),\n                   fluidRow(\n                     column(8),\n                     column(4,\n                            actionButton(ns(\"submit_tickets\"), \"Set Tickets\", class = \"btn btn-success\", style=\"color: #fff;\", width = \"100%\")\n                     )\n                   ),\n                   uiOutput(ns(\"tickets_text_error_message\"))\n                 ),\n                 \n                 # Step 2: Set n\n                 accordion_panel(\n                   HTML(\"<b>Step 2) Number of Draws<\/b>\"),\n                   HTML(\"<p>Second, we need to specify the number of draws (with replacement) that we will be taking from the box:<\/p>\"),\n                   numericInput(\n                     ns(\"number_of_draws\"),\n                     label = NULL,\n                     value = 20,\n                     min = 1\n                   ),\n                   uiOutput(ns(\"number_of_draws_error_message\"))\n                 )\n               ),\n               header_colour = \"#3179ae\"\n             ),\n      ),\n      \n      column(7,\n             primary_card(\n               \"Demonstration\",\n               fluidRow(\n                 column(8,\n                        HTML(\"<p><b><i>Press 'Simulate' to do 1 experiment of the box-model below.<\/i><\/b><\/p>\"),\n                 ),\n                 column(4,\n                        radioButtons( \n                          inputId = ns(\"box_sum_or_mean\"), \n                          label = \"Model using sum or mean:\", \n                          choices = list(\n                            \"Sum\" = 1,\n                            \"Mean\" = 2\n                          )\n                        ),\n                 )\n               ),\n               \n               \n               fluidRow(\n                 column(6,\n                        HTML(\"<center>\"),\n                        HTML(\"<br>\"),\n                        grVizOutput(ns(\"box_model\"), width = \"70%\", height = \"70%\"),\n                        HTML(\"<br><br>\"),\n                        actionButton(\n                          inputId = ns(\"simulate_your_own_box_model_button\"), label = HTML('<i class=\"fa fa-plus\"><\/i>Simulate'),\n                          class = \"btn btn-success\", style=\"color: #fff;\", width = \"50%\"\n                        ),\n                        HTML(\"<br><br><br>\"),\n                        HTML(\"<\/center>\"),\n                        \n                 ),\n                 column(6,\n                        grVizOutput(ns(\"simulated_your_own_box_model_values\"))\n                 )\n               ),\n               header_colour = \"#3179ae\"\n             )\n      )\n    ),\n    \n    HTML(\"<br><br><br>\"),\n\n  )\n}","type":"text"},{"name":"R/fundamentals_box_model_part_2_srv.R","content":"boxModelPart2Server <- function(id) {\n  \n  moduleServer(id, function(input, output, session) {\n    \n    ns <- session$ns\n    \n    ########## Box with tickets 1,0,0,0 (n = 25) ########## \n    \n    output$box_model_n_25 <- renderGrViz({\n      string <- paste(\"\n        digraph diagram {\n          graph [layout = dot, rankdir = TB]\n      \n          node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12, width = 2.5]\n          box [label = '1, 0, 0, 0']\n      \n          node [shape = oval,width = 1.5,fillcolor = \\\"#f9ffbd\\\", fontsize = 12]\n          sample [label = 'Sample Mean']\n      \n          edge [minlen = 2]\n            box->sample [label = '  n = 25', fontsize = 12, labeldistance = 5]\n        }\", sep = \"\")\n      grViz(string)\n    })\n    \n    empirical_data_n_25 <- reactiveVal(c())\n    \n    # Event: 1 repeat.\n    observeEvent(input$repeat_1_n_25, {\n      value = mean(sample(c(1, 0, 0, 0), size = 25, replace = TRUE))\n      empirical_data_n_25(c(empirical_data_n_25(), value))\n    })\n    \n    # Event: 10 repeats.\n    observeEvent(input$repeat_10_n_25, {\n      value = replicate(10, mean(sample(c(1, 0, 0, 0), size = 25, replace = TRUE)))\n      empirical_data_n_25(c(empirical_data_n_25(), value))\n    })\n    \n    # Event: 25 repeats.\n    observeEvent(input$repeat_25_n_25, {\n      value = replicate(25, mean(sample(c(1, 0, 0, 0), size = 25, replace = TRUE)))\n      empirical_data_n_25(c(empirical_data_n_25(), value))\n    })\n    \n    # Event: 100 repeats.\n    observeEvent(input$repeat_100_n_25, {\n      value = replicate(100, mean(sample(c(1, 0, 0, 0), size = 25, replace = TRUE)))\n      empirical_data_n_25(c(empirical_data_n_25(), value))\n    })\n    \n    # Event: reset histogram.\n    observeEvent(input$reset_button_n_25, {\n      empirical_data_n_25(c())\n    })\n    \n    # Histogram of mean frequencies.\n    output$histogram_frequencies_n_25 = renderPlot({\n      \n      values <- empirical_data_n_25()\n      num_values = as.character(length(values))\n      \n      title_string = paste(\"Empiricial Distribution of Sample Means (n = \", num_values, \")\", sep = \"\")\n      x_axis_string = \"Sample Mean Value\"\n      \n      # Main histogram\n      if (length(values) > 0) {\n        bins_to_include <- length(unique(values))/3\n        \n        # If over 20 bins, just set to 20 (otherwise too many bins)\n        if (bins_to_include > 15) bins_to_include <- 15\n        \n        range_vals <- range(values)\n        breaks_seq <- seq(from = range_vals[1], to = range_vals[2], length.out = bins_to_include + 1)\n        \n        hist(\n          values,\n          breaks = breaks_seq,\n          freq = FALSE,\n          col = \"lightgreen\",\n          border = \"black\",\n          xlab = x_axis_string,\n          ylab = \"Density\",\n          main = title_string\n        )\n        \n        \n        # Placeholder when no data exists\n      } else {\n        plot(\n          1, type = \"n\",\n          xlim = c(0, 10),\n          ylim = c(0, 0.25),\n          xlab = x_axis_string,\n          ylab = \"Density\",\n          main = title_string,\n          axes = FALSE\n        )\n        axis(1)\n        axis(2, at = seq(0, 0.25, by = 0.05), labels = seq(0, 0.25, by = 0.05))\n      }\n    })\n    \n    ########## Box with tickets 1,0,0,0 (n = 5) ########## \n    \n    output$box_model_n_5 <- renderGrViz({\n      string <- paste(\"\n        digraph diagram {\n          graph [layout = dot, rankdir = TB]\n      \n          node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12, width = 2.5]\n          box [label = '1, 0, 0, 0']\n      \n          node [shape = oval,width = 1.5,fillcolor = \\\"#f9ffbd\\\", fontsize = 12]\n          sample [label = 'Sample Mean']\n      \n          edge [minlen = 2]\n            box->sample [label = '  n = 5', fontsize = 12, labeldistance = 5]\n        }\", sep = \"\")\n      grViz(string)\n    })\n    \n    empirical_data_n_5 <- reactiveVal(c())\n    \n    # Event: 1 repeat.\n    observeEvent(input$repeat_1_n_5, {\n      value = mean(sample(c(1, 0, 0, 0), size = 5, replace = TRUE))\n      empirical_data_n_5(c(empirical_data_n_5(), value))\n    })\n    \n    # Event: 10 repeats.\n    observeEvent(input$repeat_10_n_5, {\n      value = replicate(10, mean(sample(c(1, 0, 0, 0), size = 5, replace = TRUE)))\n      empirical_data_n_5(c(empirical_data_n_5(), value))\n    })\n    \n    # Event: 25 repeats.\n    observeEvent(input$repeat_25_n_5, {\n      value = replicate(25, mean(sample(c(1, 0, 0, 0), size = 5, replace = TRUE)))\n      empirical_data_n_5(c(empirical_data_n_5(), value))\n    })\n    \n    # Event: 100 repeats.\n    observeEvent(input$repeat_100_n_5, {\n      value = replicate(100, mean(sample(c(1, 0, 0, 0), size = 5, replace = TRUE)))\n      empirical_data_n_5(c(empirical_data_n_5(), value))\n    })\n    \n    # Event: reset histogram.\n    observeEvent(input$reset_button_n_5, {\n      empirical_data_n_5(c())\n    })\n    \n    # Histogram of mean and sum frequencies.\n    output$histogram_frequencies_n_5 = renderPlot({\n      \n      values <- empirical_data_n_5()\n      num_values = as.character(length(values))\n      \n      title_string = paste(\"Empiricial Distribution of Sample Means (n = \", num_values, \")\", sep = \"\")\n      x_axis_string = \"Sample Mean Value\"\n      \n      # Main histogram\n      if (length(values) > 0) {\n        bins_to_include <- length(unique(values)) - 1\n        \n        range_vals <- range(values)\n        breaks_seq <- seq(from = range_vals[1], to = range_vals[2], length.out = bins_to_include + 1)\n        \n        hist(\n          values,\n          breaks = breaks_seq,\n          freq = FALSE,\n          col = \"lightgreen\",\n          border = \"black\",\n          xlab = x_axis_string,\n          ylab = \"Density\",\n          main = title_string\n        )\n        \n        \n        # Placeholder when no data exists\n      } else {\n        plot(\n          1, type = \"n\",\n          xlim = c(0, 10),\n          ylim = c(0, 0.25),\n          xlab = x_axis_string,\n          ylab = \"Density\",\n          main = title_string,\n          axes = FALSE\n        )\n        axis(1)\n        axis(2, at = seq(0, 0.25, by = 0.05), labels = seq(0, 0.25, by = 0.05))\n      }\n    })\n    \n    ########## Custom Box Simulation ########## \n    \n    custom_box_model_tickets = reactiveVal(c())\n    invalid_tickets_string_bool = reactiveVal(FALSE)\n    \n    # When the sum or mean radio button is updated, reset the data to be empty.\n    observeEvent(input$box_sum_or_mean, {\n      n_5_empirical_data(c())\n      n_25_empirical_data(c())\n      n_50_empirical_data(c())\n      n_100_empirical_data(c())\n    })\n    \n    observeEvent(input$custom_box_model_example_choice, {\n      n_5_empirical_data(c())\n      n_25_empirical_data(c())\n      n_50_empirical_data(c())\n      n_100_empirical_data(c())\n      if (input$custom_box_model_example_choice == 1) {\n        custom_box_model_tickets(c(1,0))\n      } else if (input$custom_box_model_example_choice == 2) {\n        custom_box_model_tickets(c(1,0,0,0))\n      } else if (input$custom_box_model_example_choice == 3) {\n        custom_box_model_tickets(c(1,0,0,0,0,0))\n      } else if (input$custom_box_model_example_choice == 4) {\n        custom_box_model_tickets(c(1,2,3,4,5,6,7,8,9))\n      } else if (input$custom_box_model_example_choice == 5) {\n        custom_box_model_tickets(c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,100))\n      } else {\n        custom_box_model_tickets(c(1,0))\n      } \n    })\n    \n    output$custon_box_model = renderGrViz({\n      vals = custom_box_model_tickets()\n      \n      # Initialize empty string and counter\n      tickets_string = \"\"\n      count = 0\n      \n      for (val in vals) {\n        count = count + 1\n        if (count == 15) {\n          tickets_string <- paste(tickets_string, as.character(val), sep = \"\\n\")\n          count = 0\n        } else {\n          tickets_string <- paste(tickets_string, as.character(val), sep = \", \")\n        }\n      }\n      \n      # Remove leading comma or newline\n      tickets_string = substring(tickets_string, 3)\n      \n      # Escape newlines for Graphviz\n      label_text = gsub(\"\\n\", \"\\\\\\\\n\", tickets_string)\n      \n      # Build the diagram string\n      string = paste0(\"\n      digraph diagram {\n        graph [layout = dot, rankdir = TB]\n        node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12, width = 2.5]\n        box [label = \\\"\", label_text, \"\\\"]\n      }\n    \")\n      \n      grViz(string)\n    })\n    \n    # If the user wants to manually specify a box model, bring up a text box for them to specify their tickets.\n    output$custom_box_model_input_button <- renderUI({\n      if (input$custom_box_model_example_choice == 6) {\n        return(\n          tagList(\n            HTML(\"<p>In the text box below, enter the tickets that you wish to place into the box. Only <i>numbers<\/i> can be\n                 added, and <i>each ticket should be seperated by a comma<\/i>. For example, if you want to have 1x1 ticket\n                 and 1x0 ticket in the box, enter <i>1,0<\/i>.\"),\n            textAreaInput(\n              ns(\"box_tickets_text_entry\"),\n              NULL,\n              value = \"1,0\",\n              width = \"100%\"\n            ),\n            fluidRow(\n              column(8),\n              column(4,\n                     actionButton(ns(\"submit_tickets\"), \"Set Tickets\", class = \"btn btn-success\", style=\"color: #fff;\", width = \"100%\")\n              )\n            ),\n            uiOutput(ns(\"tickets_text_error_message\"))\n          )\n        )\n      } else {\n        return()\n      }\n    })\n    \n    # Process tickets text box strings.\n    observeEvent(input$submit_tickets, {\n      \n      # Extract the values that are separated between the commas.\n      characters <- strsplit(input$box_tickets_text_entry, \"\")[[1]]\n      values = c()\n      current_string = \"\"\n      for (char in characters) {\n        if (char == \",\") {\n          values = c(values, current_string)\n          current_string = \"\"\n        } else {\n          current_string = paste(current_string, char, sep = \"\")\n        }\n      }\n      if (current_string != \"\") {\n        values = c(values, current_string)\n      }\n      \n      # Convert the values to numbers.\n      numeric_vec = as.numeric(values)\n      \n      # Set the tickets in the box to default (1,0) if NA's present, or the string is empty.\n      if (any(is.na(numeric_vec))) {\n        invalid_tickets_string_bool(TRUE)\n        custom_box_model_tickets(c(1,0))\n      } else if (length(numeric_vec) <= 1) {\n        invalid_tickets_string_bool(TRUE)\n        custom_box_model_tickets(c(1,0))\n      } else {\n        custom_box_model_tickets(numeric_vec)\n        invalid_tickets_string_bool(FALSE)\n      }\n    })\n    \n    # Error message for when the text box for entering the tickets for the box is invalid\n    output$tickets_text_error_message = renderUI({\n      if (invalid_tickets_string_bool()) {\n        return(\n          HTML(\"<span style='color: red;'><p>Error: One or move values that you added cannot be interpreted. Please carefully\n               check what you entered. You must enter at least 2 valid tickets. Setting contents of the box to 1,0,0,0.<\/p><\/span>\")\n        )\n      }\n    })\n    \n    n_5_empirical_data = reactiveVal(c())\n    n_25_empirical_data = reactiveVal(c())\n    n_50_empirical_data = reactiveVal(c())\n    n_100_empirical_data = reactiveVal(c())\n    \n    # Simulate tickets on button click.\n    observeEvent(input$simulate, {\n      n_5_empirical_data(replicate(10000, simulate_box(input$box_sum_or_mean, 5, custom_box_model_tickets())))\n      n_25_empirical_data(replicate(10000, simulate_box(input$box_sum_or_mean, 25, custom_box_model_tickets())))\n      n_50_empirical_data(replicate(10000, simulate_box(input$box_sum_or_mean, 50, custom_box_model_tickets())))\n      n_100_empirical_data(replicate(10000, simulate_box(input$box_sum_or_mean, 100, custom_box_model_tickets())))\n    })\n    \n    simulate_box <- function(mean_or_sample_as_int, n, box) {\n      value = sample(box, n, replace = TRUE)\n      if (mean_or_sample_as_int == 2) {\n        value = mean(value)\n      } else {\n        value = sum(value)\n      }\n      return(value)\n    }\n    \n    make_histogram_plot <- function(values_reactive, title) {\n      renderPlot({\n        values <- values_reactive()\n        num_values <- as.character(length(values))\n        \n        if (length(values) > 0) {\n          bins_to_include <- length(unique(values))\n          \n          # Cap the number of bins at 15\n          if (bins_to_include > 18) bins_to_include <- 18\n          \n          range_vals <- range(values)\n          breaks_seq <- seq(from = range_vals[1], to = range_vals[2], length.out = bins_to_include + 1)\n          \n          hist(\n            values,\n            breaks = \"Sturges\",\n            freq = FALSE,\n            col = \"lightgreen\",\n            border = \"black\",\n            xlab = \"Values\",\n            ylab = \"Density\",\n            main = title\n          )\n          \n        } else {\n          plot(\n            1, type = \"n\",\n            xlim = c(0, 10),\n            ylim = c(0, 0.25),\n            xlab = \"Values\",\n            ylab = \"Density\",\n            main = title,\n            axes = FALSE\n          )\n          axis(1)\n          axis(2, at = seq(0, 0.25, by = 0.05), labels = seq(0, 0.25, by = 0.05))\n        }\n      })\n    }\n    \n    output$histogram_frequencies_custom_n_5 <- make_histogram_plot(n_5_empirical_data, \"n = 5\")\n    output$histogram_frequencies_custom_n_25 <- make_histogram_plot(n_25_empirical_data, \"n = 25\")\n    output$histogram_frequencies_custom_n_50 <- make_histogram_plot(n_50_empirical_data, \"n = 50\")\n    output$histogram_frequencies_custom_n_100 <- make_histogram_plot(n_100_empirical_data, \"n = 100\")\n    \n    # Output message to accompany the different examples\n    output$examples_additional_information = renderUI({\n      if (input$custom_box_model_example_choice == 1) {\n        return(\n          HTML(\"<p><span style='color: red;'>What do we see after pressing simulate? <\/span>When looking from the perspective of sample sums, we see that at a sample size of n = 25, the distribution\n             of sample means appears normally distributed. Hence, for this box, values of n greater than or equal to 25 are sufficient. It is relatively unsurprising that we need\n             such a small sample size here. The box is very symmetric (there is an even balance between the '0' and '1' tickets).<\/p>\")\n        )\n      } else if (input$custom_box_model_example_choice == 2) {\n        return(\n          HTML(\"<p><span style='color: red;'>What do we see after pressing simulate? <\/span>When looking from the perspective of sample sums, we see that at a sample size of n = 25, the distribution\n             of sample means appears very close to being normally distributed. Hence, for this box, values of n greater than or equal to 25 are sufficient.<\/p>\")\n        )\n      } else if (input$custom_box_model_example_choice == 3) {\n        return(\n          HTML(\"<p><span style='color: red;'>What do we see after pressing simulate? <\/span>When looking from the perspective of sample sums, we see that at a sample size of n = 50, the distribution\n             of sample means appears very close to being normally distributed. We need a larger sample size for this box, as there is a large imbalance between the '0' and \n             '1' tickets.<\/p>\")\n        )\n      } else if (input$custom_box_model_example_choice == 4) {\n        return(\n          HTML(\"<p><span style='color: red;'>What do we see after pressing simulate? <\/span>When looking from the perspective of sample sums, we see that at a sample size of n = 5, the distribution\n             of sample means appears very close to being normally distributed. A small sample size for this box is sufficient, as the tickets are nearly symmetric.<\/p>\")\n        )\n      } else if (input$custom_box_model_example_choice == 5) {\n        return(\n          HTML(\"<p><span style='color: red;'>What do we see after pressing simulate? <\/span>Even at n = 100, the sample sums or means do not appear to be normally distributed. This is because the\n             tickets are incredibly asymmetric This is a classic example where assuming that if n is large, the CLT must apply (such as n greater than 35 or 50) can be \n             misleading.<\/p>\")\n        )\n      }\n    })\n\n  })\n    \n}","type":"text"},{"name":"R/fundamentals_box_model_part_2_ui.R","content":"boxModelPart2UI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    \n    HTML(\"<h1>The Box Model Part 2 - Central Limit Theorem<\/h1>\"),\n    \n    fluidRow(\n      \n      column(5,\n             tight_card(\n               \"Simulating Sample Means\",\n               HTML(\"<p>Consider that we have a box model with one '1' ticket and three '0' tickets. Each sample consists of 25 draws from the box, and we\n                                         represent the sample using the mean of the tickets.<\/p>\"),\n               HTML(\"<center>\"),\n               grVizOutput(ns(\"box_model_n_25\"), width = \"50%\", height = \"50%\"),\n               HTML(\"<\/center><br>\"),\n               HTML(\"<p>For example, imagine that from one experiment, we drew 10 '1' tickets and 15 '0' tickets. The sample mean would then be:<\/p>\"),\n               withMathJax(HTML(\n                 \"$$\\\\frac{10 \\\\times 1 + 15 \\\\times 0}{25} = \\\\frac{10}{25} = 0.4$$\"\n               )),\n               HTML(\"<p>\n                     But this example is just one experiment. We could repeat the experiment. Maybe the next time you do the experiment you get 14 '1' tickets and 11 '0' \n                     tickets, giving a mean of 0.56. Another time you could get 8 '1' ticekts and 17 '0' tickets, giving a mean of 0.32.\n                     <br><\/p>\"),\n               HTML(\"<p><b>Task 1:<\/b> To the right, repeat the experiments over and over again. Every time you do a\n                                     new experiment, its sample mean will be added to the histogram of the means observed so far. What shape do we see when considering\n                                     the distribution of the sample means?<\/p>\"),\n               accordion(\n                 open = FALSE,\n                 accordion_panel(\n                   HTML(\"<p><b>Task 1 Answer<\/b><\/p>\"),\n                   HTML(\"<p>We see that the distribution of the sample means forms an approximate normal distribution.<\/p>\")\n                 )\n               ),\n               header_colour = \"#3179ae\"\n             ),\n      ),\n      column(7,\n             primary_card(\n               \"Demonstration\",\n               HTML(\"<br>\"),\n               fluidRow(\n                 column(8,\n                        fluidRow(\n                          column(1),\n                          \n                          # Button for repeating adding the mean or sample sum to the histogram.\n                          column(5,\n                                 actionButton(\n                                   inputId = ns(\"repeat_1_n_25\"), label = HTML('<p>Repeat 1<\/p>'),\n                                   class = \"btn btn-primary\", style=\"color: #fff;\", width = \"100%\"\n                                 ),\n                                 HTML(\"<br><br>\"),\n                                 actionButton(\n                                   inputId = ns(\"repeat_25_n_25\"), label = HTML('<p>Repeat 25<\/p>'),\n                                   class = \"btn btn-primary\", style=\"color: #fff;\", width = \"100%\"\n                                 ),\n                          ),\n                          column(5,\n                                 actionButton(\n                                   inputId = ns(\"repeat_10_n_25\"), label = HTML('<p>Repeat 10<\/p>'),\n                                   class = \"btn btn-primary\", style=\"color: #fff;\", width = \"100%\"\n                                 ),\n                                 HTML(\"<br><br>\"),\n                                 actionButton(\n                                   inputId = ns(\"repeat_100_n_25\"), label = HTML('<p>Repeat 100<\/p>'),\n                                   class = \"btn btn-primary\", style=\"color: #fff;\", width = \"100%\"\n                                 ),\n                          ),\n                        )\n                 ),\n                 column(4,\n                        HTML(\"<br><center>\"),\n                        \n                        # On click, resets the histogram\n                        actionButton(\n                          inputId = ns(\"reset_button_n_25\"), label = HTML('<p>Reset<\/p>'),\n                          class = \"btn btn-danger\", style=\"color: #fff;\", width = \"80%\"\n                        ),\n                        HTML(\"<\/center><br>\"),\n                 )\n               ),\n               HTML(\"<br><br>\"),\n               HTML(\"<center>\"),\n               plotOutput(ns(\"histogram_frequencies_n_25\"), width = \"100%\", height = \"450px\"),\n               HTML(\"<\/center>\"),\n               \n               header_colour = \"#3179ae\"\n             )\n      ),\n      \n    ),\n    \n    HTML(\"<br><br><br>\"),\n    \n    fluidRow(\n      \n      column(5,\n             tight_card(\n               \"When the Draws are Reduced\",\n               HTML(\"<p>Now, let's repeat the task that we did before (repeatedly forming samples) for a new box model that is mostly identical to the one\n                                  before, except now, each sample consists of only 5 draws from the box.<\/p>\"),\n               HTML(\"<center>\"),\n               grVizOutput(ns(\"box_model_n_5\"), width = \"50%\", height = \"50%\"),\n               HTML(\"<\/center><br>\"),\n               HTML(\"<p><b>Task 2:<\/b> Repeat what we did before, but for when we only take 5 draws from the box.\n                                     Do we still see a normal distribution?<\/p>\"),\n               accordion(\n                 open = FALSE,\n                 accordion_panel(\n                   HTML(\"<p><b>Task 2 Answer<\/b><\/p>\"),\n                   HTML(\"<p>We see that the distribution of the sample means is no longer normally distributed (there is a tail on the right). Additionally,\n                                            we see discrete jumps (for n = 5, it is only possible to have a mean of 0, 0.2, 0.4, 0.6, 0.8, 1), further detracting from the \n                                            normal distribution shape we saw before.<\/p>\")\n                 )\n               ),\n               header_colour = \"#3179ae\"\n             )\n      ),\n      column(7,\n             primary_card(\n               \"Demonstration\",\n               HTML(\"<br>\"),\n               fluidRow(\n                 column(8,\n                        fluidRow(\n                          column(1),\n                          \n                          # Button for repeating adding the mean or sample sum to the histogram.\n                          column(5,\n                                 actionButton(\n                                   inputId = ns(\"repeat_1_n_5\"), label = HTML('<p>Repeat 1<\/p>'),\n                                   class = \"btn btn-primary\", style=\"color: #fff;\", width = \"100%\"\n                                 ),\n                                 HTML(\"<br><br>\"),\n                                 actionButton(\n                                   inputId = ns(\"repeat_25_n_5\"), label = HTML('<p>Repeat 25<\/p>'),\n                                   class = \"btn btn-primary\", style=\"color: #fff;\", width = \"100%\"\n                                 ),\n                          ),\n                          column(5,\n                                 actionButton(\n                                   inputId = ns(\"repeat_10_n_5\"), label = HTML('<p>Repeat 10<\/p>'),\n                                   class = \"btn btn-primary\", style=\"color: #fff;\", width = \"100%\"\n                                 ),\n                                 HTML(\"<br><br>\"),\n                                 actionButton(\n                                   inputId = ns(\"repeat_100_n_5\"), label = HTML('<p>Repeat 100<\/p>'),\n                                   class = \"btn btn-primary\", style=\"color: #fff;\", width = \"100%\"\n                                 ),\n                          ),\n                        )\n                 ),\n                 column(4,\n                        HTML(\"<br><center>\"),\n                        \n                        # On click, resets the histogram\n                        actionButton(\n                          inputId = ns(\"reset_button_n_5\"), label = HTML('<p>Reset<\/p>'),\n                          class = \"btn btn-danger\", style=\"color: #fff;\", width = \"80%\"\n                        ),\n                        HTML(\"<\/center><br>\"),\n                 )\n               ),\n               HTML(\"<br><br>\"),\n               HTML(\"<center>\"),\n               plotOutput(ns(\"histogram_frequencies_n_5\"), width = \"100%\", height = \"450px\"),\n               HTML(\"<\/center>\"),\n               \n               header_colour = \"#3179ae\"\n             )\n      ),\n      \n    ),\n    \n    HTML(\"<br><br><br>\"),\n    \n    fluidRow(\n      column(12,\n             tight_card(\n               \"Introducing the Central Limit Theorem (CLT)\",\n               HTML(\"<p>\n                    <span style='color: blue;'><b>What is the central limit theorem?<\/b><\/span> The Central Limit Theorem (CLT) states that if you take <b>many \n                    random samples<\/b> of the same size from any population, the <b>distribution of the sample means (or sums) will tend to look like a normal \n                    distribution<\/b> as the sample size gets larger — even if the original population is not normally distributed.\n                    <br><br>\n                    \n                    When considering this through the lens of the box model, the box represents our population. So, when applying the central limit theorem to the box model,\n                    we can say that if we take a sufficiently large number of draws from a box, then the sample sums (or means) will follow a normal distribution.\n                    <br><br>\n                    \n                    The key words here are <b>sufficiently larger<\/b>. This means that our number of draws (n) must be relatively high. How high? This depends\n                    on the tickets in the box.\n                    <br><br>\n                    \n                    For example, before we had two box models with the tickets '1', '0', '0', '0', with the only difference being that one box model had samples formed from\n                    25 draws from the box (i.e. n = 25), with the other formed from 5 draws from the box (i.e. n = 5). From the demonstration, we observed that when we \n                    repeatedly drew from the box 25 times and calculated the mean, the distribution of the means appeared to be normally distributed. Hence, 25 draws from \n                    the box <b>was sufficiently<\/b> large for the sample means to be normally distributed. However, when we repeated the experiment of drawing from the box 5 times \n                    and taking the mean, the distribution was not normally distributed. Hence, five draws from the box <b>was not sufficiently<\/b> large for the sample means to\n                    be normally distributed. In this example, we could have also calculated the sample sums instead. We would have seen the same-looking sample distributions\n                    for the n = 25 and n = 5 box models..\n                    <br><br>\n                    \n                    You may be wondering if there is some set number of draws (i.e. some threshold value for n) that you can use to say that the CLT always applies. Some people\n                    may say that if you have greater than 35 draws, then the CLT will hold, but this is not always the case. You should always look at your underlying data. If\n                    the tickets in the box model are symmetric and already nearly normally distributed, then you will not need many draws for the CLT to apply. However, if the\n                    box were very skewed (imagine a box with one '1' ticket and ninety '0' tickets), you would likely need many more than 35 draws for the CLT to apply.\n                    <br><br>\n                    \n                    In the activity below, you have the opportunity to specify your own box (as well as trial some boxes that we specified), to investigate how many draws are \n                    needed for the sample means (or sums) to be normally distributed.\n                    <\/p>\"),\n               header_colour = \"#3179ae\"\n             )\n      ),\n    ),\n    \n    HTML(\"<br><br><br>\"),\n    \n    # Make your own box.\n    fluidRow(\n      column(5,\n             tight_card(\n               \"Different Number of Draws\",\n               HTML(\"<p>\n                     In this demonstration, you will be changing the contents of the box (that is, the tickets in the box). From this box, we will draw samples of size n = 5, \n                     25, 50 and 100. For each of these sample sizes, you will generate 100,000 samples by pressing the 'Sample' button below (it may take a few seconds for the \n                     samples to be created). You will then look at the different histograms for each sample size to gauge at what point our sample size was large enough for the\n                     central limit theorem to apply.\n                     <br><br>\n                     \n                     You are free to set your own tickets to place in the box, but we recommend using the practice boxes first, as they include text that describes what we see\n                     to help guide you.\n                     <br><br>\n                     \n                     <i>Note: Due to how the bin widths are chosen in this exercise, sometimes the distribution of the means and the sums do not match up. For example, for the \n                     example 1 box, it appears that the CLT applies for the sample sums for n = 25, but not for the mean when n = 25. You should not read into this. The sample\n                     sum histograms do seem to better represent the data. In real life, you would experiment with the histogram bin widths until you feel they accurately \n                     represent the data.<\/i>\n                     <br><br>\n\n                     <b>Current box:<\/b>\n                     <\/p>\"\n               ),\n               HTML(\"<center>\"),\n               grVizOutput(ns(\"custon_box_model\"), width = \"50%\", height = \"50%\"),\n               HTML(\"<\/center>\"),\n               HTML(\"<br>\"),\n               HTML(\"<p><b>Box contents:<\/b><\/p>\"),\n               radioButtons(\n                 ns(\"custom_box_model_example_choice\"),\n                 NULL,\n                 choices = c(\"Example 1 (Coin Flip)\" = 1,\n                             \"Example 2 (1 in 4)\" = 2,\n                             \"Example 3 (Dice)\" = 3,\n                             \"Example 4 (Many Tickets)\" = 4,\n                             \"Example 5 (Very Imbalanced)\" = 5,\n                             \"Choose Your Own!\" = 6)\n               ),\n               uiOutput(ns(\"custom_box_model_input_button\")),\n               header_colour = \"#3179ae\"\n             ),\n      ),\n      \n      column(7,\n             primary_card(\n               \"Demonstration\",\n               HTML(\"<br>\"),\n               fluidRow(\n                 column(6, \n                        HTML(\"<center>\"),\n                        actionButton(\n                          inputId = ns(\"simulate\"), label = HTML('<p>Simulate<\/p>'),\n                          class = \"btn btn-primary\", style=\"color: #fff;\", width = \"40%\"\n                        ),\n                        HTML(\"<\/center>\")\n                 ),\n                 column(6,\n                        HTML(\"<center>\"),\n                        radioButtons(\n                          ns(\"box_sum_or_mean\"),\n                          label = NULL,\n                          choices = list(\n                            \"Sum\" = 1,\n                            \"Mean\" = 2\n                          )\n                        ),\n                        HTML(\"<\/center>\")\n                 )\n               ),\n               \n               fluidRow(\n                 column(6,\n                        HTML(\"<center>\"),\n                        HTML(\"<br>\"),\n                        plotOutput(ns(\"histogram_frequencies_custom_n_5\")),\n                        plotOutput(ns(\"histogram_frequencies_custom_n_50\")),\n                        HTML(\"<\/center>\")\n                 ),\n                 column(6,\n                        HTML(\"<center>\"),\n                        HTML(\"<br>\"),\n                        plotOutput(ns(\"histogram_frequencies_custom_n_25\")),\n                        plotOutput(ns(\"histogram_frequencies_custom_n_100\")),\n                        HTML(\"<\/center>\")\n                 )\n               ),\n               uiOutput(ns(\"examples_additional_information\")),\n               header_colour = \"#3179ae\"\n             )\n      )\n    ),\n    \n    HTML(\"<br><br><br>\"),\n\n  )\n}","type":"text"},{"name":"R/fundamentals_box_model_part_3_srv.R","content":"boxModelPart3Server <- function(id) {\n  \n  moduleServer(id, function(input, output, session) {\n    \n    ns <- session$ns\n    \n    ticket_numbers <- reactiveVal(c(1,0))\n    invalid_tickets_string_bool <- reactiveVal(FALSE)\n    number_of_ticket_draws <- reactiveVal(100)\n    \n    # Process tickets text box strings.\n    observeEvent(input$submit_tickets, {\n      \n      # Extract the values that are separated between the commas.\n      characters <- strsplit(input$box_tickets_text_entry, \"\")[[1]]\n      values = c()\n      current_string = \"\"\n      for (char in characters) {\n        if (char == \",\") {\n          values = c(values, current_string)\n          current_string = \"\"\n        } else {\n          current_string = paste(current_string, char, sep = \"\")\n        }\n      }\n      if (current_string != \"\") {\n        values = c(values, current_string)\n      }\n      \n      # Convert the values to numbers.\n      numeric_vec <- as.numeric(values)\n      \n      # Set the tickets in the box to default (1,0,0,0) if NA's present, or the string is empty.\n      if (any(is.na(numeric_vec))) {\n        invalid_tickets_string_bool(TRUE)\n        ticket_numbers(c(1,0,0,0))\n      } else if (length(numeric_vec) <= 1) {\n        invalid_tickets_string_bool(TRUE)\n        ticket_numbers(c(1,0,0,0))\n      } else {\n        ticket_numbers(numeric_vec)\n        invalid_tickets_string_bool(FALSE)\n      }\n    })\n    \n    # Error message for when the text box for entering the tickets for the box is invalid\n    output$tickets_text_error_message <- renderUI({\n      if (invalid_tickets_string_bool()) {\n        return(\n          HTML(\"<span style='color: red;'><p>Error: One or move values that you added cannot be interpreted. Please carefully\n               check what you entered. You must enter at least 2 valid tickets. Setting contents of the box to 1,0,0,0.<\/p><\/span>\")\n        )\n      }\n    })\n    \n    invalid_number_of_draws_bool = reactiveVal(FALSE)\n    \n    # Process number_of_draws value.\n    observeEvent(input$number_of_draws, {\n      if (!is.na(input$number_of_draws) && input$number_of_draws >= 1) {\n        number_of_ticket_draws(ceiling(input$number_of_draws))\n        invalid_number_of_draws_bool(FALSE)\n      } else {\n        invalid_number_of_draws_bool(TRUE)\n        number_of_ticket_draws(25)\n      }\n    })\n    \n    # Error message for when the number of draws is invalid\n    output$number_of_draws_error_message <- renderUI({\n      if (invalid_number_of_draws_bool()) {\n        return(\n          HTML(\"<span style='color: red;'><p>Error: The value for the 'number of draws' must be an integer greater than or equal to 1.\n               Setting value to 25 until the error is resolved.<\/p><\/span>\")\n        )\n      }\n    })\n    \n    \n    \n    ########## Process empirical sample sums and means ########## \n    empirical_data <- reactiveVal(c())\n    \n    # Event: 1 repeat.\n    observeEvent(input$repeat_1, {\n      value = simulate_box(input$box_sum_or_mean, number_of_ticket_draws(), ticket_numbers())\n      empirical_data(c(empirical_data(), value))\n    })\n    \n    # Event: 10 repeats.\n    observeEvent(input$repeat_10, {\n      value = replicate(10, simulate_box(input$box_sum_or_mean, number_of_ticket_draws(), ticket_numbers()))\n      empirical_data(c(empirical_data(), value))\n    })\n    \n    # Event: 25 repeats.\n    observeEvent(input$repeat_25, {\n      value = replicate(25, simulate_box(input$box_sum_or_mean, number_of_ticket_draws(), ticket_numbers()))\n      empirical_data(c(empirical_data(), value))\n    })\n    \n    # Event: 100 repeats.\n    observeEvent(input$repeat_100, {\n      value = replicate(100, simulate_box(input$box_sum_or_mean, number_of_ticket_draws(), ticket_numbers()))\n      empirical_data(c(empirical_data(), value))\n    })\n    \n    # Event: reset histogram.\n    observeEvent(input$reset_button, {\n      empirical_data(c())\n    })\n    \n    ################################################################\n    \n    ############################ Plots ############################# \n    \n    output$box_model <- renderGrViz({\n      \n      # If there has been a change to the input values (and hence this graph has been re-generated), reset the empirical data.\n      empirical_data(c())\n      \n      # Place the tickets into a string.\n      # If greater than 15 tickets, split tickets onto new line.\n      tickets_string = \"\"\n      count = 0\n      for (val in ticket_numbers()){\n        count = count + 1\n        if (count == 15) {\n          tickets_string = paste(tickets_string, as.character(val), sep = \"\\n\")\n          count = 0\n        } else {\n          tickets_string = paste(tickets_string, as.character(val), sep = \", \")\n        }\n      }\n      tickets_string <- substring(tickets_string,2)\n      \n      # Get other elements for the box model\n      n = number_of_ticket_draws()\n      sample = \"Sample Sum\"\n      if (input$box_sum_or_mean == 2) {\n        sample = \"Sample Mean\"\n      }\n      \n      ##### Specify model ##### \n      \n      ### This is code that creates the box model.\n      # digraph diagram {\n      #   graph [layout = dot, rankdir = TB]\n      #   \n      #   node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12, width = 2.5]\n      #     box [label = '1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0\\n1,0,0,0,0,0,0,0,0,0,0,0,0']\n      #     \n      #     node [shape = oval,width = 1.5,fillcolor = \\\"#f9ffbd\\\", fontsize = 12]  \n      #     sample [label = '?']\n      #     \n      #     edge [minlen = 2]\n      #       box->sample [label = '  n = 10', fontsize = 12, labeldistance = 5]\n      #   }\n      \n      # Set up graph and box\n      diagram = \"digraph diagram { graph [layout = dot, rankdir = TB] node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12, width = 2.5] box [label = '\"\n      diagram = paste(diagram, tickets_string, \"']\", sep = \"\")\n      \n      # Set up sample circle.\n      diagram = paste(diagram, \" node [shape = oval,width = 1.5,fillcolor = \\\"#f9ffbd\\\", fontsize = 12]sample [label = '\", sample, \"']\", sep = \"\")\n      \n      # Create edge between box and circle.\n      # Annotate edge with n value.\n      diagram = paste(diagram, \" edge [minlen = 2] box->sample [label = '  n = \", n, \"', fontsize = 12, labeldistance = 5]}\", sep = \"\")\n      \n      return (grViz(diagram))\n    })\n    \n    # Histogram of mean and sum frequencies.\n    output$histogram_frequencies = renderPlot({\n      \n      values <- empirical_data()\n      num_values = as.character(length(values))\n      \n      title_string = paste(\"Empiricial Distribution of Sample Sums (n = \", num_values, \")\", sep = \"\")\n      x_axis_string = \"Sample Sum Value\"\n      if (input$box_sum_or_mean == 2) {\n        title_string = paste(\"Empiricial Distribution of Sample Means (n = \", num_values, \")\", sep = \"\")\n        x_axis_string = \"Sample Mean Value\"\n      }\n      \n      # Main histogram\n      if (length(values) > 0) {\n        bins_to_include <- length(unique(values))\n        \n        # If over 20 bins, just set to 20 (otherwise too many bins)\n        if (bins_to_include > 20) bins_to_include <- 20\n        \n        hist(\n          values,\n          breaks = bins_to_include,\n          freq = FALSE,\n          col = \"lightgreen\",\n          border = \"black\",\n          xlab = x_axis_string,\n          ylab = \"Density\",\n          main = title_string,\n        )\n  \n        \n      # Placeholder when no data exists\n      } else {\n        plot(\n          1, type = \"n\",\n          xlim = c(0, 10),\n          ylim = c(0, 0.25),\n          xlab = x_axis_string,\n          ylab = \"Density\",\n          main = title_string,\n          axes = FALSE\n        )\n        axis(1)\n        axis(2, at = seq(0, 0.25, by = 0.05), labels = seq(0, 0.25, by = 0.05))\n      }\n    })\n  \n    # Histogram with normal curve to shown normal curve approximation.\n    output$normal_curve_model = renderPlot({\n      \n      x_axis_string = \"Sample Sum Value\"\n      title_string = \"Empirical Distribution of 10000 Sample Sums with\\nOverlaid Normal Curve\"\n      if (input$box_sum_or_mean == 2) {\n        title_string = \"Empirical Distribution of 10000 Sample Means with\\nOverlaid Normal Curve\"\n        x_axis_string = \"Sample Mean Value\"\n      }\n      \n      # Get 1000 samples for the histogram.\n      data = replicate(10000, simulate_box(input$box_sum_or_mean, number_of_ticket_draws(), ticket_numbers()))\n      data = data.frame(values = data)\n      \n      # Normal curve parameters.\n      EV = number_of_ticket_draws() * mean(ticket_numbers())\n      SE = sqrt(number_of_ticket_draws()) * popsd(ticket_numbers())\n      if (input$box_sum_or_mean == 2) { \n        EV = mean(ticket_numbers())\n        SE = popsd(ticket_numbers())/sqrt(number_of_ticket_draws())\n      }\n      \n      bins_to_include = length(table(data)) * 1.3\n      if (bins_to_include >= 50) {\n        bins_to_include = 50\n      }\n\n      hist(\n        data$values,\n        breaks = bins_to_include,\n        freq = FALSE,\n        col = \"lightgreen\",\n        border = \"black\",\n        xlab = x_axis_string,\n        ylab = \"Density\",\n        main = title_string,\n      )\n      \n      curve(\n        dnorm(x, mean = EV, sd = SE),  # normal density with your mean (EV) and sd (SE)\n        from = min(data$values),        # start of curve range\n        to = max(data$values),          # end of curve range\n        add = TRUE,                     # overlay on existing plot\n        col = \"red\",\n        lwd = 2                        # line width\n      )\n    })\n    \n    # Histogram with normal curve to shown normal curve approximation.\n    output$shaded_normal_curve = renderPlot({\n      \n      # If the lower threshold is greater than the upper threshold, return early.\n      if (error_message_interval_flag()) {\n        return()\n      }\n      \n      req(EV_string())\n      req(SE_string())\n      EV_val = as.numeric(EV_string())\n      SE_val = as.numeric(SE_string())\n      lower_value = lower_boundary_num_store()\n      upper_value = upper_boundary_num_store()\n      \n      # Define the limits for shading\n      lower_xlimit_plot <- EV_val - SE_val * 4\n      upper_xlimit_plot <- EV_val + SE_val * 4\n      \n      # When we have infinity values, lower and upper_values set to NA. Set to the lower and upper xlimits.\n      if (is.na(lower_value)) {\n        lower_value = lower_xlimit_plot\n      }\n      if (is.na(upper_value)) {\n        upper_value = upper_xlimit_plot\n      }\n      \n      # Reset the upper and lower value when they exceed the xlimits.\n      if (upper_value > upper_xlimit_plot) {\n        upper_value = upper_xlimit_plot\n      } else if (lower_value < lower_xlimit_plot) {\n        lower_value = lower_xlimit_plot\n      }\n      \n      # Set tight margins: bottom, left, top, right\n      par(mar = c(3, 2, 1, 1), xaxs = \"i\", yaxs = \"i\")  # Fill space tightly\n      \n      # Generate x and y values for the normal curve\n      x_range <- seq(EV_val - 4 * SE_val, EV_val + 4 * SE_val, length.out = 1000)\n      y_values <- dnorm(x_range, mean = EV_val, sd = SE_val)\n      \n      # Tick positions and labels\n      x_ticks <- EV_val + SE_val * (-3:3)\n      x_labels <- format(round(x_ticks, 2), nsmall = 2)\n      \n      # Start empty plot\n      plot(x_range, y_values, type = \"n\",\n           axes = FALSE, xlab = \"\", ylab = \"\", main = \"\")\n      \n      # Shaded region\n      shade_x <- seq(lower_value, upper_value, length.out = 1000)\n      shade_y <- dnorm(shade_x, mean = EV_val, sd = SE_val)\n      \n      polygon(c(shade_x, rev(shade_x)),\n              c(rep(0, length(shade_y)), rev(shade_y)),\n              col = rgb(1, 0, 0, 0.5), border = NA)\n      \n      lines(x_range, y_values, col = \"black\", lwd = 2)\n      \n      # Custom x-axis\n      axis(1, at = x_ticks, labels = x_labels, cex.axis = 0.9)\n    })\n    \n    ################################################################\n    \n    # Text telling the user the boxes mean and popsd.\n    output$box_statistics <- renderUI({\n      \n      mean_ = mean(ticket_numbers())\n      sd_ = popsd(ticket_numbers())\n      \n      mean_statment = HTML(paste(\"<p><b>Mean of the box:<\/b> $$ \\\\mu =  \", as.character(round(mean_, digits = 5)), \"$$<\/p>\", sep = \"\"))\n      sd_statment = HTML(paste(\"<p><b>Population SD of the box: <\/b> $$ \\\\sigma = \", as.character(round(sd_, digits = 5)), \"$$<\/p>\", sep = \"\"))\n      \n      return(tagList(\n        withMathJax(\n          mean_statment, sd_statment\n        )\n      ))\n    })\n    \n    # Text instructions for the central limit theorem section\n    output$CLT_text_instructions_output <- renderUI({\n      sample = \"sum\"\n      if (input$box_sum_or_mean == 2) {\n        sample = \"mean\"\n      }\n      \n      string = paste(\"<p>Recall that the central limit theorem tells us that if we take a <b>sufficiently large number of draws<\/b> \n                     from the box, then the <b>sample \", sample, \"s will follow an approximately normal distribution<\/b>.<br><br>Now we will empirically\n                     test whether n = \", number_of_ticket_draws(), \" is a sufficient number of draws for the central limit theorem to\n                     apply.<br><br>To do this, press the button below to repeat the process of drawing from the box \", number_of_ticket_draws(),\n                     \" and finding the \", sample, \". These will be added to the histogram. If we have taken enough draws from the box, then the \n                     histogram should look normally distributed.\", sep = \"\")\n      \n      return(HTML(string))\n    })\n    \n    EV_string <- reactiveVal(\"\")\n    SE_string <- reactiveVal(\"\")\n    \n    # Text instructions for whether the CLT applies to this box model.\n    output$CLT_satisfied_text <- renderUI({\n      sample = \"sum\"\n      if (input$box_sum_or_mean == 2) {\n        sample = \"mean\"\n      }\n      \n      string = paste(\"<p>Does the data in the histogram above look normally distributed? Ensure that you have repeated the process of\n                     drawing from the box, and finding the sample \", sample, \" many times. If it does not, scroll back above and update the\n                     number of draws in step 2. If it does, continue below!<\/p>\", sep = \"\")\n      \n      return(HTML(string))\n    })\n    \n    # Text instructions for whether the CLT applies to this box model.\n    output$normal_distribution_text <- renderUI({\n      sample = \"sum\"\n      if (input$box_sum_or_mean == 2) {\n        sample = \"mean\"\n      }\n      \n      instructions = HTML(paste(\"<p>Now that we have confirmed that we are taking a sufficient number of draws for the sample \", sample, \"s to follow a\n                     normal distribution, we want to specify this general normal curve. We will set the mean to\n                     be equal to the <b>sample \", sample, \"'s<\/b> expected value, and the standard deviation equal to its standard error:<\/p>\", sep = \"\"))\n      \n      # EV and SE text (changes based upon whether the sample sum or mean is being used).\n      expected_value = \"\"\n      standard_error = \"\"\n      EV = \"\"\n      SE = \"\"\n      \n      # Mean\n      if (input$box_sum_or_mean == 2) { \n        EV = as.character(round(mean(ticket_numbers()), 5))\n        EV_string(EV)\n        expected_value = withMathJax(\n          HTML(\"<p><b>Expected Value:<\/b><\/p>\"),\n          HTML(paste(\"$$\\\\begin{align*} \\\\text{EV} &= \\\\mu \\\\\\\\ &=\", EV, \"\\\\end{align*}$$\", sep = \"\"))\n        )\n        \n        SE = as.character(round(popsd(ticket_numbers())/sqrt(number_of_ticket_draws()),5))\n        SE_string(SE)\n        standard_error = withMathJax(\n          HTML(\"<p><b>Standard Error:<\/b><\/p>\"),\n          HTML(paste(\"$$\\\\begin{align*} \\\\text{SE} &= \\\\frac{\\\\sigma}{\\\\sqrt{n}} \\\\\\\\ &= \\\\frac{\", round(popsd(ticket_numbers()), 5) , \"}{\\\\sqrt{\", \n                     as.character(number_of_ticket_draws()), \"}}\\\\\\\\ &= \", SE, \"\\\\end{align*}$$\", sep = \"\"))\n        )\n        \n        # Sum\n      } else {\n        EV = as.character(round(number_of_ticket_draws() * mean(ticket_numbers()), 5))\n        EV_string(EV)\n        expected_value = withMathJax(\n          HTML(\"<p><b>Expected Value:<\/b><\/p>\"),\n          HTML(paste(\"$$\\\\begin{align*} \\\\text{EV} &= n \\\\times \\\\mu \\\\\\\\ &=\", as.character(number_of_ticket_draws()), \"\\\\times\", round(mean(ticket_numbers()), 5),\n                     \"\\\\\\\\ &= \", EV, \"\\\\end{align*}$$\", sep = \"\"))\n        )\n        \n        SE = as.character(round(sqrt(number_of_ticket_draws()) * popsd(ticket_numbers()),5))\n        SE_string(SE)\n        standard_error = withMathJax(\n          HTML(\"<p><b>Standard Error:<\/b><\/p>\"),\n          HTML(paste(\"$$\\\\begin{align*} \\\\text{SE} &= \\\\sqrt{n} \\\\times \\\\sigma \\\\\\\\ &= \\\\sqrt{\", as.character(number_of_ticket_draws()), \"} \\\\times\", \n                     round(popsd(ticket_numbers()), 5), \"\\\\\\\\ &= \", SE, \"\\\\end{align*}$$\", sep = \"\"))\n        )\n      }\n      \n      \n      normal_curve_text = HTML(paste(\"<p>Having found the expected value and standard error, we can model the distribution of the sample \", sample, \"s using the\n                                following <b>general normal curve:<\/b><\/p>\", sep = \"\"))\n      \n      noraml_curve = withMathJax(\n        paste(\"$$\\\\begin{align*} \\\\text{Sample Sum} &\\\\sim N(\\\\text{EV}, \\\\text{SE}^2) \\\\\\\\ &= N(\", EV, \", \", SE, \"^2) \\\\end{align*}$$\", sep = \"\")\n      )\n      \n      return(\n        tagList(\n          instructions, expected_value, standard_error, normal_curve_text, noraml_curve\n        )\n      )\n    })\n    \n    # Text instructions for the finding probabilities section.\n    output$finding_probabilities_text <- renderUI({\n      \n      sample = \"sum\"\n      if (input$box_sum_or_mean == 2) {\n        sample = \"mean\"\n      }\n      \n      instructions = paste(\"<p>Now that we are modelling the sample \", sample , \"s using a normal curve with mean \", EV_string(), \" and standard deviation \",\n                           SE_string(), \", we can start to ask probability based questions like, <br>\",\n                           \"<ul>\n                              <li>What is the chance that we see a value greater than\", withMathJax(\"\\\\(x\\\\)\"), \"?<\/li>\",\n                           \"<li>What is the chance that we see a value between\", withMathJax(\"\\\\(y\\\\)\"), \" and \", withMathJax(\"\\\\(z\\\\)\"), \"?<\/li>\",\n                           \"<\/ul>\",\n                           \"Use the controls below to find the the probabilities that values lie within the ranges you set.<\/p>\")\n      return(\n        tagList(\n          HTML(instructions)\n        )\n      ) \n    })\n    \n    error_message_interval_flag <- reactiveVal(FALSE)\n    lower_boundary_num_store <- reactiveVal(NA)\n    upper_boundary_num_store <- reactiveVal(NA)\n    \n    # Probability for values within a range text.\n    output$probability_answer_text <- renderUI({\n      \n      lower_boundary_str = \"\"\n      lower_boundary_num = NA \n      if (input$lower_boundary_infinity == TRUE || is.na(input$lower_boundary_numeric)) {\n        lower_boundary_str = \"-\\\\infty\"\n        lower_boundary_num_store(NA)\n      } else {\n        lower_boundary_str = as.character(input$lower_boundary_numeric)\n        lower_boundary_num = input$lower_boundary_numeric\n        lower_boundary_num_store(lower_boundary_num)\n      }\n      \n      upper_boundary_str = \"\"\n      upper_boundary_num = NA \n      if (input$upper_boundary_infinity == TRUE || is.na(input$upper_boundary_numeric)) {\n        upper_boundary_str = \"\\\\infty\"\n        upper_boundary_num_store(NA)\n      } else {\n        upper_boundary_str = as.character(input$upper_boundary_numeric)\n        upper_boundary_num = input$upper_boundary_numeric\n        upper_boundary_num_store(upper_boundary_num)\n      }\n      \n      # Check that the lower boundary num is not higher than the upper boundary num.\n      if (!is.na(lower_boundary_num) && !is.na(upper_boundary_num)) {\n        if (lower_boundary_num > upper_boundary_num) {\n          error_message_interval_flag(TRUE)\n          return()\n        } else {\n          error_message_interval_flag(FALSE)\n        }\n      } else {\n        error_message_interval_flag(FALSE)\n      }\n      \n      # Find area between the lower and upper boundary.\n      area = 1\n      # This is the case where we are finding the area from -infty to +infty. This area is simply 1.\n      EV_num = as.numeric(EV_string())\n      SE_num = as.numeric(SE_string())\n      # [-inf, inf]\n      if (is.na(lower_boundary_num) && is.na(upper_boundary_num)) {\n        area = 1\n        # [-inf, x]\n      } else if (is.na(lower_boundary_num)) {\n        area = pnorm(upper_boundary_num, mean = EV_num, sd = SE_num, lower.tail = TRUE)\n        # [x, inf]\n      } else if (is.na(upper_boundary_num)) {\n        area = pnorm(lower_boundary_num, mean = EV_num, sd = SE_num, lower.tail = FALSE)\n        # [x, y]\n      } else {\n        area  = pnorm(upper_boundary_num, mean = EV_num, sd = SE_num) - pnorm(lower_boundary_num, mean = EV_num, sd = SE_num)\n      }\n      area = as.character(round(area, digits = 5))\n      \n      text = paste(\"<p>The probability that a value lies wthin the range \\\\([\", lower_boundary_str, \",\", upper_boundary_str, \"]\\\\) is \", \n                   area, \".<\/p>\", sep = \"\")\n      \n      return(\n        tagList(\n          withMathJax(HTML(text))\n        )\n      )\n    })\n    \n    # Error message to display if the lower interval is greater than the upper interval.\n    output$interval_error_message <- renderUI({\n      if (error_message_interval_flag() == TRUE) {\n        return(HTML(\"<p style='color: red;'>ERROR: The lower interval cannot be greater than the upper interval.<\/p>\"))\n      }\n    })\n    \n    output$example_coin_flip <- renderGrViz({\n      string = \"digraph diagram {\n        graph [layout = dot, rankdir = TB]\n      \n        node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12, width = 2.5]\n        box [label = '1, 0']\n      \n        node [shape = oval,width = 1.5,fillcolor = \\\"#f9ffbd\\\", fontsize = 12]\n        sample [label = 'Sample Sum']\n      \n        edge [minlen = 2]\n          box->sample [label = '  n = 100', fontsize = 12, labeldistance = 5]\n        }\"\n      return(grViz(string))\n    })\n    \n  })\n  \n}","type":"text"},{"name":"R/fundamentals_box_model_part_3_ui.R","content":"boxModelPart3UI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    \n    ############ TITLE ############ \n    fluidRow(\n      column(12,\n             HTML(\"<h1>The Box Model Part 3 - Modelling Using a Normal Distribution<\/h1>\"),\n      )\n    ),\n\n    ############ SECTION: Lesson Prelude ############\n    \n    fluidRow(\n      column(8,\n            tight_card(\n              \"Modelling Using a Normal Distribution\",\n              HTML(\"<p>\n                    In part 2, we learnt that the central limit theorem tells us that if we take a sufficiently large number of draws from a box, then the sample means (or sums)\n                    will follow a normal distribution. We also demonstrated how to verify whether the number of draws is sufficiently large by repeatedly forming samples,\n                    calculating the mean (or sum) of each, and observing whether the samples are normally distributed.\n                    <br><br>\n                    \n                    Why do we care about whether the samples are normally distributed? If they are, we can start to answer probability-based questions.\n                    <br><br>\n                    \n                    For example, consider we were interested in the probability of flipping 60 or more heads from 100 coins. To do this, we first construct a box model with the\n                    ticket '1', which represents landing on a head, and the ticket '0', which represents landing on a tail. As we flip 100 coins, that is equivalent to drawing \n                    100 times from the box. We will represent this sample using the sum (this box model is pictured to the right).\n                    <br><br>\n                    \n                    Here is a very brief overview of how you can use the normal distribution to answer probability questions. The first step is to actually specify the normal \n                    distribution that we are using to model the box model to the right. We do this by calculating the expected value (which acts as the mean for the normal\n                    distribution) and standard error (which acts as the standard deviation for the normal distribution). Then, to actually find the probabilities we are \n                    interested in, we use the normal distribution we just specified and calculate areas under the curve (the area represents the probability). For example,\n                    if we wanted to find the probability that you flip 60 or more heads from 100 coins, we would calculate the area under the curve above 60 (values to the right\n                    of 60 indicate more than 60 heads). We find that this area is 0.02275, meaning the chance of flipping 60 or more heads from 100 coins is 2.275%.\n                    <br><br>\n                    \n                    This concludes the brief introduction. It may all seem vague at the moment, but the steps below go into much more depth! The best way to learn more about \n                    this is to experiment with the 'Box Model Playground' below. To help you learn, read below for suggested tasks.\n                    <\/p>\"),\n              accordion(\n                open = FALSE,\n                accordion_panel(\n                  HTML(\"<p><b>Suggested Exercise 1: Observing 70 Heads<\/b><\/p>\"),\n                  HTML(\"<p>\n                       The first suggested exercise is to recreate the scenario above, but with a slight change. What is the probability that if you flipped 100 coins, you would\n                       observe 70 or more heads?\n                       <br><br>\n                       \n                       To do this:\n                       <ul>\n                          <li>In the 'Box Parameters' mini-section, set the tickets and number of draws to match the box model to the right. Ensure that we take the sum for the\n                          samples (you could also take the mean, if you prefer, but you will need to adjust later steps).<\/li>\n                          <li>Verify that n = 100 is a sufficient number of draws for the central limit theorem to apply for this box model.<\/li>\n                          <li>Find the probability of observing a sum of 70 or more. To do this, set the lower boundary to 70, and the upper boundary to ∞.<\/li>\n                       <\/ul>\n\n                       The answer is 3e-05, which means 0.00003 (0.003%).\n                       <br><br>\n                       \n                       <b><span style='color: red;'>Extension Question:<\/span><\/b> What is the chance that you observed 40 to 70 heads (inclusive)?\n                       <\/p>\")\n                ),\n                accordion_panel(\n                  HTML(\"<p><b>Suggested Exercise 2: Rolling a Dice (Part 1)<\/b><\/p>\"),\n                  HTML(\"<p>\n                       You have one ice cream left at home, and you and your brother desperately want it. Your brother turns to you and says, \\\"Let's play a little game. I want \n                       you to roll a 6-sided die 50 times. Every time you roll it, write down the face that the die landed on, and at the end, add up the 50 numbers you recorded\n                       rom the 50 rolls. If the sum is greater than 150, then you can have the ice cream, and otherwise, I get to eat it.\\\" You agree to his little game.\n                       <br><br>\n                       \n                       To do this:\n                       <ul>\n                          <li>In the 'Box Parameters' mini-section, set the tickets to be the numbers 1 through 6, and the number of draws to be 50. Ensure that we are taking \n                          the sum for the samples (your brother asked you for the sum after all).<\/li>\n                          <li>Verify that n = 50 is a sufficient number of draws for the central limit theorem to apply for this box model.\n                          <li>Find the probability of observing a sum of 150 or more. To do this, set the lower boundary to 150, and the upper boundary to ∞.<\/li>\n                       <\/ul>\n\n                       We won't give you the <b>EXACT<\/b> answer this time, but it should be above 90%. \n                       <br><br>\n\n                       <b><span style='color: red;'>Extension Question:<\/span><\/b> For the game to be fairer, there should be a 50% change that either you or your brother could \n                       win. Instead of 150, what should the sum be changed to?\n                       <\/p>\")\n                ),\n                accordion_panel(\n                  HTML(\"<p><b>Suggested Exercise 2: Rolling a Dice (Part 2)<\/b><\/p>\"),\n                  HTML(\"<p>\n                         Next week, you and your brother are in the same predicament. One ice cream left - who gets it? Your brother proposes a new game. You roll a 6-sided \n                         die 50 times and take the sums, just as you did last time. If the sum is between 145 and 175 (inclusive), you get the ice cream. Otherwise, your \n                         brother gets it. What is the probability that you get the ice cream?\n                         <\/p>\")\n                )\n              ),\n              header_colour = \"#3179ae\"\n            )\n      ),\n      column(4,\n             tight_card(\n               NULL,\n               HTML(\"<center>\"),\n               grVizOutput(ns(\"example_coin_flip\"), width = \"80%\", height = \"100%\"),\n               HTML(\"<\/center>\")\n             )\n      )\n    ),\n    \n    HTML(\"<br>\"),\n    \n    \n    fluidRow(\n      column(12,\n             HTML(\"<center><h2><u>Box Model Playground<\/u><\/h2><\/center>\"),\n      )\n    ),\n    \n    ############ SECTION: Setting up the Box Model ############\n    fluidRow(\n      column(7,\n             tight_card(\n               \"Box Parameters\",\n               HTML(\"<p>First we need to create the box. Follow steps 1, 2, and 3 to configure the box to be whatever you wish to model.\n                      The box will output on the right according to the settings that you pick.<\/p><br>\"),\n               \n               accordion(\n                 open = FALSE,\n                 \n                 # Step 1: Enter tickets.\n                 accordion_panel(\n                   HTML(\"<b>Step 1) Tickets<\/b>\"),\n                   HTML(\"<p>First, we need to specify the tickets that we will be adding to the box.<\/p>\"),\n                   HTML(\"<p>In the text box below, enter the tickets that you wish to place into the box. Only <i>numbers<\/i> can be\n                               added, and <i>each ticket should be seperated by a comma<\/i>. For example, if you want to have one '1' ticket\n                               and one '0' tickets in the box, enter <i>1,0<\/i>.\"),\n                   textAreaInput(\n                     ns(\"box_tickets_text_entry\"),\n                     NULL,\n                     value = \"1,0\",\n                     width = \"100%\"\n                   ),\n                   fluidRow(\n                     column(8),\n                     column(4,\n                            actionButton(ns(\"submit_tickets\"), \"Set Tickets\", class = \"btn btn-success\", style=\"color: #fff;\", width = \"100%\")\n                     )\n                   ),\n                   uiOutput(ns(\"tickets_text_error_message\"))\n                 ),\n                 \n                 # Step 2: Set n\n                 accordion_panel(\n                   HTML(\"<b>Step 2) Number of Draws<\/b>\"),\n                   HTML(\"<p>Second, we need to specify the number of draws (with replacement) that we will be taking from the box:<\/p>\"),\n                   numericInput(\n                     ns(\"number_of_draws\"),\n                     label = NULL,\n                     value = 100,\n                     min = 1\n                   ),\n                   uiOutput(ns(\"number_of_draws_error_message\"))\n                 ),\n                 \n                 # Step 3: Model Using Sum or Mean\n                 accordion_panel(\n                   HTML(\"<b>Step 3) Model Using Sum or Mean<\/b>\"),\n                   HTML(\"<p>Third, we need to specify whether we will be representing the sample using the mean or sum of the draws:<br><br><\/p>\"),\n                   radioButtons(\n                     ns(\"box_sum_or_mean\"),\n                     label = NULL,\n                     choices = list(\n                       \"Sum\" = 1,\n                       \"Mean\" = 2\n                     )\n                   )\n                 )\n               ),\n               header_colour = \"#3179ae\"\n             ),\n      ),\n      \n      column(5,\n             # Box model output.\n             tight_card(\n               NULL,\n               HTML(\"<center>\"),\n               grVizOutput(ns(\"box_model\"), width = \"70%\", height = \"70%\"),\n               HTML(\"<\/center>\")\n             ),\n\n             # Mean and SD of the box output.\n             tight_card(\n               NULL,\n               uiOutput(outputId = ns(\"box_statistics\"))\n             )\n      )\n    ),\n    \n    HTML(\"<br><br><br>\"),\n\n    ############ SECTION: Checking Central Limit Theorem ############\n    fluidRow(\n      column(5,\n             tight_card(\n               \"Central Limit Theorem\",\n               uiOutput(outputId = ns(\"CLT_text_instructions_output\")),\n               HTML(\"<br>\"),\n               fluidRow(\n                 column(1),\n\n                 # Button for repeating adding the mean or sample sum to the histogram.\n                 column(5,\n                        actionButton(\n                          inputId = ns(\"repeat_1\"), label = HTML('<i class=\"fa fa-plus\"><\/i> Repeat 1'),\n                          class = \"btn btn-primary\", style=\"color: #fff;\", width = \"100%\"\n                        ),\n                        HTML(\"<br><br>\"),\n                        actionButton(\n                          inputId = ns(\"repeat_25\"), label = HTML('<i class=\"fa fa-plus\"><\/i> Repeat 25'),\n                          class = \"btn btn-primary\", style=\"color: #fff;\", width = \"100%\"\n                        ),\n                 ),\n                 column(5,\n                        actionButton(\n                          inputId = ns(\"repeat_10\"), label = HTML('<i class=\"fa fa-plus\"><\/i> Repeat 10'),\n                          class = \"btn btn-primary\", style=\"color: #fff;\", width = \"100%\"\n                        ),\n                        HTML(\"<br><br>\"),\n                        actionButton(\n                          inputId = ns(\"repeat_100\"), label = HTML('<i class=\"fa fa-plus\"><\/i> Repeat 100'),\n                          class = \"btn btn-primary\", style=\"color: #fff;\", width = \"100%\"\n                        ),\n                 ),\n               ),\n               HTML(\"<br><center>\"),\n\n               # On click, resets the histogram\n               actionButton(\n                 inputId = ns(\"reset_button\"), label = HTML('<i class=\"fa fa-redo\"><\/i> Reset'),\n                 class = \"btn btn-danger\", style=\"color: #fff;\"\n               ),\n               HTML(\"<\/center><br>\"),\n               header_colour = \"#3179ae\"\n             ),\n\n      ),\n\n      # Histogram Distribution\n      column(7,\n             tight_card(\n               NULL,\n               HTML(\"<center>\"),\n               plotOutput(ns(\"histogram_frequencies\"), width = \"100%\", height = \"450px\"),\n               HTML(\"<\/center>\")\n             ),\n             tight_card(\n               NULL,\n               uiOutput(outputId = ns(\"CLT_satisfied_text\")),\n             ),\n      )\n\n    ),\n\n    HTML(\"<br><br><br>\"),\n\n    ############ SECTION: Modelling Using the Normal Curve ############\n    fluidRow(\n      column(5,\n             tight_card(\n                 \"Modelling Using a Normal Distribution\",\n                 uiOutput(ns(\"normal_distribution_text\")),\n                 header_colour = \"#3179ae\"\n              )\n      ),\n      column(7,\n             tight_card(\n               NULL,\n               HTML(\"<center>\"),\n               plotOutput(ns(\"normal_curve_model\"), width = \"100%\", height = \"450px\"),\n               HTML(\"<\/center>\")\n             )\n      )\n    ),\n\n    HTML(\"<br><br><br>\"),\n    \n    ############ SECTION: Finding Probabilities ############\n    fluidRow(\n\n      column(6,\n             tight_card(\n                 \"Finding Probabilities\",\n                 uiOutput(ns(\"finding_probabilities_text\")),\n                 HTML(\"<br>\"),\n                 fluidRow(\n                   column(1),\n                   column(4,\n                      HTML(\"<center><p><b>Lower Boundary<\/b><\/p><\/center>\"),\n                      checkboxInput(ns(\"lower_boundary_infinity\"), HTML(paste(\"<p>\", withMathJax(\"\\\\(-\\\\infty\\\\)\"),\"<\/p>\")), FALSE),\n                      conditionalPanel(\n                        condition = paste0('input[\\'', ns('lower_boundary_infinity'), \"\\'] == false\"),\n                        #condition = \"input.lower_boundary_infinity == false\",\n                        numericInput(\n                          ns(\"lower_boundary_numeric\"),\n                          label = NULL,\n                          value = 0\n                        ),\n                      ),\n                   ),\n                   column(2),\n                   column(4,\n                      HTML(\"<center><p><b>Upper Boundary<\/b><\/p><\/center>\"),\n                      checkboxInput(ns(\"upper_boundary_infinity\"), HTML(paste(\"<p>\", withMathJax(\"\\\\(\\\\infty\\\\)\"),\"<\/p>\")), FALSE),\n                      conditionalPanel(\n                        condition = paste0('input[\\'', ns('upper_boundary_infinity'), \"\\'] == false\"),\n\n                        #condition = \"input.upper_boundary_infinity == false\",\n                        numericInput(\n                          ns(\"upper_boundary_numeric\"),\n                          label = NULL,\n                          value = 1\n                        ),\n                      ),\n                   ),\n                   column(1)\n                 ),\n                 uiOutput(ns('interval_error_message')),\n                 header_colour = \"#3179ae\"\n             )\n      ),\n      column(6,\n             tight_card(\n               NULL,\n               HTML(\"<center>\"),\n               plotOutput(ns(\"shaded_normal_curve\"), width = \"100%\", height = \"350px\"),\n               HTML(\"<\/center>\")\n             ),\n             tight_card(\n               NULL,\n               uiOutput(ns(\"probability_answer_text\"))\n             ),\n\n      )\n\n    ),\n    \n    HTML(\"<br><br><br>\"),\n    \n  )\n}","type":"text"},{"name":"R/fundamentals_confidence_interval_srv.R","content":"confidenceIntervalServer <- function(id) {\n  \n  moduleServer(id, function(input, output, session) {\n    \n    ns <- session$ns\n    \n    \n    ########## Demo Confidence Intervals 1 ########## \n    lower_bounds_demo_1 <- reactiveVal(c())\n    upper_bounds_demo_1 <- reactiveVal(c())\n    contains_mean_demo_1 <- reactiveVal(c())\n    \n    intervals_generated_so_far <- reactiveVal(0)\n    intervals_not_containing_mean <- reactiveVal(0)\n    \n    # Simulate - Creating 100 confidence intervals.\n    observeEvent(input$simulate_demo_1, {\n      \n      # Create 100 confidence intervals using a normal distribution.\n      true_mean = 100\n      sample_size = 30\n      pop_sd = 15\n      lower_bounds = numeric(100)\n      upper_bounds = numeric(100)\n      contains_mean = logical(100)\n      not_containing_mean_count = 0\n      for (i in 1:100) {\n        sample = rnorm(sample_size, mean = true_mean, sd = pop_sd)\n        sample_mean = mean(sample)\n        stderr = sd(sample) / sqrt(sample_size)\n        margin = qnorm(0.975) * stderr\n        lower = sample_mean - margin\n        upper = sample_mean + margin\n        lower_bounds[i] = lower\n        upper_bounds[i] = upper\n        contains_mean[i] = lower <= true_mean & upper >= true_mean\n        not_containing_mean_count = not_containing_mean_count + !(lower <= true_mean & upper >= true_mean)\n      }\n      \n      # Save data\n      lower_bounds_demo_1(lower_bounds)\n      upper_bounds_demo_1(upper_bounds)\n      contains_mean_demo_1(contains_mean)\n      \n      # Update historical values\n      intervals_generated_so_far(intervals_generated_so_far() + 100)\n      intervals_not_containing_mean(intervals_not_containing_mean() + not_containing_mean_count)\n    })\n    \n    observeEvent(input$reset_history_demo_1, {\n      intervals_generated_so_far(0)\n      intervals_not_containing_mean(0)\n    })\n    \n    # Confidence interval plot.\n    output$confidence_interval_plot_demo_1 = renderPlot({\n      true_mean = 100\n      \n      lower_bounds = lower_bounds_demo_1()\n      upper_bounds = upper_bounds_demo_1()\n      contains_mean = contains_mean_demo_1()\n      \n      # Set fallback x-limits if no data exists yet\n      x_min = if (length(lower_bounds) > 0) min(lower_bounds, na.rm = TRUE) else true_mean - 10\n      x_max = if (length(upper_bounds) > 0) max(upper_bounds, na.rm = TRUE) else true_mean + 10\n      \n      # Set up plot area\n      plot(\n        NA, xlim = c(x_min, x_max), ylim = c(1, 100),\n        xlab = \"Value\", ylab = \"Sample Number\",\n        main = \"Simulated 95% Confidence Intervals\"\n      )\n      \n      # Add dashed line for true mean\n      abline(v = true_mean, lty = 2)\n      \n      # Only draw intervals if data is available\n      if (length(lower_bounds) > 0) {\n        for (i in 1:100) {\n          color = if (contains_mean[i]) \"green\" else \"red\"\n          lines(c(lower_bounds[i], upper_bounds[i]), c(i, i), col = color, lwd = 2)\n        }\n      }\n    })\n    \n    # History of the confidence intervals that have been generated.\n    output$demo_1_confidence_interval_history <- renderUI({\n      total_intervals_generated_so_far = intervals_generated_so_far()\n      num_intervals_not_containing_mean = intervals_not_containing_mean()\n      percentage_containing_mean = 0\n      if (total_intervals_generated_so_far != 0) {\n        percentage_containing_mean = 100 * (total_intervals_generated_so_far-num_intervals_not_containing_mean)/total_intervals_generated_so_far\n      }\n      HTML(paste0(\n        \"<b>Running History:<\/b><br>\",\n        \"<ul>\",\n        \"<li>Total number of intervals generated so far: \", total_intervals_generated_so_far, \"<\/li>\",\n        \"<li>Total number of intervals NOT containing the population mean: \", num_intervals_not_containing_mean, \"<\/li>\",\n        \"<li>Percentage of intervals containing the population mean: \", round(percentage_containing_mean, 2), \"%<\/li>\",\n        \"<\/ul>\"\n      ))\n    })\n    \n    ########## Demo Confidence Intervals 2 ########## \n    \n    lower_bounds_demo_2 <- reactiveVal(c())\n    upper_bounds_demo_2 <- reactiveVal(c())\n    contains_mean_demo_2 <- reactiveVal(c())\n    \n    intervals_generated_so_far_2 <- reactiveVal(0)\n    intervals_not_containing_mean_2 <- reactiveVal(0)\n    \n    # Simulate - Creating 100 confidence intervals.\n    observeEvent(input$simulate_demo_2, {\n      \n      # Create 100 confidence intervals using a normal distribution.\n      true_mean = input$dist_mean\n      sample_size = input$sample_size\n      pop_sd = input$dist_sd\n      lower_bounds = numeric(100)\n      upper_bounds = numeric(100)\n      contains_mean = logical(100)\n      not_containing_mean_count = 0\n      for (i in 1:100) {\n        sample = rnorm(sample_size, mean = true_mean, sd = pop_sd)\n        sample_mean = mean(sample)\n        stderr = sd(sample) / sqrt(sample_size)\n        percentile = (1 + (input$confidence_level)/100)/2\n        margin = qnorm(percentile) * stderr\n        lower = sample_mean - margin\n        upper = sample_mean + margin\n        lower_bounds[i] = lower\n        upper_bounds[i] = upper\n        contains_mean[i] = lower <= true_mean & upper >= true_mean\n        not_containing_mean_count = not_containing_mean_count + !(lower <= true_mean & upper >= true_mean)\n      }\n      \n      # Save data\n      lower_bounds_demo_2(lower_bounds)\n      upper_bounds_demo_2(upper_bounds)\n      contains_mean_demo_2(contains_mean)\n      \n      # Update historical values\n      intervals_generated_so_far_2(intervals_generated_so_far_2() + 100)\n      intervals_not_containing_mean_2(intervals_not_containing_mean_2() + not_containing_mean_count)\n    })\n    \n    # Confidence interval plot.\n    output$confidence_interval_plot_demo_2 = renderPlot({\n      true_mean <- input$dist_mean\n      pop_sd <- max(input$dist_sd, 1e-6)\n      \n      # Define min and max confidence level allowed\n      conf_min <- 1\n      conf_max <- 99\n      \n      # Compute largest margin for fixed axis (at max confidence level & smallest sample size)\n      percentile_max <- (1 + conf_max / 100) / 2\n      stderr_max <- pop_sd / sqrt(5)\n      margin_max <- qnorm(percentile_max) * stderr_max\n      \n      # Fixed axis limits based on largest possible margin\n      x_min <- true_mean - margin_max * 1.2\n      x_max <- true_mean + margin_max * 1.2\n      \n      # Current confidence level (used for titles, actual CI calculation elsewhere)\n      conf_level <- min(max(input$confidence_level, conf_min), conf_max)\n      percentile <- (1 + conf_level / 100) / 2\n      \n      lower_bounds <- lower_bounds_demo_2()\n      upper_bounds <- upper_bounds_demo_2()\n      contains_mean <- contains_mean_demo_2()\n      \n      plot(\n        NA, xlim = c(x_min, x_max), ylim = c(1, 100),\n        xlab = \"Value\", ylab = \"Sample Number\",\n        main = paste0(\"Simulated \", conf_level, \"% Confidence Intervals\")\n      )\n      \n      abline(v = true_mean, lty = 2)\n      \n      if (length(lower_bounds) > 0) {\n        for (i in seq_along(lower_bounds)) {\n          color <- if (contains_mean[i]) \"green\" else \"red\"\n          lines(c(lower_bounds[i], upper_bounds[i]), c(i, i), col = color, lwd = 2)\n        }\n      }\n    })\n    \n    \n    # History of the confidence intervals that have been generated.\n    output$demo_2_confidence_interval_history <- renderUI({\n      total_intervals_generated_so_far = intervals_generated_so_far_2()\n      num_intervals_not_containing_mean = intervals_not_containing_mean_2()\n      percentage_containing_mean = 0\n      if (total_intervals_generated_so_far != 0) {\n        percentage_containing_mean = 100 * (total_intervals_generated_so_far-num_intervals_not_containing_mean)/total_intervals_generated_so_far\n      }\n      HTML(paste0(\n        \"<b>Running History:<\/b><br>\",\n        \"<ul>\",\n        \"<li>Total number of intervals generated so far: \", total_intervals_generated_so_far, \"<\/li>\",\n        \"<li>Total number of intervals NOT containing the population mean: \", num_intervals_not_containing_mean, \"<\/li>\",\n        \"<li>Percentage of intervals containing the population mean: \", round(percentage_containing_mean, 2), \"%<\/li>\",\n        \"<\/ul>\"\n      ))\n    })\n    \n    observeEvent(input$reset_history_demo_2, {\n      intervals_generated_so_far_2(0)\n      intervals_not_containing_mean_2(0)\n    })\n    observeEvent(input$dist_mean, {\n      intervals_generated_so_far_2(0)\n      intervals_not_containing_mean_2(0)\n    })\n    observeEvent(input$dist_sd, {\n      intervals_generated_so_far_2(0)\n      intervals_not_containing_mean_2(0)\n    })\n    observeEvent(input$confidence_level, {\n      intervals_generated_so_far_2(0)\n      intervals_not_containing_mean_2(0)\n    })\n    observeEvent(input$sample_size, {\n      intervals_generated_so_far_2(0)\n      intervals_not_containing_mean_2(0)\n    })\n    \n  })\n  \n}","type":"text"},{"name":"R/fundamentals_confidence_interval_ui.R","content":"confidenceIntervalUI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    \n    HTML(\"<h1>Confidence Intervals<\/h1>\"),\n    \n    HTML(\"<p><b><i>Some of the hypothesis test pages will end by constructing a confidence interval. This page is aimed at developing an intuition for\n                     what confidence intervals represent.<\/i><\/b><\/p>\"),\n    HTML(\"<br>\"),\n    \n    fluidRow(\n      column(12,\n             tight_card(\n               \"What Are Confidence Intervals?\",\n               HTML(\"<p>\n                      So first, what is a confidence interval? A confidence interval is a range of values calculated from sample data that is used to estimate an \n                      unknown population parameter. When we create a confidence interval, we specify a confidence level as a percentage.\n                      <br><br>\n                      \n                      When thinking about this though the lens of the box model, the box represents our population. So, when applying the central limit theorem to the\n                      box model, we can say that if we take a sufficiently large number of draws from a box, then the sample sums (or means) will follow a normal \n                      distribution.\n                      <br><br>\n                      \n                      This might seem a bit vague, so it is best explained through an example. Let’s consider that we have sample data, and we want to estimate the \n                      population mean. This is a realistic scenario. In real life, the population mean is usually unknown, and we want to use the sample to gauge what\n                      the population mean is likely to be. If we were to calculate a 95% confidence interval using our sample, we would end up with a range of values.\n                      This interval is our estimate for where the true population mean might lie, based on the data we've collected.\n                      <br><br>\n                      \n                      But what does the 95% mean in this context? It does not mean there is a 95% chance that the true mean falls within this particular interval.\n                      Once the interval is calculated, the true mean either is or is not in the interval - it's not a matter of probability.\n                      <br><br>\n                      \n                      Instead, the 95% refers to the method used to construct the interval. If we were to repeat this entire process of taking many random samples \n                      from the population and calculating a 95% confidence interval from each one, then about 95% of those intervals would contain the true\n                      population mean. So, we are 95% confident in the method, not in any one specific interval.\n                      <br><br>\n                      \n                      This is why it’s called a confidence interval: we have confidence in the procedure used to generate it. We use this idea to quantify \n                      uncertainty and to make more informed judgments based on limited sample data.\n                      <\/p>\"),\n               header_colour = \"#3179ae\"\n             )\n      ),\n    ),\n    \n    HTML(\"<br><br><br>\"),\n    \n    fluidRow(\n      column(5,\n             tight_card(\n               \"Simulating Confidence Intervals\",\n               HTML(\"<p>\n                     To illustrate confidence intervals, there is a simulation to the right. Do not worry about the method that has been used to generate the\n                     confidence intervals, but know that they are 95% confidence intervals.\n                     <br><br>\n                     \n                     Press <b>‘simulate’<\/b> to generate 100 confidence intervals.\n                     <br><br>\n                     \n                     Here is a breakdown of what we see in the graph:\n                     <ul>\n                         <li>The dashed vertical line through 100 is the true population mean. This is usually unknown, but we are providing it to illustrate\n                         confidence intervals.<\/li>\n                         <li>Each green or red line is a different 95% confidence interval. Each confidence interval was produced from a different sample\n                         (the sample is part of the population).<\/li>\n                         <li>If the confidence interval contains the true population mean of 100, the line is green, and red otherwise.<\/li>\n                     <\/ul>\n\n                     What we should see is that around 95% of the confidence intervals are green, meaning they contain the true population mean. \n                     There will be some variability however, especially as we are only looking at 100 intervals here. Press simulate a few times to see how \n                     the intervals change as new data is encountered.\n                     <br><br>\n                     \n                     There is also a running total to the right which shows you how many confidence intervals that you have generated so far did NOT contain \n                     the true population mean.\n                     <\/p>\"),\n               header_colour = \"#3179ae\"\n             )\n      ),\n      column(7,\n             primary_card(\n               \"Demonstration\",\n               HTML(\"<center>\"),\n               actionButton(\n                 inputId = ns(\"simulate_demo_1\"), label = HTML('<p>Simulate<\/p>'),\n                 class = \"btn btn-primary\", style=\"color: #fff;\", width = \"40%\"\n               ),\n               HTML(\"<\/center>\"),\n               plotOutput(ns(\"confidence_interval_plot_demo_1\")),\n               HTML(\"<br>\"),\n               fluidRow(\n                 column(9,\n                        uiOutput(ns(\"demo_1_confidence_interval_history\"))\n                 ),\n                 column(3,\n                        HTML(\"<center><br>\"),\n                        actionButton(\n                          inputId = ns(\"reset_history_demo_1\"), label = HTML('<p>Reset History<\/p>'),\n                          class = \"btn btn-danger\", style=\"color: #fff;\", width = \"100%\"\n                        ),\n                        HTML(\"<\/center>\")\n                 )\n               ),\n               header_colour = \"#3179ae\"\n             )\n      ),\n      \n    ),\n    \n    HTML(\"<br><br><br>\"),\n    \n    fluidRow(\n      column(5,\n             tight_card(\n               \"How Does The Size of a Confidence Interval Vary?\",\n               HTML(\"<p>\n                     You might be wondering, what are the different features that can change the size of a confidence interval? There are lots! Toggle\n                     the sections below to learn more.\n                     <\/p>\"),\n               accordion(\n                 open = FALSE,\n                 \n                 accordion_panel(\n                   HTML(\"<b>Changing the Confidence Level<\/b>\"),\n                   HTML(\"<p>\n                         In the example above, the confidence interval was 95%. We said that this means if we were to repeat the process of taking many\n                         random samples from the population and calculating a 95% confidence interval, then about 95% of those intervals would contain\n                         the true population mean.\n                         <br><br>\n  \n                         Hence, if we were to change the confidence interval to something smaller, like 80%, then about 80% of those intervals would \n                         contain the true population mean. As fewer of the intervals contain the true population mean, the intervals are smaller than\n                         those when the confidence level is 95%.\n                         <br><br>\n                         \n                         If the confidence level were 99%, then about 99% of the intervals would contain the true population mean. To ensure that the \n                         intervals cover the true population mean, the intervals are larger. Hence, the 99% confidence intervals will be larger than \n                         the 95% ones.\n                         <br><br>\n                         \n                         <b><span style='color: red;'>Key point:<\/span><\/b> In general, increasing the confidence level will increase the confidence \n                         interval size.\n                         <\/p>\"),\n                 ),\n                 accordion_panel(\n                   HTML(\"<b>Changing the Sample Size<\/b>\"),\n                   HTML(\"<p>\n                         The whole point of a confidence interval constructed from a sample mean is that we want to have an indication of where the \n                         population mean is. This is often desired in statistics because it is costly to collect data from everyone in a population.\n                         <br><br>\n\n                         As we collect more data from a population, we get closer and closer to capturing the entire population. For example, consider \n                         our population contained 1000 people, and we wanted to know whether they preferred Coke or Pepsi. If we interviewed 100 people,\n                         we are still quite far from the entire population (we have only accounted for 10% of the data). However, if we interviewed 900\n                         people, we are now quite close to the entire population (we have accounted for 90% of the data).\n                         <br><br>\n                         \n                         In the case where we interviewed 90% of the population, there is less uncertainty about what the population mean is, and hence\n                         we would expect the confidence interval to be smaller than in the case where we only interviewed 10% of the population.\n                         <br><br>\n                         \n                         <b><span style='color: red;'>Key point:<\/span><\/b> In general, increasing the sample size will decrease the confidence interval\n                         size.\n                         <\/p>\"),\n                 ),\n                 accordion_panel(\n                   HTML(\"<b>Changing the Hypothesis Test Type<\/b>\"),\n                   HTML(\"<p>\n                         We will not focus on this too much here, but different hypothesis test types will have different-sized confidence intervals.\n                         For example, a confidence interval for a t-test will typically be larger than that of a z-test (because t-curves have fatter\n                         tails).\n                         <\/p>\"),\n                 )\n               ),\n               HTML(\"<br>\"),\n               HTML(\"<p>\n                     Your task - For a given normal distribution (we are taking samples from the specified distribution):\n                     <ul>\n                      <li>How does the size of the confidence intervals change when <b>adjusting the confidence level<\/b>?<\/li>\n                      <li>How does the size of the confidence intervals change when <b>adjusting the sample size<\/b>?<\/li>\n                     <\/ul>\n                     <br>\n                     <i>Note: Here, each confidence interval is taken from sampling from the specified normal distribution. This is for learning purposes only.\n                     In reality, you would not know the true population mean or sample standard deviation (otherwise, what would be the point of constructing an\n                     interval in the first place).<\/i>U\n                     <\/p>\"),\n               header_colour = \"#3179ae\"\n             )\n      ),\n      column(7,\n             primary_card(\n               \"Demonstration\",\n               fluidRow(\n                 column(6,\n                        HTML(\"<br>\"),\n                        sliderInput(\n                          ns(\"confidence_level\"),\n                          \"Confidence Level\",\n                          min = 1,\n                          max = 99,\n                          value = 95,\n                          width = \"100%\"\n                        ),\n                        sliderInput(\n                          ns(\"sample_size\"),\n                          \"Sample Size\",\n                          min = 5,\n                          max = 100,\n                          value = 25,\n                          width = \"100%\"\n                        ),\n                        HTML(\"<center>\"),\n                        actionButton(\n                          inputId = ns(\"simulate_demo_2\"), label = HTML('<p>Simulate<\/p>'),\n                          class = \"btn btn-primary\", style=\"color: #fff;\", width = \"40%\"\n                        ),\n                        HTML(\"<\/center>\"),\n                 ),\n                 column(1),\n                 column(5,\n                        HTML(\"<p><center><b>Specify Population Distribution (Normal Distribution):<\/b><\/center><\/p>\"),\n                        sliderInput(\n                          ns(\"dist_mean\"),\n                          \"Mean\",\n                          min = -10,\n                          max = 10,\n                          value = 0,\n                        ),\n                        sliderInput(\n                          ns(\"dist_sd\"),\n                          \"Standard Deviation\",\n                          min = 1,\n                          max = 10,\n                          value = 1\n                        ),\n                 )\n               ),\n               plotOutput(ns(\"confidence_interval_plot_demo_2\")),\n               fluidRow(\n                 column(9,\n                        uiOutput(ns(\"demo_2_confidence_interval_history\"))\n                 ),\n                 column(3,\n                        HTML(\"<center><br>\"),\n                        actionButton(\n                          inputId = ns(\"reset_history_demo_2\"), label = HTML('<p>Reset History<\/p>'),\n                          class = \"btn btn-danger\", style=\"color: #fff;\", width = \"100%\"\n                        ),\n                        HTML(\"<\/center>\")\n                 )\n               ),\n               header_colour = \"#3179ae\"\n             )\n      ),\n      \n    ),\n    \n    HTML(\"<br><br><br>\")\n    \n  )\n}","type":"text"},{"name":"R/run_app.R","content":"#' Launch the Hypothesis Tests Visualised app\n#' @export\nrun_HTVP_app <- function() {\n  app_dir <- system.file(\"app\", package = \"HypothesisTestsVisualised\")\n  \n  if (app_dir == \"\") {\n    stop(\"Could not find app directory. Try re-installing the package.\", call. = FALSE)\n  }\n  \n  shiny::runApp(app_dir, display.mode = \"normal\")\n}\n","type":"text"},{"name":"R/ttest_1_sample_generic_alternate_hypothesis_srv.R","content":"# Requirements:\n#     - null_mean_string: the string representation of the null value.\n#     - whether mu should have a subscript (NULL is that it should not have one)\nalternate_hypotheses_1_sample_t_test_Server <- function(id, null_mean_string, mu_subscript = NULL) {\n  moduleServer(\n    id,\n    function(input, output, session) {\n      ns <- session$ns\n      \n      # Null hypothesis (rendered) output.\n      output$null_hypothesis_output <- renderUI({\n        \n        hypothesis = paste(\"<p style='font-size: 16px;'>\\\\( H_0: \\\\) \\\\( \\\\mu\", \"=\", null_mean_string(), \"\\\\)<\/p>\")\n        if (!is.null(mu_subscript)) {\n          hypothesis = paste(\"<p style='font-size: 16px;'>\\\\( H_0: \\\\) \\\\( \\\\mu_\", mu_subscript , \" = \", null_mean_string(), \"\\\\)<\/p>\", sep =\"\")\n        }\n        \n        return (\n          tagList(\n            HTML(\"<center>\"),\n            withMathJax(HTML(hypothesis)),\n            HTML(\"<\/center>\")\n          )\n        )\n      })\n      \n      # Alternate hypothesis (rendered) output.\n      output$alternate_hypothesis_output <- renderUI({\n        \n        hypothesis = paste(\"<p style='font-size: 16px;'>\\\\( H_1: \\\\) \\\\(\\\\mu\")\n        if (!is.null(mu_subscript)) {\n          hypothesis = paste(hypothesis, \"_d\", sep = \"\")\n        }\n      \n        # Specify alternate hypothesis in reference to whether the user chooses to do a one-sided or two-sided test.\n        if (input$alternate_hypothesis_choice == 1) {\n          hypothesis = paste(hypothesis, \"\\\\neq\", null_mean_string(), \"\\\\)<\/p>\")\n        } else if (input$alternate_hypothesis_choice == 2) {\n          hypothesis = paste(hypothesis, \">\", null_mean_string(), \"\\\\)<\/p>\")\n        } else if (input$alternate_hypothesis_choice == 3) {\n          hypothesis = paste(hypothesis, \"<\", null_mean_string(), \"\\\\)<\/p>\")\n        }\n          \n        return (\n          tagList(\n            HTML(\"<center>\"),\n            withMathJax(HTML(hypothesis)),\n            HTML(\"<\/center>\")\n          )\n        )\n      })\n      \n      # To make the alternate hypothesis choice accessible outside of the module.\n      alternate_hypothesis_choice_reactive = reactive(input$alternate_hypothesis_choice)\n      list(alternate_hypothesis_choice = alternate_hypothesis_choice_reactive)\n    }\n  )\n}\n","type":"text"},{"name":"R/ttest_1_sample_generic_alternate_hypothesis_ui.R","content":"alternate_hypotheses_1_sample_t_test_UI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    \n    ############ SECTION: The Alternate Hypothesis ############\n    fluidRow(\n      column(7,\n             tight_card(\n               \"The Alternate Hypothesis\",\n               HTML(\"<p>Specify what type of alternate hypothesis you will be using below:<\/p>\"),\n               HTML(\"<br>\"),\n               radioButtons(\n                 inputId = ns(\"alternate_hypothesis_choice\"),\n                 label = NULL,\n                 choices = list(\n                   \"Two Sided\" = 1,\n                   \"One Sided (greater than)\" = 2,\n                   \"One Sided (less than)\" = 3\n                 )\n               ),\n               header_colour = \"#3179ae\"\n             )\n      ),\n      column(5,\n             tight_card(\n               NULL,\n               HTML(\"<p><b>Null Hypothesis<\/b><\/p>\"),\n               uiOutput(ns('null_hypothesis_output')),\n               HTML(\"<p><b>Alternate Hypothesis<\/b><\/p>\"),\n               uiOutput(ns('alternate_hypothesis_output')),\n             )\n      )\n    ),\n  \n  )\n}\n","type":"text"},{"name":"R/ttest_1_sample_generic_assumptions_srv.R","content":"assumptions_1_sample_t_test_Server <- function(id, sample_data) {\n  moduleServer(\n    id,\n    function(input, output, session) {\n      ns <- session$ns\n      \n      output$assumption_2_plots <- renderUI({\n        \n        qq_plot <- renderPlot({\n          qqnorm(sample_data())\n          qqline(sample_data(), col = \"red\")\n        })\n        \n        box_plot <- renderPlot({\n          boxplot(sample_data(), main = \"Boxplot of Sample Data\")\n        })\n        \n        hist_plot <- renderPlot({\n          hist(sample_data(),\n               main = \"Histogram of Sample Data\",\n               xlab = \"\",\n               breaks = 30)\n        })\n        \n        return(\n          fluidRow(\n            column(4, qq_plot),\n            column(4, box_plot),\n            column(4, hist_plot)\n          )\n        )\n      })\n    }\n  )\n}\n","type":"text"},{"name":"R/ttest_1_sample_generic_assumptions_ui.R","content":"assumptions_1_sample_t_test_UI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    \n    ############ SECTION: Assumptions ############\n    fluidRow(\n      column(12,\n             tight_card(\n               \"Assumptions\",\n               HTML(\"<p>For the hypothesis test to be valid, we need to check the following assumptions:<\/p>\"),\n               \n               accordion(\n                 open = FALSE,\n                 \n                 # Assumption 1: Independent Samples\n                 accordion_panel(\n                   HTML(\"<b>Assumption 1: Independent and Randomly Chosen Sample<\/b>\"),\n                   HTML(\"<p>The first assumption is that our sample is <b>independent and randomly chosen<\/b>.<\/p>\"),\n                   HTML(\"<p><span style='color: blue;'><b>How do we check?<\/b><\/span> <i>We check by investigating the experimental setup.<\/i><br><br>\n                    For example, consider we were investigating data for a sample involving human participants. We could read the accompanying scientific\n                    publication to understand the methodology they used to gather the people in the sample.<\/p>\")\n                 ),\n                 \n                 # Assumption 2: Normality\n                 accordion_panel(\n                   HTML(\"<b>Assumption 2: Normality<\/b>\"),\n                   HTML(\"<p>The second assumption is that the sample means follow a normal distribution.\"),\n                   HTML(\"<p><span style='color: blue;'><b>How do we check?<\/b><\/span>\n                           <br><br>\n                     \n                           <b>Idea 1: Large n<\/b><br>\n                           Recall that the central limit theorem tells us that if we take a sufficiently large number of draws from the box, then the sample\n                           means will approximately follow a normal distribution. If confused, please do the exerice at Fundamentals > Box Model Part 2.\n                            <ul>\n                              <li>Recall that the central limit theorem tells us that if we take a sufficiently large number of draws from the box, then the sample\n                              means will approximately follow a normal distribution. If confused, please do the exerice at Fundamentals > Box Model Part 2.<\/li>\n                              <li>One way to gauge whether the central limit theorem holds or not is to see how large our sample is (this is indicated by the \\\"n\\\" in\n                              the box model above).<\/li>\n                              <li>Many textbooks will say that you can say that you can use the rule of thumb that the central limit theorem will apply if we have 30\n                              or more draws. BEWARE - this is not always true! If the distribution of the values is very skewed, you will need much more than 30 draws!<\/li>\n                            <\/ul>\n                            \n                            <br>\n                            <b>Idea 2: QQ-plot, Boxplot and Histogram<\/b><br>\n                            We learnt that if our data has some specific properties, then required a smaller value for n for the CLT to apply. In particular...\n                            <ul>\n                              <li>(QQ-plot) If the sample closely follows the QQ line, it suggests the data is normally distribued. Data that is normally distributed\n                              requires far less point for the CLT to apply.<\/li>\n                              <li>(Boxplot and Histogram) If the data is symmetric, less points are required for the CLT. These plots can also be used to indicate whether the \n                              data appears to be normally distributed.<\/li>\n                            <\/ul>\n                       <\/p>\"),\n                   uiOutput(ns(\"assumption_2_plots\"))\n                 ),\n               ),\n               header_colour = \"#3179ae\"\n             )\n      )\n    ),\n  )\n}\n","type":"text"},{"name":"R/ttest_1_sample_generic_conclusion_srv.R","content":"# Requirements:\n#     - p_val (int): P-value.\nconclusion_1_sample_t_test_Server <- function(id, p_val) {\n  moduleServer(\n    id,\n    function(input, output, session) {\n      ns <- session$ns\n      \n      alpha = reactiveVal(0.05)\n      alpha_warning = reactiveVal(FALSE)\n      observeEvent(input$alpha_value, {\n        if (is.na(input$alpha_value) || input$alpha_value < 0 || input$alpha_value > 1) {\n          alpha(0.05)\n          alpha_warning(TRUE)\n        } else {\n          alpha(input$alpha_value)\n          alpha_warning(FALSE)\n        }\n      })\n      \n      # Error message for when the value for alpha is invalid.\n      output$significance_level_warning <- renderUI({\n        if (alpha_warning()) {\n          return(\n            HTML(\"<span style='color: red;'><p>Error: The value for α must be between 0 and 1.<\/p><\/span>\")\n          )\n        }\n      })\n      \n      # Hypothesis test output\n      output$final_conclusion_output <- renderUI({\n        \n        # Change > or < sign depending on whether the p-value is less than or greater than alpha.\n        math_line = withMathJax(\n          HTML(paste(\"$$\\\\begin{align*} \\\\alpha &> p \\\\\\\\\", as.character(alpha()), \" &> \", as.character(round(p_val(), 4)), \"\\\\end{align*}$$\", sep = \"\"))\n        )\n        conclusion_line = HTML(\"<span style='color: blue;'><p>As the p value is less than our significance level, we <b>reject the null hypothesis<\/b>.<\/p><\/span>\")\n        if (p_val() > alpha()) {\n          math_line = withMathJax(\n            HTML(paste(\"$$\\\\begin{align*} \\\\alpha &< p \\\\\\\\\", as.character(alpha()), \" &< \", as.character(round(p_val(), 4)), \"\\\\end{align*}$$\", sep = \"\"))\n          )\n          conclusion_line = HTML(\"<span style='color: blue;'><p>As the p value is greater than our significance level, we <b>accept the null hypothesis<\/b>.<\/p><\/span>\")\n        }\n        \n        return(\n          tagList(\n            math_line,\n            conclusion_line\n          )\n        )\n      })\n    }\n  )\n}\n","type":"text"},{"name":"R/ttest_1_sample_generic_conclusion_ui.R","content":"conclusion_1_sample_t_test_UI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    \n    ############ SECTION: Conclusion ############\n    fluidRow(\n      column(12,\n             tight_card(\n               \"Conclusion (p-value)\",\n               HTML(\"<p>One way to tell whether we accept or reject the null hypothesis is to observe whether our p-value is below or above the significance level.<\/p>\"),\n               \n               fluidRow(\n                 # Section to enter significance level.\n                 column(6,\n                        HTML(\"<p><b>Step 1) What is your significance level<\/b>?<\/p>\"),\n\n                        # Space to enter significance value.\n                        fluidRow(\n                          column(1,\n                                 withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>\\\\( \\\\alpha = \\\\)<\/p>\"))\n                          ),\n                          column(3,\n                                 numericInput(\n                                   ns(\"alpha_value\"),\n                                   NULL,\n                                   value = 0.05,\n                                   min = 0,\n                                   max = 1,\n                                   width = \"100%\"\n                                 ),\n                          ),\n                        ),\n                        uiOutput(ns(\"significance_level_warning\")),\n                 ),\n\n                 # Section to provide final result.\n                 column(6,\n                        HTML(\"<p><b>Step 2) Final Conclusion<\/b><\/p>\"),\n                        uiOutput(ns(\"final_conclusion_output\"))\n                 )\n               ),\n               header_colour = \"#3179ae\"\n             )\n      ),\n    )\n  \n  )\n}\n","type":"text"},{"name":"R/ttest_1_sample_generic_confidence_interval_srv.R","content":"confidence_interval_1_sample_t_test_Server <- function(id, sample_data, null_mu, alternate_hypothesis_choice) {\n  moduleServer(\n    id,\n    function(input, output, session) {\n      ns <- session$ns\n\n      # Process confidence level text input.\n      confidence_level = reactiveVal(0.95)\n      alpha_warning_confidence_lvel = reactiveVal(FALSE)\n      observeEvent(input$confidence_level, {\n        if (is.na(input$confidence_level) || input$confidence_level <= 0 || input$confidence_level >= 1) {\n          confidence_level(0.95)\n          alpha_warning_confidence_lvel(TRUE)\n        } else {\n          confidence_level(input$confidence_level)\n          alpha_warning_confidence_lvel(FALSE)\n        }\n      })\n\n      # Error message for when the value for alpha is invalid.\n      output$confidence_level_warning <- renderUI({\n        if (alpha_warning_confidence_lvel()) {\n          return(\n            HTML(\"<span style='color: red;'><p>Error: The value for confidence level must be between 0 and 1.<\/p><\/span>\")\n          )\n        }\n      })\n\n      # Confidence interval output\n      output$confidence_level_output = renderUI({\n        \n        sample_size = length(sample_data())\n        xbar = mean(sample_data())\n        se = sd(sample_data())/sqrt(sample_size)\n        conf_level = as.numeric(confidence_level())\n        alpha = 1 - conf_level\n        mu0 = null_mu()\n        df = sample_size - 1\n        \n        formula_line = substitution_line = answer_line = NULL\n        conclusion_line = NULL\n        \n        # Compute CI and generate lines based on hypothesis type\n        if (alternate_hypothesis_choice() == 1) {\n          # Two sided\n          t_val = qt(1 - alpha/2, df = df)\n          lower = xbar - t_val * se\n          upper = xbar + t_val * se\n          \n          formula_line = \"$$CI = \\\\bar{x} \\\\pm t_{\\\\alpha/2, df} \\\\cdot SE$$\"\n          substitution_line = paste0(\"$$CI = \", round(xbar,4), \n                                     \" \\\\pm t_{\", round(alpha/2,4), \",\", df, \"} \\\\times \", \n                                     round(se,4), \"$$\")\n          answer_line = paste0(\"$$CI = (\", round(lower,4), \", \", round(upper,4), \")$$\")\n          \n          if (mu0 < lower || mu0 > upper) {\n            conclusion_text = \"As the null hypothesis value is outside the confidence interval, we <b>reject the null hypothesis<\/b>.\"\n          } else {\n            conclusion_text = \"As the null hypothesis value is inside the confidence interval, we <b>fail to reject the null hypothesis<\/b>.\"\n          }\n          \n        } else if (alternate_hypothesis_choice() == 2) {\n          # One sided (greater than)\n          t_val = qt(1 - alpha, df = df)\n          lower = xbar - t_val * se\n          \n          formula_line = \"$$CI = (\\\\bar{x} - t_{\\\\alpha, df} \\\\cdot SE, \\\\infty)$$\"\n          substitution_line = paste0(\"$$CI = (\", round(xbar,4), \n                                     \" - t_{\", round(alpha,4), \",\", df, \"} \\\\times \", \n                                     round(se,4), \", \\\\infty)$$\")\n          answer_line = paste0(\"$$CI = (\", round(lower,4), \", \\\\infty)$$\")\n          \n          if (mu0 < lower) {\n            conclusion_text = \"As the null hypothesis value is below the confidence interval, we <b>reject the null hypothesis<\/b>.\"\n          } else {\n            conclusion_text = \"As the null hypothesis value is inside the confidence interval, we <b>fail to reject the null hypothesis<\/b>.\"\n          }\n          \n        } else if (alternate_hypothesis_choice() == 3) {\n          # One sided (less than)\n          t_val = qt(1 - alpha, df = df)\n          upper = xbar + t_val * se\n          \n          formula_line = \"$$CI = (-\\\\infty, \\\\bar{x} + t_{\\\\alpha, df} \\\\cdot SE)$$\"\n          substitution_line = paste0(\"$$CI = (-\\\\infty, \", round(xbar,4), \n                                     \" + t_{\", round(alpha,4), \",\", df, \"} \\\\times \", \n                                     round(se,4), \")$$\")\n          answer_line = paste0(\"$$CI = (-\\\\infty, \", round(upper,4), \")$$\")\n          \n          if (mu0 > upper) {\n            conclusion_text = \"As the null hypothesis value is above the confidence interval, we <b>reject the null hypothesis<\/b>.\"\n          } else {\n            conclusion_text = \"As the null hypothesis value is inside the confidence interval, we <b>fail to reject the null hypothesis<\/b>.\"\n          }\n        }\n        \n        # Build UI\n        tagList(\n          withMathJax(HTML(formula_line)),\n          withMathJax(HTML(substitution_line)),\n          withMathJax(HTML(answer_line)),\n          HTML(paste0(\"<span style='color: blue;'><p>\", conclusion_text, \"<\/p><\/span>\"))\n        )\n      })\n\n    }\n  )\n}\n","type":"text"},{"name":"R/ttest_1_sample_generic_confidence_interval_ui.R","content":"confidence_interval_1_sample_t_test_UI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    \n    ############ SECTION: Confidence Interval ############\n    fluidRow(\n      column(12,\n             tight_card(\n               \"Conclusion (Confidence Interval)\",\n               HTML(\"<p>\n                      A confidence interval in a 1-sample z-test shows the range of population means that are plausible at the chosen confidence level, and if the\n                      hypothesized mean falls outside this range, the null hypothesis is rejected.\n                      <br><br>\n\n                      We can also use a confidence interval to tell us whether we should accept or reject the null hypothesis. If the expected value DOES NOT lie within the\n                      confidence interval, then we reject the null hypothesis.\n                      <\/p>\"),\n               fluidRow(\n                 column(6,\n                        HTML(\"<p><b>Step 1) What is your confidence level<\/b>?<\/p>\"),\n\n                        fluidRow(\n                          column(1,\n                                 withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>\\\\( \\\\alpha = \\\\)<\/p>\"))\n                          ),\n                          column(3,\n                                 numericInput(\n                                   ns(\"confidence_level\"),\n                                   NULL,\n                                   value = 0.95,\n                                   min = 0,\n                                   max = 1,\n                                   width = \"100%\"\n                                 ),\n                          ),\n                        ),\n                        uiOutput(ns(\"confidence_level_warning\")),\n                 ),\n                 column(6,\n                        HTML(\"<p><b>Step 2) Final Conclusion<\/b><\/p>\"),\n                        uiOutput(ns(\"confidence_level_output\")),\n                 )\n               ),\n               header_colour = \"#3179ae\"\n             )\n      ),\n    )\n  \n  )\n}\n","type":"text"},{"name":"R/ttest_1_sample_generic_p_value_srv.R","content":"# Requirements:\n#     - test_stat (str): test statistic stored as string.\n#     - sample_data (df): data frame for the sample data.\n#     - alternate_hypothesis_choice (int): integer representation of which alternate hypothesis we are using.\np_value_1_sample_t_test_Server <- function(id, test_stat, sample_data, alternate_hypothesis_choice) {\n  moduleServer(\n    id,\n    function(input, output, session) {\n      ns <- session$ns\n      \n      p_val = reactiveVal(0)\n      \n      # P-value text output and calculation.\n      output$p_value_prelude <- renderUI({\n        # General prelude text about what the p-value is.\n        first_string = HTML(paste(\"<p>The p-value is the probability of observing a test-statistic <b>more extreme that our test statistic of \",\n                                  test_stat(), \n                                  \".<\/b><\/p>\", \n                                  sep = \"\"))\n        \n        second_string = withMathJax(HTML(paste(\"<p>\n                            Unlike in a z-test where the test statistics fall on a standard normal curve, in a t-test, the test statistics fall on a t-curve/distribution. \n                            If you recall from the \\\"T-Curve Motivation\\\" exercise, to specify a t-distribution, you need to specify the degree of freedom, which adjusts\n                            the 'fatness' of the t-curve's tails.<\/p>\n                            \n                            <p><b>For a 1-sample t-test, we set the degrees of freedom equal to the sample size - 1 (that is, \\\\(n - 1\\\\)).<\/b><\/p>\n                            \n                            <\/p>In this case, the degree of freedom is equal to \\\\(\", length(sample_data()), \" - 1 = \",length(sample_data()) - 1 ,\"\\\\).<\/p>\")))\n        \n        # Specifically how to find the p-value (based upon alternate hypothesis).\n        third_string = \"<p>The test statistics fall on a standard normal curve. \"\n        if (alternate_hypothesis_choice() == 1) {\n          negative_test_stat = as.character(-abs(as.numeric(test_stat())))\n          positive_test_stat = as.character(abs(as.numeric(test_stat())))\n          third_string = paste(third_string, \"As we are doing a two-sided alternate hypothesis, we are interested in finding the <b>area below \", negative_test_stat,\n                               \" and above \", positive_test_stat, \".<\/p><\/b>\", sep = \"\")\n        } else if (alternate_hypothesis_choice() == 2){\n          third_string = paste(third_string, \"As we are doing a one-sided greater than alternate hypothesis, we are interested in finding the <b>area above \", test_stat(),\n                               \".<\/p><\/b>\", sep = \"\")\n        } else if (alternate_hypothesis_choice() == 3){\n          third_string = paste(third_string, \"As we are doing a one-sided less than alternate hypothesis, we are interested in finding the <b>area below \", test_stat(),\n                               \".<\/p><\/b>\", sep = \"\")\n        }\n        third_string = HTML(third_string)\n        \n        # Calculate p-value.\n        n = length(sample_data())\n        df = n - 1\n        p_val_local = 0\n        if (alternate_hypothesis_choice() == 1) {\n          p_val_local = 2 * (1 - pt(abs(as.numeric(test_stat())), df))\n        } else if (alternate_hypothesis_choice() == 2) {\n          p_val_local = 1 - pt(as.numeric(test_stat()), df)\n        } else if (alternate_hypothesis_choice() == 3) {\n          p_val_local = pt(as.numeric(test_stat()), df)\n        }\n        p_val(p_val_local)\n        \n        # String to output the p-value.\n        p_value = withMathJax(HTML(\"<p style='font-size: 16px; text-align: center;'>\\\\( p =\", as.character(round(p_val_local,5)) ,\"\\\\)<\/p>\"))\n        \n        return(\n          tagList(\n            first_string,\n            second_string,\n            third_string,\n            p_value\n          )\n        )\n        \n      })\n      \n      # Histogram with t curve to show p-value calculation.\n      output$test_stat_t_plot = renderPlot({\n        return(curve_shaded_test_stat(dt, list(df = length(sample_data()) - 1), as.numeric(test_stat()), alternate_hypothesis_choice()))\n      })\n      \n      # To make the alternate hypothesis choice accessible outside of the module.\n      list(p_val = p_val)\n    }\n  )\n}\n","type":"text"},{"name":"R/ttest_1_sample_generic_p_value_ui.R","content":"p_value_1_sample_t_test_UI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    \n    ############ SECTION: Test p-value ############\n    fluidRow(\n      column(6,\n             tight_card(\n               \"p-value\",\n               uiOutput(ns(\"p_value_prelude\")),\n               header_colour = \"#3179ae\"\n             )\n      ),\n      column(6,\n             tight_card(\n               NULL,\n               HTML(\"<center>\"),\n               plotOutput(ns(\"test_stat_t_plot\"), width = \"100%\", heigh = \"325px\"),\n               HTML(\"<\/center>\"),\n             )\n      )\n    )\n  \n  )\n}\n","type":"text"},{"name":"R/ttest_1_sample_generic_test_statistic_srv.R","content":"# Requirements:\n#     - sample_data: the data frame containing the datat that is being analysed.\n#     - null_mean_string: the string representation of the null value.\n#     - whether mu should have a subscript (NULL is that it should not have one)\ntest_statistic_1_sample_t_test_Server <- function(id, sample_data, null_mean_string, mu_subscript = NULL) {\n  moduleServer(\n    id,\n    function(input, output, session) {\n      ns <- session$ns\n      \n      EV_string = reactiveVal(\"\")\n      SE_string = reactiveVal(\"\")\n\n      # Expected value and standard error output.\n      output$ev_and_se_text <- renderUI({\n\n        sample_size = length(sample_data())\n\n        # Find EV and SE.\n        mean_ = as.numeric(null_mean_string())\n        sd_ = sd(sample_data())\n        EV = mean_\n        SE = sd_ / sqrt(sample_size)\n\n        EV_string(as.character(round(EV, 5)))\n        SE_string(as.character(round(SE, 5)))\n        \n        EV_calculation_string = \"$$\\\\begin{align*} \\\\text{EV} &= \\\\mu\"\n        if (!is.null(mu_subscript)) {\n          EV_calculation_string = paste(EV_calculation_string, \"_\", mu_subscript, paste = \"\")\n        }\n        EV_calculation_string = paste(EV_calculation_string, \"\\\\\\\\ &=\", EV_string(), \"\\\\end{align*}$$\", sep = \"\")\n\n        expected_value = withMathJax(\n          HTML(\"<p>Expected Value:<\/p>\"),\n          HTML(EV_calculation_string)\n        )\n\n        standard_error = withMathJax(\n          HTML(\"<p>Standard Error:<\/p>\"),\n          HTML(paste(\"$$\\\\begin{align*} \\\\text{SE} &= \\\\frac{s}{\\\\sqrt{n}} \\\\\\\\ &= \\\\frac{\", round(sd_, 5) , \"}{\\\\sqrt{\",\n                     as.character(sample_size), \"}}\\\\\\\\ &= \", SE_string(), \"\\\\end{align*}$$\", sep = \"\")),\n          HTML(\"(Note that we use the sample standard deviation [\\\\(s \\\\)] rather than the population standard deviation [\\\\(\\\\sigma \\\\)])\")\n        )\n\n        return(\n          tagList(\n            expected_value, standard_error\n          )\n        )\n      })\n\n      test_stat = reactiveVal(\"\")\n\n      # Test statistic output.\n      output$test_statistic_calculation <- renderUI({\n\n        observed_val = mean(sample_data(), na.rm = TRUE)\n\n        # Calculate test statistic.\n        temp = (observed_val - as.numeric(EV_string()))/as.numeric(SE_string())\n        temp = as.character(round(temp, 4))\n        test_stat(temp)\n\n        t_stat = withMathJax(\n          HTML(paste(\"$$\\\\begin{align*} \\\\text{TS} &= \\\\frac{\\\\text{OV} - \\\\text{EV}}{\\\\text{SE}} \\\\\\\\ &= \\\\frac{\", as.character(round(observed_val,5)), \" - \",\n                     EV_string(), \"}{\", SE_string(), \"} \\\\\\\\ &= \", test_stat(), \"\\\\end{align*}$$\", sep = \"\"))\n        )\n        additional_line = HTML(paste(\"<p style = 'text-align: left;'><span style='color: blue;'><i>The value for the test-statistic is \", test_stat(), \". <\/i><\/span><\/p>\", sep = \"\"))\n        return(\n          tagList(\n            t_stat,\n            additional_line\n          )\n        )\n      })\n      \n      # To make the alternate hypothesis choice accessible outside of the module.\n      #alternate_hypothesis_choice_reactive = reactive(input$alternate_hypothesis_choice)\n      list(test_stat = test_stat)\n    }\n  )\n}\n","type":"text"},{"name":"R/ttest_1_sample_generic_test_statistic_ui.R","content":"test_statistic_1_sample_t_test_UI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    \n    ############ SECTION: Test Statistic ############\n    fluidRow(\n      column(12,\n             tight_card(\n               \"Test Statistic\",\n               fluidRow(\n                 column(6,\n                        HTML(\"<p><b>Step 1) Calculate Expected Value (SE) and Standard Error (SE)<\/b><\/p>\"),\n                        uiOutput(ns(\"ev_and_se_text\"))\n                 ),\n                 column(6,\n                        HTML(\"<p><b>Step 2) Test Statistic Calculation<\/b><\/p>\"),\n                        uiOutput(ns(\"test_statistic_calculation\"))\n                 )\n               ),\n               header_colour = \"#3179ae\"\n             )\n      )\n    )\n  )\n}\n","type":"text"},{"name":"R/ttest_1_sample_srv.R","content":"oneSampleTTestServer <- function(id) {\n  \n  moduleServer(id, function(input, output, session) {\n    \n    ns <- session$ns\n    \n    ############################ Modal Intro ############################# \n    \n    observeEvent(input$learning_text, {\n      showModal(modalDialog(\n        title = \"The '1-sample s-test'\",\n        \n        withMathJax(HTML(\"<p>\n              <u><i>If you have not read the ‘t-curve motivation’ exercise, it is highly recommended to read it before continuing.<\/i><\/u><br><br>\n\n              Recall that we were guided by the following scenario in the ‘1-sample z-test’ exercise.<br><br>\n          <\/p>\")),\n        fluidRow(\n          column(1),\n          column(10,\n                 withMathJax(HTML(\"<p>\n                  <i>\\\"Suppose that in a made-up country, there is a statistics exam that all high school students take. If a student received a mark in the exam of 140 or over, \n                  it means that they are demonstrating a satisfactory level of statistical knowledge as deemed by the education board. <span style='color: red;'>Based on data from\n                  multiple years, it’s known that the population standard deviation in test scores is 7.5.<\/span><br><br>\n                  \n                  Mr. Han is a statistics teacher who has been testing some new innovative teaching methods. In particular, he wants to test whether the average exam grade for the\n                  25 students in his class is statistically greater than a mark of 140.\\\"<\/i><br><br>\n              <\/p>\"))\n          ),\n          column(1)\n        ),\n        withMathJax(HTML(\"<p>\n              What if we were to remove the information in red, meaning that we no longer know the population standard deviation? The ‘1-sample z-test’ previously discussed\n              no longer works, as the box model we have been studying requires that the population standard deviation is known (one of our key assumptions has been violated).<br><br> \n              \n              As mentioned in the ‘t-curve motivation’ exercise, we can address this issue by approximating the population standard deviation using the sample standard deviation.\n              We can easily get the sample standard deviation by using the sample data!<br><br>\n              \n              With this in mind, the remainder of this hypothesis test should be familiar! Firstly, Mr. Han's hypotheses are the same as in the ‘1-sample z-test’ exercise. As a \n              reminder, Mr. Han uses the symbol \\\\(\\\\mu \\\\) to represent the average mark of his class. He sets up the null hypothesis that his class’s average grade is 140. \n              Mathematically, this is written as:<br>\n\n              <center><p style='font-size: 16px'>\\\\( H_{0} : \\\\mu = 140 \\\\)<\/p><\/center><br>\n\n              When setting up the alternate hypothesis, because Mr. Han is interested in seeing if his innovative teaching approach leads to marks greater than 140, we set up a\n              one-sided alternate hypothesis, written mathematically as:<br>\n\n              <center><p style='font-size: 16px'>\\\\( H_{1} : \\\\mu > 140 \\\\)<\/p><\/center><br>\n\n              Once again, the main idea is that Mr. Han will use his sample of 25 students to determine whether there is evidence to support or reject the null hypothesis.\n          <\/p>\")),\n        fluidRow(\n          column(8,\n                 withMathJax(HTML(\"<p>\n                   <h5><u>How does Mr. Han go about doing this?<\/u><\/h5><br>\n                   \n                   Similar to before, we can use the box model to model the hypothesis test. This time, let’s first turn our attention to the test scores that Mr. Han’s students \n                   achieved in the class. Let’s say that the 25 students had an average score of 142.843. As there were 25 students, we specify \\\\(n = 25 \\\\). The average score of \n                   142.843 is called the observed value (OV). Also, using the scores, Mr. Han found that the sample standard deviation equals 4.751 (\\\\(s = 4.751\\\\)).<br><br>\n\n                   Using these values and \\\\(\\\\mu = 140\\\\) from the null hypothesis, we have all the information needed to create the box model, which is shown on the right.\n                   <\/p>\"))\n          ),\n          column(4,\n                 HTML(\"<br>\"),\n                 grVizOutput(ns(\"intro_example_box_model\"), width = \"80%\", height = \"70%\"),\n          )\n        ),\n        HTML(\"<p><br>\n                With the box made, Mr. Han can now calculate the test statistic. In the formula below, note that we use the notation SE estimate (the reason for this is \n                explained in the ‘t-curve motivation’ exercise).<br>\n                <\/p>\"),\n        withMathJax(\n          HTML(paste(\"$$\\\\begin{align*} \\\\text{Test-Statistic (TS)} &= \\\\frac{\\\\text{OV} - \\\\text{EV}}{\\\\hat{\\\\text{SE}}}\n                              \\\\\\\\ &= \\\\frac{\\\\text{OV} - \\\\text{EV}}{\\\\frac{s}{\\\\sqrt{n}}}\n                              \\\\\\\\ &= \\\\frac{142.843 - 140}{\\\\frac{4.751}{\\\\sqrt{25}}}\n                              \\\\\\\\ &= 2.992 \\\\text{ (3 decimal places)} \\\\end{align*}$$\", sep = \"\"))\n        ),\n        HTML(\"<p><br>\n            With the test statistic found, Mr. Han is ready to calculate the p-value. However, this represents a big difference between the ‘1-sample  \n            <span style='color: red;'>z<\/span>-test’ and the ‘1-sample  <span style='color: red;'>t<\/span>-test’. These hypothesis tests get the last part of their names from\n            the type of curve used to find the p-values. The ‘z-test’ gets its name because the p-value is found from the standard normal distribution (also called the \n             <span style='color: red;'>z<\/span>-distribution). The ‘t-test’ gets its name because the p-value is found from the  <span style='color: red;'>t<\/span>-distribution.<br><br>\n             \n             As we are doing a t-test in this exercise, we will be using the t-distribution. Please continue following the exercise to see how this is done!\n             <\/p>\"),\n        easyClose = TRUE,\n        footer = modalButton(\"Close\"),\n      ))\n    })\n    \n    # Example box model\n    output$intro_example_box_model <- renderGrViz({\n      string = \"digraph diagram {\n          graph [layout = dot, rankdir = TB]\n\n          node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12, width = 2.5]\n          box [label = '&mu; = 140; s = 4.751']\n\n          node [shape = oval,width = 1.5,fillcolor = \\\"#f9ffbd\\\", fontsize = 12]\n          sample [label = 'OV = 142.843']\n\n          edge [minlen = 2]\n            box->sample [label = '  n = 25', fontsize = 12, labeldistance = 5]\n          }\"\n      return(grViz(string))\n    })\n    \n    ############################ Uploading Data Mechanism ############################# \n    \n    sample_data_session <- load_1_sample_data_Server(id = \"loading_data\")\n    \n    # Store the sample data.\n    sample_data <- reactiveVal(NULL)\n    \n    # Variable that is true when the data has been specified, meaning the rest of the exercise can commence\n    # This variable can be accessed by the ui conditional panel.\n    output$render_rest_of_exercise <- reactive({\n      !is.null(sample_data_session$data())\n      sample_data(sample_data_session$data())\n    })\n    outputOptions(output, \"render_rest_of_exercise\", suspendWhenHidden = FALSE)\n    \n    ################################################################\n    \n    # Box model plot\n    output$box_model <- renderGrViz({\n\n      if (is.null(input$null_mu)) {\n        return()\n      }\n\n      # String with mu and sigma.\n      pop_details = paste(\"&mu; = \", as.character(round(input$null_mu, digits = 3)), \"; s = \", as.character(round(sd(sample_data()), digits = 3)))\n\n      # Set up graph and box\n      diagram = \"digraph diagram { graph [layout = dot, rankdir = TB] node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12, width = 2.5] box [label = '\"\n      diagram = paste(diagram, pop_details, \"']\", sep = \"\")\n\n      # Set up sample circle.\n      diagram = paste(diagram, \" node [shape = oval,width = 1.5,fillcolor = \\\"#f9ffbd\\\", fontsize = 12] sample [label = '\", \"OV = \",\n                      as.character(round(mean(sample_data(), na.rm = TRUE), digits = 3)), \"']\", sep = \"\")\n\n      # Create edge between box and circle.\n      # Annotate edge with n value.\n      n = length(sample_data())\n      diagram = paste(diagram, \" edge [minlen = 2] box->sample [label = '  n = \", n, \"', fontsize = 12, labeldistance = 5]}\", sep = \"\")\n\n      return (grViz(diagram))\n    })\n    \n    null_mean_string = reactive({as.character(round(input$null_mu, digits = 3))})\n    alt_hypothesis_session <- alternate_hypotheses_1_sample_t_test_Server(id = \"alternate_hypothesis\", null_mean_string)\n    \n    assumptions_1_sample_t_test_Server(id = \"assumptions\", sample_data)\n\n    test_stat_session <- test_statistic_1_sample_t_test_Server(id = \"test_stat\", sample_data, null_mean_string)\n\n    p_value_session <- p_value_1_sample_t_test_Server(id = \"p_val\", test_stat_session$test_stat, sample_data, alt_hypothesis_session$alternate_hypothesis_choice)\n\n    conclusion_1_sample_t_test_Server(id = \"conclusion\", p_value_session$p_val)\n    \n    confidence_interval_1_sample_t_test_Server(id = \"confidence_interval\", sample_data, null_mean_string, alt_hypothesis_session$alternate_hypothesis_choice)\n    \n  })\n    \n}","type":"text"},{"name":"R/ttest_1_sample_ui.R","content":"oneSampleTTestUI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    \n    # Title Strip\n    fluidRow(\n      column(8,\n             HTML(\"<h1>1-Sample t-Test<\/h1>\"),\n      ),\n      column(4,\n             tags$style(HTML(paste0(\"\n              [id='\", ns(\"learning_text\"), \"'] {\n                font-size: 20px;\n                padding: 10px 20px;\n              }\n              \"))),\n             actionButton(ns(\"learning_text\"), \"What is a 1-sample t-test?\", class = \"btn btn-primary\", style=\"color: #fff;\", width = \"100%\")\n      ),\n    ),\n    HTML(\"<br>\"),\n    \n    ############ SECTION: Input Data ############\n    load_1_sample_data_UI(ns(\"loading_data\"), test_name = \"1-sample t-test\"),\n\n    HTML(\"<br><br><br>\"),\n    \n    # Conditional panel ensures that the rest of the exercise is displayed only if the data has been uploaded.\n    conditionalPanel(\n      condition = sprintf('output[\"%s\"]', ns(\"render_rest_of_exercise\")),\n\n      ############ SECTION: The NULL Hypothesis - Setting up the Box ############\n      fluidRow(\n        column(7,\n               tight_card(\n                 \"The 'NULL' Hypothesis - Setting up the Box\",\n\n                 p(\"We start by using the box model to represent our null hypothesis.\"),\n                 \n                 accordion(\n                   \n                   # Step 1: Specify NULL Hypothesis\n                   accordion_panel(\n                     HTML(\"<b>Step 1) Specify NULL Hypothesis<\/b>\"),\n                     HTML(\"<p>\n                            The only thing we need to do to set up the box in this test is specify the sample data (which we have already done) and specify the null\n                            hypothesis. In this test we are focusing on the mean, so the null hypothesis is that the population mean is equal to some value which\n                            we set below.\n                        <\/p>\"),\n                     withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>Given \\\\(\\\\mu \\\\), where \\\\(\\\\mu \\\\) is the mean of some variable:<\/p>\")),\n                     fluidRow(\n                       column(7),\n                       column(2,\n                              withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>\\\\( H_0: \\\\) \\\\(\\\\mu = \\\\)<\/p>\"))\n                       ),\n                       column(3,\n                              numericInput(\n                                ns(\"null_mu\"),\n                                NULL,\n                                value = 140\n                              ),\n                       ),\n                     ),\n                   ),\n                   \n                   # Extra notes\n                   accordion_panel(\n                     HTML(\"<b>Extra Points<\/b>\"),\n                     withMathJax(HTML(\"<p>In case you are confused about where all the values in the diagram have come from, these come from the sample data that you previously\n                            specified. In particular:\n                           <ul>\n                              <li>\\\\(s \\\\) represents the sample standard deviation. Unlike the 1-sample z-test which requires that the population standard\n                                deviation is known, the 1-sample t-test removes this assumption, instead using the standard deviation of the sample and then later\n                                the t-distribution to determine the p-value.<\/li>\n                              <li>The value for \\\\(n \\\\) comes from the number of values in the sample chosen above.<\/li>\n                              <li>The observed value (\\\\(\\\\text{OV} \\\\)) comes from the mean of the sample chosen above.<\/li>\n                           <\/ul>\n                        <\/p>\"))\n                   )\n                 ),\n                 header_colour = \"#3179ae\"\n               )\n        ),\n        column(5,\n               tight_card(\n                 NULL,\n                 HTML(\"<center>\"),\n                 grVizOutput(ns(\"box_model\"), width = \"70%\", height = \"70%\"),\n                 HTML(\"<\/center>\")\n               ),\n        )\n      ),\n\n      HTML(\"<br><br><br>\"),\n      \n      ########### SECTION: The Alternate Hypothesis ############\n      alternate_hypotheses_1_sample_t_test_UI(ns(\"alternate_hypothesis\")),\n      HTML(\"<br><br><br>\"),\n\n      ############ SECTION: Assumptions ############\n      assumptions_1_sample_t_test_UI(ns(\"assumptions\")),\n      HTML(\"<br><br><br>\"),\n\n      ############ SECTION: Test Statistic ############\n      test_statistic_1_sample_t_test_UI(ns(\"test_stat\")),\n      HTML(\"<br><br><br>\"),\n      \n      ############ SECTION: p-value ############\n      p_value_1_sample_t_test_UI(ns(\"p_val\")),\n      HTML(\"<br><br><br>\"),\n\n      ############ SECTION: Conclusion (p-value) ############\n      conclusion_1_sample_t_test_UI(ns(\"conclusion\")),\n      HTML(\"<br><br><br>\"),\n      \n      ############ SECTION: Conclusion (Confidence Interval) ############\n      confidence_interval_1_sample_t_test_UI(ns(\"confidence_interval\")),\n      \n      HTML(\"<br><br><br><br><br>\"),\n      \n    )\n\n  )\n}","type":"text"},{"name":"R/ttest_2_sample_srv.R","content":"twoSampleTTestServer <- function(id) {\n  \n  moduleServer(id, function(input, output, session) {\n    \n    ns <- session$ns\n    \n    ############################ Uploading Data Mechanism ############################# \n    \n    sample_data_session = load_data_2_sample_Server(id = \"loading_data\")\n    \n    # Store the sample data.\n    data_sample_1 = reactiveVal(NULL)\n    data_sample_2 = reactiveVal(NULL)\n    \n    # Variable that is true when the data has been specified, meaning the rest of the exercise can commence\n    # This variable can be accessed by the ui conditional panel.\n    output$render_rest_of_exercise = reactive({\n      !is.null(sample_data_session$data_sample_1())\n      data_sample_1(sample_data_session$data_sample_1())\n      data_sample_2(sample_data_session$data_sample_2())\n    })\n    outputOptions(output, \"render_rest_of_exercise\", suspendWhenHidden = FALSE)\n    \n    ############################ Modal Intro ############################# \n    observeEvent(input$learning_text, {\n      showModal(modalDialog(\n        title = \"The 2-sample t-test\",\n        withMathJax(HTML(\"<p>\n           Let’s consider that we have two different types of medicine: Drug A and Drug B. We are interested in determining whether there is a difference in the average \n           blood pressure when people take these medicines.\n           <br><br>\n           \n           To investigate this, we collect two samples of people. We assign the first sample to try Drug A, and the second sample to try Drug B. This setup leads us to a\n           2-sample t-test, a statistical method used to assess whether there is a significant difference between the population means of two independent groups, based on \n           their sample data.\n           <br><br>\n           \n           A key difference between this experimental design and the paired t-test is that in the 2-sample case, participants are only ever assigned to one group \n           (either Drug A or Drug B). In a paired t-test, the same individuals would be assigned to both conditions, allowing us to examine the within-person differences.\n           <br><br>\n           \n           We let the average blood pressure for the people in sample one after taking Drug A be represented by \\\\(\\\\mu_1\\\\) (the 1 because it is sample 1), and the average\n           for the second sample (those who took Drug B) be represented by \\\\(\\\\mu_2\\\\).\n           <br><br>\n           \n           The null hypothesis for a 2-sample t-test is that there is no significant difference between the population means of the two samples. This can be written as:\n           \n           <center><p style='font-size: 16px'>\\\\( H_{0} : \\\\mu_1 = \\\\mu_2 \\\\)<\/p><\/center>\n           \n           or equivalently:\n           \n           <center><p style='font-size: 16px'>\\\\( H_{0} : \\\\mu_1 - \\\\mu_2 = 0 \\\\)<\/p><\/center>\n           \n           If we are interested in testing whether there is a difference between the medicines (i.e., we don't care about the direction of the difference), we are using a \n           2-sided alternative hypothesis. We would hence write the alternate hypothesis as:\n           <br><br>\n\n           <center><p style='font-size: 16px'>\\\\( H_{0} : \\\\mu_1 \\\\neq \\\\mu_2 \\\\)<\/p><\/center>\n           \n           or equivalently:\n           \n           <center><p style='font-size: 16px'>\\\\( H_{0} : \\\\mu_1 - \\\\mu_2 \\\\neq 0 \\\\)<\/p><\/center>\n           \n           Now that we have set up our hypotheses, let's discuss how you can find the test-statistic for this test.\n      <\/p>\")),\n        fluidRow(\n          column(8,\n                 withMathJax(HTML(\"<p>\n                   <h5><u>Investigating the difference in 2 blood pressure medications:<\/u><\/h5><br>\n                   \n                   So far, we have only looked at hypothesis tests that involve a single sample (1-sample z-test, proportion test, 1-sample t-test, paired t-test).\n                   The way that we conceptualised these tests was through the box model, which worked well because we only had a single sample.\n                   <br><br>\n                   \n                   However, now we are looking at the 2-sample t-test, which means that we have 2 samples. Not to worry - we will use 2-box models, one to \n                   represent each sample.\n                   <br><br>\n                   \n                   Let's start with the box model for sample 1. We will start with the basics. \\\\(n_1\\\\) is equal to 50, because we measured the blood pressure of 50 people \n                   in our Drug A sample. From these 50 people, we calculated the average of their blood pressures, yielding our observed value \\\\(OV_1\\\\) of 121.004. \n                   \\\\(s_1\\\\) is the sample standard deviation. This is because we are using a t-test, and in a t-test, we approximate the population standard deviation\n                   using the sample standard deviation. \n                   <br><br>\n                   \n                   You may still be wondering what \\\\(\\\\mu_1 = \\\\mu_2\\\\) stands for. This is based on the fact that in a 2-sample t-test, our null hypothesis is that the \n                   mean of sample 1 equals the mean of sample 2. Hence, \\\\(\\\\mu_1 = \\\\mu_2\\\\).\n                   <br><br>\n\n                   When considering the box model for sample 2, it is the same idea, except using the values that we measured among the people assigned to the sample 2 group. \n                   Note that here, \\\\(n_2\\\\) is also equal to 50. However, for a 2-sample t-test, there is no requirement that \\\\(n_1 = n_2\\\\)! Similarly, we write \n                   \\\\(\\\\mu_2 = \\\\mu_1\\\\), as under our null hypothesis, we assume the mean of sample 2 is equal to the mean of sample 1.\n                   <\/p>\"))\n          ),\n          column(4,\n                 HTML(\"<center>\"),\n                 HTML(\"<br>\"),\n                 HTML(\"<h5><b>Sample 1<\/b><\/h5>\"),\n                 grVizOutput(ns(\"box_model_modal_sample_1\"), width = \"60%\", height = \"40%\"),\n                 HTML(\"<br>\"),\n                 HTML(\"<h5><b>Sample 2<\/b><\/h5>\"),\n                 grVizOutput(ns(\"box_model_modal_sample_2\"), width = \"60%\", height = \"40%\"),\n                 HTML(\"<\/center>\")\n          )\n        ),\n        fluidRow(\n          column(12,\n                 HTML(\"<br><p>\n               <b><span style='color: blue;'>Now it's off to you! <\/span><\/b>Together, we worked through the null and alternate hypotheses, and explored the box models for \n               each sample. Now you need to go through and check the assumptions for a 2-sample t-test, find the test statistic, and finally calculate the p-value. To continue\n               with the blood pressure example, in the \\\"Input Sample Data\\\" section, select \\\"Pre-uploaded Data\\\" and then select the \\\"blood-press\\\" data set.\n               <\/p>\")\n          )\n        ),\n        easyClose = TRUE,\n        footer = modalButton(\"Close\"),\n      ))\n    })\n    \n    output$box_model_modal_sample_1 <- renderGrViz({\n      \n      data = blood_pressure$blood_pressure[blood_pressure$drug == \"Drug_A\"]\n      \n      # Compose label text with Unicode subscripts and rounded stats\n      pop_details <- paste0(\"μ₁ = μ₂ ; s₁ = \", round(sd(data), 3))\n      \n      # Build the Graphviz diagram string\n      diagram <- paste0(\n        \"digraph diagram {\n      graph [layout = dot, rankdir = TB]\n      \n      node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12]\n      box [label = \\\"\", pop_details, \"\\\"]\n      \n      node [shape = oval, width = 1.5, fillcolor = \\\"#f9ffbd\\\", fontsize = 12]\n      sample [label = \\\"OV₁ = \", round(mean(data, na.rm = TRUE), 3), \"\\\"]\n      \n      edge [minlen = 2]\n      box -> sample [label = \\\"  n₁ = \", length(data), \"\\\", fontsize = 12, labeldistance = 5]\n    }\"\n      )\n      grViz(diagram)\n    })\n    \n    output$box_model_modal_sample_2 <- renderGrViz({\n      \n      data = blood_pressure$blood_pressure[blood_pressure$drug == \"Drug_B\"]\n      \n      # Compose label text with Unicode subscripts and rounded stats\n      pop_details <- paste0(\"μ₁ = μ₂ ; s₁ = \", round(sd(data), 3))\n      \n      # Build the Graphviz diagram string\n      diagram <- paste0(\n        \"digraph diagram {\n      graph [layout = dot, rankdir = TB]\n      \n      node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12]\n      box [label = \\\"\", pop_details, \"\\\"]\n      \n      node [shape = oval, width = 1.5, fillcolor = \\\"#f9ffbd\\\", fontsize = 12]\n      sample [label = \\\"OV₁ = \", round(mean(data, na.rm = TRUE), 3), \"\\\"]\n      \n      edge [minlen = 2]\n      box -> sample [label = \\\"  n₁ = \", length(data), \"\\\", fontsize = 12, labeldistance = 5]\n    }\"\n      )\n      grViz(diagram)\n    })\n    \n    \n    \n    output$box_model_sample_1 <- renderGrViz({\n      \n      # Compose label text with Unicode subscripts and rounded stats\n      pop_details <- paste0(\"μ₁ = μ₂ ; s₁ = \", round(sd(data_sample_1()), 3))\n      \n      # Build the Graphviz diagram string\n      diagram <- paste0(\n        \"digraph diagram {\n      graph [layout = dot, rankdir = TB]\n      \n      node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12]\n      box [label = \\\"\", pop_details, \"\\\"]\n      \n      node [shape = oval, width = 1.5, fillcolor = \\\"#f9ffbd\\\", fontsize = 12]\n      sample [label = \\\"OV₁ = \", round(mean(data_sample_1(), na.rm = TRUE), 3), \"\\\"]\n      \n      edge [minlen = 2]\n      box -> sample [label = \\\"  n₁ = \", length(data_sample_1()), \"\\\", fontsize = 12, labeldistance = 5]\n    }\"\n      )\n      grViz(diagram)\n    })\n    \n    output$box_model_sample_2 <- renderGrViz({\n      \n      # Compose label text with Unicode subscripts and rounded stats\n      pop_details <- paste0(\"μ₂ = μ₁ ; s₂ = \", round(sd(data_sample_2()), 3))\n      \n      # Build the Graphviz diagram string\n      diagram <- paste0(\n        \"digraph diagram {\n      graph [layout = dot, rankdir = TB]\n      \n      node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12]\n      box [label = \\\"\", pop_details, \"\\\"]\n      \n      node [shape = oval, width = 1.5, fillcolor = \\\"#f9ffbd\\\", fontsize = 12]\n      sample [label = \\\"OV₂ = \", round(mean(data_sample_2(), na.rm = TRUE), 3), \"\\\"]\n      \n      edge [minlen = 2]\n      box -> sample [label = \\\"  n₂ = \", length(data_sample_2()), \"\\\", fontsize = 12, labeldistance = 5]\n    }\"\n      )\n      grViz(diagram)\n    })\n    \n    # Alternate hypothesis (rendered) output.\n    output$alternate_hypothesis_output <- renderUI({\n      hypothesis = paste(\"<p style='font-size: 16px;'>\\\\( H_1: \\\\) \\\\(\\\\mu_1\")\n      \n      # Specify alternate hypothesis in reference to whether the user chooses to do a one-sided or two-sided test.\n      if (input$alternate_hypothesis_choice == 1) {\n        hypothesis = paste(hypothesis, \"\\\\neq \\\\mu_2 \\\\)<\/p>\")\n      } else if (input$alternate_hypothesis_choice == 2) {\n        hypothesis = paste(hypothesis, \">  \\\\mu_2 \\\\)<\/p>\")\n      } else if (input$alternate_hypothesis_choice == 3) {\n        hypothesis = paste(hypothesis, \"<  \\\\mu_2 \\\\)<\/p>\")\n      }\n      \n      return (\n        tagList(\n          HTML(\"<center>\"),\n          withMathJax(HTML(hypothesis)),\n          HTML(\"<\/center>\")\n        )\n      )\n    })\n    \n    output$qqplot_sample_1 <- renderPlot({\n      qqnorm(data_sample_1(), main = \"Sample 1: QQ Plot\")\n      qqline(data_sample_1(), col = \"red\")\n    })\n    \n    output$qqplot_sample_2 <- renderPlot({\n      qqnorm(data_sample_2(), main = \"Sample 2: QQ Plot\")\n      qqline(data_sample_2(), col = \"red\")\n    })\n    \n    output$boxplot_assumption_checking <- renderPlot({\n      boxplot(list(\n        `Sample 1` = data_sample_1(), \n        `Sample 2` = data_sample_2()\n      ),\n      horizontal = TRUE,\n      col = c(\"blue\", \"red\"),\n      main = \"Side-by-side Boxplots\",\n      ylab = \"Samples\")\n    })\n    \n    output$histogram_assumption_checking <- renderPlot({\n      # Save original plotting settings\n      old_par <- par(no.readonly = TRUE)\n      \n      # Stack plots: 2 rows, 1 column\n      par(mfrow = c(1, 2))\n      \n      # Histogram - Sample 1\n      hist(data_sample_1(),\n           breaks = 30,\n           col = \"blue\",\n           border = \"black\",\n           main = \"Sample 1 Histogram\",\n           xlab = \"Values\",\n           ylab = \"Frequency\")\n      \n      # Histogram - Sample 2\n      hist(data_sample_2(),\n           breaks = 30,\n           col = \"red\",\n           border = \"black\",\n           main = \"Sample 2 Histogram\",\n           xlab = \"Values\",\n           ylab = \"Frequency\")\n      \n      # Restore settings\n      par(old_par)\n    })\n    \n    output$standard_deviation_assumption_checking <- renderUI({\n      \n      sd_1 = sd(data_sample_1())\n      sd_2 = sd(data_sample_2())\n      \n      return(\n        tagList(\n          HTML(\n            paste0(\n              '<div style=\"text-align: right;\">',\n              \"<p><b>Sample 1's standard deviation = \", round(sd_1, 3), \"<br>\",\n              \"Sample 2's standard deviation = \", round(sd_2, 3), \"<\/b><\/p>\",\n              \"<\/div>\"\n            )\n          )\n        )\n      )\n    })\n    \n    output$same_spread_output_decision <- renderUI({\n      bool = input$spread_toggle\n      string = \"<p>You have indicated that the <b>spread<\/b> of the 2 samples <b>is the same<\/b>. Hence, below we will do a <b>2-sample t-test with eqaul variance.<\/b><\/p>\"\n      if (bool == FALSE) {\n        string = \"<p>You have indicated that the <b>spread<\/b> of the 2 samples <b>is different<\/b>. Hence, below we will do a <b>Welch 2-sample t-test.<\/b><\/p>\"\n      }\n      return(HTML(string))\n    })\n    \n    pooled_sd_store = reactiveVal(1)\n    se_store = reactiveVal(1)\n    \n    # Expected value and standard error output.\n    output$ev_and_se_text <- renderUI({\n      \n      n1 = length(data_sample_1())\n      n2 = length(data_sample_2())\n      sd1 = sd(data_sample_1())\n      sd2 = sd(data_sample_2())\n      pooled_sd = sqrt( ((n1-1)*sd1^2 + (n2-1)*sd2^2)/(n1+n2-2))\n      pooled_sd_store(pooled_sd)\n      se = pooled_sd * sqrt((1/n1)+(1/n2))\n      se_store(se)\n      \n      # Find EV and SE.\n      # sd_ = sd(sample_data())\n      # EV = mean_\n      # SE = sd_ / sqrt(sample_size)\n      # \n      # SE_string(as.character(round(SE, 5)))\n      \n      EV_calculation_string = \"$$\\\\begin{align*} \\\\text{EV} &= \\\\mu_2 - \\\\mu_1\"\n      EV_calculation_string = paste(EV_calculation_string, \"\\\\\\\\ &=\", 0, \"\\\\end{align*}$$\", sep = \"\")\n      \n      expected_value = withMathJax(\n        HTML(\"<p>Expected Value:<\/p>\"),\n        HTML(EV_calculation_string)\n      )\n      \n      pooled_sd_string = withMathJax(\n        HTML(\"<p>Pooled standard deviation:<\/p>\"),\n        HTML(paste(\"$$\\\\begin{align*} \\\\widehat{\\\\sigma_p} &= \\\\sqrt{\\\\frac{ (n_1 - 1)\\\\widehat{\\\\sigma}_1^2 + (n_2 - 1)\\\\widehat{\\\\sigma}_2^2  }{n_1 + n_2 - 2}} \\\\\\\\\n                                                         &= \\\\sqrt{\\\\frac{ (\", n1, \"- 1)\", round(sd1, 3), \"^2 + (\", n2, \"- 1)\", round(sd2, 3), \"^2 }{\", n1, \"+\", n2, \"- 2}} \\\\\\\\\n                                                         &= \\\\sqrt{\\\\frac{ \", round((n1-1)*sd1^2, 3), \"+\", round((n2-1)*sd2^2,3), \"}{\", n1 + n2 - 2, \"}} \\\\\\\\\n                                                         &= \\\\sqrt{\", round(((n1-1)*sd1^2 + (n2-1)*sd2^2)/(n1+n2-2), 3), \"} \\\\\\\\\n                                                         &= \", round(pooled_sd, 3), \"\\\\end{align*}$$\", sep = \"\"))\n      )\n      \n      if (!input$spread_toggle) {\n        se = sqrt( ((sd1^2)/n1) + ((sd2^2)/n2) )\n        se_store(se)\n        standard_error = withMathJax(\n          HTML(\"<p>Standard Error:<\/p>\"),\n          HTML(paste(\"$$\\\\begin{align*} \\\\text{SE} &= \\\\sqrt{\\\\frac{s_1^2}{n_1} + \\\\frac{s_2^2}{n_2}} \\\\\\\\\n                                                 &= \\\\sqrt{\\\\frac{\", round(sd1^2,3), \"}{\", n1, \"}+\\\\frac{\", round(sd2^2,3), \"}{\", n2, \"}} \\\\\\\\\n                                                 &=\", round(se, 5),  \"\\\\end{align*}$$\", sep = \"\"))\n        )\n        pooled_sd_string = \"\"\n      } else {\n        standard_error = withMathJax(\n          HTML(\"<p>Standard Error:<\/p>\"),\n          HTML(paste(\"$$\\\\begin{align*} \\\\text{SE} &= \\\\widehat{\\\\sigma_p}\\\\sqrt{\\\\frac{1}{n_1}+\\\\frac{1}{n_2}} \\\\\\\\\n                                                 &=\", round(pooled_sd, 3), \"\\\\sqrt{\\\\frac{1}{\", n1, \"}+\\\\frac{1}{\", n2, \"}} \\\\\\\\\n                                                 &=\", round(se, 5),  \"\\\\end{align*}$$\", sep = \"\"))\n        )\n      }\n      \n      return(\n        tagList(\n          expected_value, pooled_sd_string, standard_error\n        )\n      )\n    })\n    \n    test_stat = reactiveVal(\"\")\n    \n    # Test statistic output.\n    output$test_statistic_calculation <- renderUI({\n      \n      observed_val = mean(data_sample_1(), na.rm = TRUE) - mean(data_sample_2(), na.rm = TRUE)\n      \n      # Calculate test statistic.\n      temp = observed_val/se_store()\n      temp = as.character(round(temp, 4))\n      test_stat(temp)\n      \n      t_stat = withMathJax(\n        HTML(paste(\"$$\\\\begin{align*} \\\\text{TS} &= \\\\frac{\\\\text{OV} - \\\\text{EV}}{\\\\text{SE}} \\\\\\\\ \n                                               &= \\\\frac{\\\\mu_1 - \\\\mu_2 - 0}{\\\\text{SE}} \\\\\\\\ \n                                               &= \\\\frac{\", round(mean(data_sample_1(), na.rm = T),3), \" - \", round(mean(data_sample_2(), na.rm = T),3), \" - 0}{\", round(se_store(), 3), \"} \\\\\\\\\n                                               &= \", test_stat(), \"\\\\end{align*}$$\", sep = \"\"))\n      )\n      additional_line = HTML(paste(\"<p style = 'text-align: left;'><span style='color: blue;'><i>The value for the test-statistic is \", test_stat(), \". <\/i><\/span><\/p>\", sep = \"\"))\n      return(\n        tagList(\n          t_stat,\n          additional_line\n        )\n      )\n    })\n    \n    p_val = reactiveVal(0)\n    df = reactiveVal(0)\n    \n    # P-value text output and calculation.\n    output$p_value_prelude <- renderUI({\n      \n      n1 = length(data_sample_1())\n      n2 = length(data_sample_2())\n      sd1 = sd(data_sample_1())\n      sd2 = sd(data_sample_2())\n      \n      # General prelude text about what the p-value is.\n      first_string = HTML(paste(\"<p>The p-value is the probability of observing a test-statistic <b>more extreme that our test statistic of \",\n                                test_stat(), \n                                \".<\/b><\/p>\", \n                                sep = \"\"))\n      \n      if (!input$spread_toggle) {\n        numerator <- ((sd1^2 / n1) + (sd2^2 / n2))^2\n        denominator <- ((sd1^2 / n1)^2) / (n1 - 1) + ((sd2^2 / n2)^2) / (n2 - 1)\n        df_welch <- round(numerator / denominator, 3)\n        df(numerator / denominator)\n        second_string <- withMathJax(\n          HTML(\"<p>For a Welch 2-sample t-test, we set the degrees of freedom equal to:<\/p>\"),\n          HTML(paste(\"$$\\\\begin{align*} \\\\text{df} &= \\\\frac{\\\\left( \\\\frac{s_1^2}{n_1} + \\\\frac{s_2^2}{n_2} \\\\right)^2}{\\\\frac{\\\\left( \\\\frac{s_1^2}{n_1} \\\\right)^2}{n_1 - 1} + \\\\frac{\\\\left( \\\\frac{s_2^2}{n_2} \\\\right)^2}{n_2 - 1}} \\\\\\\\\n                                                 &= \\\\frac{\\\\left( \\\\frac{\", round(sd1^2, 3), \"}{\", n1, \"} + \\\\frac{\", round(sd2^2, 3), \"}{\", n2, \"} \\\\right)^2}{\\\\frac{\\\\left( \\\\frac{\", round(sd1^2, 3), \"}{\", n1, \"} \\\\right)^2}{\", n1 - 1, \"} + \\\\frac{\\\\left( \\\\frac{\", round(sd2^2, 3), \"}{\", n2, \"} \\\\right)^2}{\", n2 - 1, \"}} \\\\\\\\\n                                                 &= \", df_welch, \"\\\\end{align*}$$\", sep = \"\"))\n        )\n      } else {\n        df(n1+n2-2)\n        second_string = withMathJax(\n          HTML(\"<p>For a 2-sample t-test with equal variance, we set the degree of freedom equal to:<\/p>\"),\n          HTML(paste(\"$$\\\\begin{align*} \\\\text{df} &= n_1 + n_2 - 2\\\\\\\\\n                                                                 &=\", n1, \"+\", n2, \" - 2 \\\\\\\\\n                                                                 &=\", n1 + n2 - 2,  \"\\\\end{align*}$$\", sep = \"\"))\n        )\n      }\n      \n      # Specifically how to find the p-value (based upon alternate hypothesis).\n      third_string = \"<p>The test statistics fall on a standard normal curve. \"\n      if (input$alternate_hypothesis_choice == 1) {\n        negative_test_stat = as.character(-abs(as.numeric(test_stat())))\n        positive_test_stat = as.character(abs(as.numeric(test_stat())))\n        third_string = paste(third_string, \"As we are doing a two-sided alternate hypothesis, we are interested in finding the <b>area below \", negative_test_stat,\n                             \" and above \", positive_test_stat, \".<\/p><\/b>\", sep = \"\")\n      } else if (input$alternate_hypothesis_choice == 2){\n        third_string = paste(third_string, \"As we are doing a one-sided greater than alternate hypothesis, we are interested in finding the <b>area above \", test_stat(),\n                             \".<\/p><\/b>\", sep = \"\")\n      } else if (input$alternate_hypothesis_choice == 3){\n        third_string = paste(third_string, \"As we are doing a one-sided less than alternate hypothesis, we are interested in finding the <b>area below \", test_stat(),\n                             \".<\/p><\/b>\", sep = \"\")\n      }\n      third_string = HTML(third_string)\n      \n      # Calculate p-value.\n      p_val_local = 0\n      if (input$alternate_hypothesis_choice == 1) {\n        p_val_local = 2 * (1 - pt(abs(as.numeric(test_stat())), df()))\n      } else if (input$alternate_hypothesis_choice == 2) {\n        p_val_local = 1 - pt(as.numeric(test_stat()), df())\n      } else if (input$alternate_hypothesis_choice == 3) {\n        p_val_local = pt(as.numeric(test_stat()), df())\n      }\n      p_val(p_val_local)\n      \n      # String to output the p-value.\n      p_value = withMathJax(HTML(\"<p style='font-size: 16px; text-align: center;'>\\\\( p =\", as.character(round(p_val_local,5)) ,\"\\\\)<\/p>\"))\n      \n      return(\n        tagList(\n          first_string,\n          second_string,\n          third_string,\n          p_value\n        )\n      )\n      \n    })\n    \n    # Histogram with t curve to show p-value calculation.\n    output$test_stat_t_plot = renderPlot({\n      return(curve_shaded_test_stat(dt, list(df = df() - 1), as.numeric(test_stat()), input$alternate_hypothesis_choice))\n    })\n    \n    alpha = reactiveVal(0.05)\n    alpha_warning = reactiveVal(FALSE)\n    observeEvent(input$alpha_value, {\n      if (is.na(input$alpha_value) || input$alpha_value < 0 || input$alpha_value > 1) {\n        alpha(0.05)\n        alpha_warning(TRUE)\n      } else {\n        alpha(input$alpha_value)\n        alpha_warning(FALSE)\n      }\n    })\n    \n    # Error message for when the value for alpha is invalid.\n    output$significance_level_warning <- renderUI({\n      if (alpha_warning()) {\n        return(\n          HTML(\"<span style='color: red;'><p>Error: The value for α must be between 0 and 1.<\/p><\/span>\")\n        )\n      }\n    })\n    \n    # Hypothesis test output\n    output$final_conclusion_output <- renderUI({\n      \n      # Change > or < sign depending on whether the p-value is less than or greater than alpha.\n      math_line = withMathJax(\n        HTML(paste(\"$$\\\\begin{align*} \\\\alpha &> p \\\\\\\\\", as.character(alpha()), \" &> \", as.character(round(p_val(), 4)), \"\\\\end{align*}$$\", sep = \"\"))\n      )\n      conclusion_line = HTML(\"<span style='color: blue;'><p>As the p value is less than our significance level, we <b>reject the null hypothesis<\/b>.<\/p><\/span>\")\n      if (p_val() > alpha()) {\n        math_line = withMathJax(\n          HTML(paste(\"$$\\\\begin{align*} \\\\alpha &< p \\\\\\\\\", as.character(alpha()), \" &< \", as.character(round(p_val(), 4)), \"\\\\end{align*}$$\", sep = \"\"))\n        )\n        conclusion_line = HTML(\"<span style='color: blue;'><p>As the p value is greater than our significance level, we <b>accept the null hypothesis<\/b>.<\/p><\/span>\")\n      }\n      \n      return(\n        tagList(\n          math_line,\n          conclusion_line\n        )\n      )\n    })\n    \n    # Process confidence level text input.\n    confidence_level = reactiveVal(0.95)\n    alpha_warning_confidence_lvel = reactiveVal(FALSE)\n    observeEvent(input$confidence_level, {\n      if (is.na(input$confidence_level) || input$confidence_level <= 0 || input$confidence_level >= 1) {\n        confidence_level(0.95)\n        alpha_warning_confidence_lvel(TRUE)\n      } else {\n        confidence_level(input$confidence_level)\n        alpha_warning_confidence_lvel(FALSE)\n      }\n    })\n    \n    # Error message for when the value for alpha is invalid.\n    output$confidence_level_warning <- renderUI({\n      if (alpha_warning_confidence_lvel()) {\n        return(\n          HTML(\"<span style='color: red;'><p>Error: The value for confidence level must be between 0 and 1.<\/p><\/span>\")\n        )\n      }\n    })\n    \n    output$confidence_level_output = renderUI({\n      \n      x1 = data_sample_1()\n      x2 = data_sample_2()\n      \n      n1 = length(x1)\n      n2 = length(x2)\n      mean1 = mean(x1)\n      mean2 = mean(x2)\n      var1 = var(x1)\n      var2 = var(x2)\n      \n      conf_level = as.numeric(confidence_level())\n      alpha = 1 - conf_level\n      \n      # Mean difference\n      diff_means = mean1 - mean2\n      \n      # --- Choose variance method ---\n      if (isTRUE(input$spread_toggle)) {\n        # Equal variance (pooled)\n        sp = sqrt(((n1 - 1)*var1 + (n2 - 1)*var2) / (n1 + n2 - 2))\n        se = sp * sqrt(1/n1 + 1/n2)\n        df = n1 + n2 - 2\n      } else {\n        # Welch\n        se = sqrt(var1/n1 + var2/n2)\n        df = ( (var1/n1 + var2/n2)^2 ) / \n          ( ((var1/n1)^2)/(n1-1) + ((var2/n2)^2)/(n2-1) )\n      }\n      \n      formula_line = substitution_line = answer_line = conclusion_text = NULL\n      \n      # --- CI based on alternative hypothesis ---\n      if (input$alternate_hypothesis_choice == 1) {\n        # Two sided\n        t_val = qt(1 - alpha/2, df = df)\n        lower = diff_means - t_val * se\n        upper = diff_means + t_val * se\n        \n        formula_line = \"$$CI = (\\\\bar{x}_1 - \\\\bar{x}_2) \\\\pm t_{\\\\alpha/2, df} \\\\cdot SE$$\"\n        substitution_line = paste0(\"$$CI = \", round(diff_means,4),\n                                   \" \\\\pm t_{\", round(alpha/2,4), \", \", round(df,2), \"} \\\\times \",\n                                   round(se,4), \"$$\")\n        answer_line = paste0(\"$$CI = (\", round(lower,4), \", \", round(upper,4), \")$$\")\n        \n        if (0 < lower || 0 > upper) {\n          conclusion_text = \"As 0 (no difference) is outside the confidence interval, we <b>reject the null hypothesis<\/b>.\"\n        } else {\n          conclusion_text = \"As 0 (no difference) is inside the confidence interval, we <b>fail to reject the null hypothesis<\/b>.\"\n        }\n        \n      } else if (input$alternate_hypothesis_choice  == 2) {\n        # Greater than (diff > 0)\n        t_val = qt(1 - alpha, df = df)\n        lower = diff_means - t_val * se\n        \n        formula_line = \"$$CI = (\\\\bar{x}_1 - \\\\bar{x}_2 - t_{\\\\alpha, df} \\\\cdot SE, \\\\infty)$$\"\n        substitution_line = paste0(\"$$CI = (\", round(diff_means,4),\n                                   \" - t_{\", round(alpha,4), \", \", round(df,2), \"} \\\\times \",\n                                   round(se,4), \", \\\\infty)$$\")\n        answer_line = paste0(\"$$CI = (\", round(lower,4), \", \\\\infty)$$\")\n        \n        if (0 < lower) {\n          conclusion_text = \"As 0 is below the confidence interval, we <b>reject the null hypothesis<\/b>.\"\n        } else {\n          conclusion_text = \"As 0 is inside the confidence interval, we <b>fail to reject the null hypothesis<\/b>.\"\n        }\n        \n      } else if (input$alternate_hypothesis_choice  == 3) {\n        # Less than (diff < 0)\n        t_val = qt(1 - alpha, df = df)\n        upper = diff_means + t_val * se\n        \n        formula_line = \"$$CI = (-\\\\infty, \\\\bar{x}_1 - \\\\bar{x}_2 + t_{\\\\alpha, df} \\\\cdot SE)$$\"\n        substitution_line = paste0(\"$$CI = (-\\\\infty, \", round(diff_means,4),\n                                   \" + t_{\", round(alpha,4), \", \", round(df,2), \"} \\\\times \",\n                                   round(se,4), \")$$\")\n        answer_line = paste0(\"$$CI = (-\\\\infty, \", round(upper,4), \")$$\")\n        \n        if (0 > upper) {\n          conclusion_text = \"As 0 is above the confidence interval, we <b>reject the null hypothesis<\/b>.\"\n        } else {\n          conclusion_text = \"As 0 is inside the confidence interval, we <b>fail to reject the null hypothesis<\/b>.\"\n        }\n      }\n      \n      # --- Build UI ---\n      tagList(\n        withMathJax(HTML(formula_line)),\n        withMathJax(HTML(substitution_line)),\n        withMathJax(HTML(answer_line)),\n        HTML(paste0(\"<span style='color: blue;'><p>\", conclusion_text, \"<\/p><\/span>\"))\n      )\n    })\n\n  })\n    \n}","type":"text"},{"name":"R/ttest_2_sample_ui.R","content":"twoSampleTTestUI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    \n    # Title Strip\n    fluidRow(\n      column(8,\n             HTML(\"<h1>2-Sample t-Test<\/h1>\"),\n      ),\n      column(4,\n             tags$style(HTML(paste0(\"\n              [id='\", ns(\"learning_text\"), \"'] {\n                font-size: 20px;\n                padding: 10px 20px;\n              }\n              \"))),\n             actionButton(ns(\"learning_text\"), \"What is a 2-sample t-test?\", class = \"btn btn-primary\", style=\"color: #fff;\", width = \"100%\")\n      ),\n    ),\n    HTML(\"<br>\"),\n    \n    ############ SECTION: Input Data ############\n    load_data_2_sample_UI(ns(\"loading_data\")),\n    \n    HTML(\"<br><br>\"),\n    \n    # Conditional panel ensures that the rest of the exercise is displayed only if the data has been uploaded.\n    conditionalPanel(\n      condition = sprintf('output[\"%s\"]', ns(\"render_rest_of_exercise\")),\n      \n      ############ SECTION: The NULL Hypothesis - Setting up the Box ############\n      fluidRow(\n        column(6,\n               tight_card(\n                 \"The 'NULL' Hypothesis - Setting up the Box\",\n                 \n                 HTML(\"<p>Similar to the 1-sample tests, we will be using the box model to represent the null hypothesis. The key difference here, however, is that we don't have\n                       input any values. The null hypothesis is set by default! Take some time to read the points below to ensure you understand why the boxes are arranged as\n                       they are.<\/p>\"),\n                 \n                 accordion(\n                   \n                   open = FALSE,\n                   \n                   accordion_panel(\n                     HTML(\"<b>Why do we have two boxes?<\/b>\"),\n                     withMathJax(HTML(\"<p>\n                                  The first thing you may wonder is why we have two box models for a 2-sample t-test. Unlike the 1-sample t-test, which only had ONE sample, \n                                  the 2-sample t-test has TWO samples, and so we need to have two box models to represent each sample.<br><br>\n                                  \n                                  More concretely, these 2 samples are different, and so they are likely to come from slightly different distributions. Hence, we need to have\n                                  2 different box models (note that the standard deviation \\\\(s\\\\) for each is different). The samples are not coming from the same distribution.\n                                <\/p>\"))\n                   ),\n                   \n                   accordion_panel(\n                     HTML(\"<b>What is going on with the means of the boxes?<\/b>\"),\n                     withMathJax(HTML(\"<p>\n                                  For a 2-sample t-test, under the null hypothesis, we claim that the mean of sample 1 (\\\\(\\\\mu_1\\\\)) is equal to the mean of sample 2 \n                                  (\\\\(\\\\mu_2\\\\)). More formally, we write this as \\\\(H_0: \\\\mu_1 = \\\\mu_2\\\\).<br><br>\n                                  \n                                  Hence, the mean of sample 1 (\\\\(\\\\mu_1\\\\)) is equal to the mean of sample 2 (\\\\(\\\\mu_2\\\\)). \n                                  <br>Likewise, the mean of sample 2 (\\\\(\\\\mu_2\\\\)) is equal to the mean of sample 1 (\\\\(\\\\mu_1\\\\)).\n                                <\/p>\"))\n                   ),\n                   \n                   accordion_panel(\n                     HTML(\"<b>Extra Points:<\/b>\"),\n                     withMathJax(HTML(\"<p>In case you are confused about where all the values for each box model have come from, these come from the sample 1 and \n                                   sample 2 data that you specified above. In particular:\n                                  <ul>\n                                     <li>\\\\(s_1\\\\) represents the sample standard deviation for sample 1 (similar for sample 2). Recall that in a t-test, we estimate\n                                     the population standard devation as the sample standard deviation.<\/li>\n                                     <li>\\\\(n_1 \\\\) is the number of observation in sample 1 (simlar for sample 2).<\/li>\n                                     <li>\\\\(\\\\text{OV}_1 \\\\) is the observed sample mean for sample 1 (similar for sample 2).<\/li>\n                                  <\/ul>\n                               <\/p>\"))\n                   )\n                 ),\n                 header_colour = \"#3179ae\"\n               )\n        ),\n        column(3,\n               tight_card(\n                 NULL,\n                 HTML(\"<center>\"),\n                 HTML(\"<h5><b>Sample 1<\/b><\/h5>\"),\n                 grVizOutput(ns(\"box_model_sample_1\"), width = \"100%\", height = \"70%\"),\n                 HTML(\"<\/center>\")\n               ),\n        ),\n        column(3,\n               tight_card(\n                 NULL,\n                 HTML(\"<center>\"),\n                 HTML(\"<h5><b>Sample 2<\/b><\/h5>\"),\n                 grVizOutput(ns(\"box_model_sample_2\"), width = \"100%\", height = \"70%\"),\n                 HTML(\"<\/center>\")\n               ),\n        )\n      ),\n      \n      HTML(\"<br><br><br>\"),\n      \n      ############ SECTION: The Alternate Hypothesis ############\n      fluidRow(\n        column(7,\n               tight_card(\n                 \"The Alternate Hypothesis\",\n                 HTML(\"<p>Specify what type of alternate hypothesis you will be using below:<\/p>\"),\n                 HTML(\"<br>\"),\n                 radioButtons(\n                   inputId = ns(\"alternate_hypothesis_choice\"),\n                   label = NULL,\n                   choices = list(\n                     \"Two Sided\" = 1,\n                     \"One Sided (greater than)\" = 2,\n                     \"One Sided (less than)\" = 3\n                   )\n                 ),\n                 header_colour = \"#3179ae\"\n               )\n        ),\n        column(5,\n               tight_card(\n                 NULL,\n                 HTML(\"<p><b>Null Hypothesis<\/b><\/p>\"),\n                 HTML(\"<center>\"),\n                 withMathJax(HTML(\"<p style='font-size: 16px;'>\\\\( H_0: \\\\) \\\\( \\\\mu_1 = \\\\mu_2 \\\\)<\/p>\")),\n                 HTML(\"<\/center>\"),\n                 HTML(\"<p><b>Alternate Hypothesis<\/b><\/p>\"),\n                 uiOutput(ns('alternate_hypothesis_output')),\n               )\n        )\n      ),\n      \n      HTML(\"<br><br><br>\"),\n      \n      ############ SECTION: Assumptions ############\n      fluidRow(\n        column(12,\n               tight_card(\n                 \"Assumptions\",\n                 HTML(\"<p>For the hypothesis test to be valid, we need to check the following assumptions:<\/p>\"),\n                 \n                 accordion(\n                   open = FALSE,\n                   \n                   # Assumption 1: Independent Samples\n                   accordion_panel(\n                     HTML(\"<b>Assumption 1: Independent and Randomly Chosen Sample<\/b>\"),\n                     HTML(\"<p>The first assumption is that our 2 samples are <b>independent and randomly chosen<\/b>.<\/p>\"),\n                     HTML(\"<p><span style='color: blue;'><b>How do we check?<\/b><\/span> <i>We check by investigating the experimental setup.<\/i><br><br>\n                                      For example, consider we were doing an experiment where we were interested in the effect of a treatment on resting heart rate,\n                                      and had a control and treatment group. Independence would be violated if people in the sample were related (family members would share\n                                      similar genetics, and similar resting heart rates). Randomness could be violated if we only choose people with certain characteristics for \n                                      one of the groups, such as healthy people for the treatment group. It could appear the treatment is reducing these people's heart rate,\n                                      but it is actually that they are healthy so already have a comparably low heart rate.<\/p>\")\n                   ),\n                   \n                   # Assumption 2: Normality\n                   accordion_panel(\n                     HTML(\"<b>Assumption 2: Normality<\/b>\"),\n                     HTML(\"<p>The second assumption is that each <b>sample's means are normally distributed<\/b>.\"),\n                     HTML(\"<p><span style='color: blue;'><b>How do we check?<\/b><\/span><br><\/p>\"),\n                     HTML(\"<p>Firstly, it is important to realise that here, we want the distribution of sample means to be normally distributed. Hence, we do not\n                                necessarily need the underlying data to be normally distributed, as we can rely on the Central Limit Theorem (CLT) to apply.<br><br>\n                                \n                                That being said, knowing whether the CLT applies or not is not straightforward. A common convention used online is that if there are \n                                more than 30 points in the sample, then the CLT will 'kick in'. But this is not necessarily true! If the underlying distribution is very skewed\n                                and/or asymmetric, then you will likely need many more than 30 points. Hence, checking whether the underlying data is nearly normally distributed\n                                will give us some insight. This is because if data is nearly normally distributed, you need fewer points for the CLT to 'kick in'.<br><br> \n                                \n                                There are a few different ways that you can check whether the underlying data is normally distributed. For each of the following, you must\n                                look at both samples separately:\n                                <ul>\n                                  <li>Boxplots: look to see if the plot is symmetric with few outliers.<\/li>\n                                  <li>Histograms: look to see if the frequency (or density) is normally distributed.<\/li>\n                                  <li>QQ-plots: see if the points follow the diagonal QQ-line (see below).<\/li>\n                                  <li>Number of points: You can also make reference to the sample size when making your decision. For example, if you see some slight deviations\n                                  in normality, but have a large sample size, you have more confidence that the CLT will apply.<\/li>\n                                <\/ul><\/p>\"),\n                     fluidRow(\n                       column(6,\n                              plotOutput(ns(\"qqplot_sample_1\"))\n                       ),\n                       column(6,\n                              plotOutput(ns(\"qqplot_sample_2\"))\n                       )\n                     ),\n                   ),\n                   \n                   # Assumption 3: Equal Spread\n                   accordion_panel(\n                     HTML(\"<b>Assumption 3: Equal Spread<\/b>\"),\n                     HTML(\"<p>The third assumption is that sample 1 and sample 2's <b>population spreads are equal<\/b>.<\/p>\"),\n                     HTML(\"<p><span style='color: blue;'><b>How do we check?<\/b><\/span><br><\/p>\"),\n                     HTML(\"<p>There are 2 main ways we can check this visually:\n                                <ul>\n                                  <li>Histograms: look to see if the histograms for each sample have similar spreads.<\/li>\n                                  <li>Boxplots: look to see if the boxplots have similar spread (done in the section below).<\/li>\n                                <\/ul>\n                                Unlike the other tests, for a 2-sample t-test, if this assumption is not satisfied, we can make an easy change to how the test statistic\n                                is calculated to relax this assumption. If the assumption is not satisfied, we can move from a regular 2-sample t-test to a Welch 2-sample \n                                t-test. In the next section, you will determine whether we do a Welch test or not!\n                                <\/p>\")\n                   )\n                 ),\n                 header_colour = \"#3179ae\"\n               )\n        )\n      ),\n      \n      HTML(\"<br><br><br>\"),\n      \n      fluidRow(\n        \n        column(9,\n               tight_card(\n                 \"Checking Assumption 3 - Is the Spread Equal?\",\n                 HTML(\"<p>\n                                 As mentioned in <b>assumption 3<\/b>, an assumption of a standard 2-sample t-test with equal variance is that the population spreads of sample 1 and sample 2 \n                                 are equal. However, if this assumption is not satisfied, it is not bad news! We can instead use a different type of 2-sample t-test which relaxes this \n                                 assumption. In particular, the two types of test we can use include:\n                                 <ul>\n                                    <li><span style='color: blue;'><b>2-Sample T-Test With Equal Variance<\/b><\/span>: When the 2 samples have the same (approximately the same) spread.<\/li>\n                                    <li><span style='color: blue;'><b>Welch 2-Sample T-Test<\/b><\/span>: When the 2 samples have different spreads.<\/li>\n                                 <\/ul>\n                                 Your goal is to decide whether we will use a 2-sample t-test with equal variance, or a Welch 2-sample t-test. To make this determination, use a \n                                 combination of the outputs below to make your decision.\n                               <\/p>\"),\n                 accordion(\n                   open = FALSE,\n                   accordion_panel(\n                     HTML(\"<b>Boxplots<\/b>\"),\n                     HTML(\"<p>\n                                    Indicators that the spreads are similar:\n                                    <ul>\n                                      <li>Is the IQR (the size of the box) similar?<\/li>\n                                      <li>Are the whiskers of the box a similar size?<\/li>\n                                    <\/ul>\n                                  <\/p>\"),\n                     plotOutput(ns(\"boxplot_assumption_checking\"))\n                   ),\n                   accordion_panel(\n                     HTML(\"<b>Histograms<\/b>\"),\n                     HTML(\"<p>\n                                    Indicators that the spreads are similar:\n                                    <ul>\n                                      <li>Does the distribution of vlaues look similar?<\/li>\n                                      <li>Does the spread (standard deviation) look similar?<\/li>\n                                    <\/ul>\n                                  <\/p>\"),\n                     plotOutput(ns(\"histogram_assumption_checking\"))\n                   ),\n                   accordion_panel(\n                     HTML(\"<b>Sample Standard Deviation<\/b>\"),\n                     HTML(\"<p>\n                                    Indicators that the spreads are similar:\n                                    <ul>\n                                      <li>Do both samples have a similar sample standard deviation?<\/li>\n                                    <\/ul>\n                                  <\/p>\"),\n                     uiOutput(ns(\"standard_deviation_assumption_checking\"))\n                   ),\n                 ),\n                 header_colour = \"#3179ae\"\n               )\n               \n        ),\n        column(3,\n               primary_card(\n                 \"Equal Spread?\",\n                 HTML(\"<p><i>Toggle the switch below to determine whether the spread is the same or not.<\/i><\/p>\"),\n                 input_switch(ns(\"spread_toggle\"), \"Same Spread\", value = TRUE), \n                 uiOutput(ns(\"same_spread_output_decision\")),\n                 header_colour = \"#3179ae\"\n               )\n        )\n      ),\n      \n      HTML(\"<br><br><br>\"),\n      \n      ############ SECTION: Test Statistic ############\n      fluidRow(\n        column(12,\n               tight_card(\n                 \"Test Statistic\",\n                 fluidRow(\n                   column(6,\n                          HTML(\"<p><b>Step 1) Calculate Expected Value (SE) and Standard Error (SE)<\/b><\/p>\"),\n                          uiOutput(ns(\"ev_and_se_text\"))\n                   ),\n                   column(6,\n                          HTML(\"<p><b>Step 2) Test Statistic Calculation<\/b><\/p>\"),\n                          uiOutput(ns(\"test_statistic_calculation\"))\n                   )\n                 ),\n                 header_colour = \"#3179ae\"\n               )\n        )\n        \n      ),\n      \n      HTML(\"<br><br><br>\"),\n      \n      ############ SECTION: Test p-value ############\n      fluidRow(\n        column(6,\n               tight_card(\n                 \"p-value\",\n                 uiOutput(ns(\"p_value_prelude\")),\n                 header_colour = \"#3179ae\"\n               )\n        ),\n        column(6,\n               tight_card(\n                 NULL,\n                 HTML(\"<center>\"),\n                 plotOutput(ns(\"test_stat_t_plot\"), width = \"100%\", heigh = \"325px\"),\n                 HTML(\"<\/center>\"),\n               )\n        )\n      ),\n      \n      HTML(\"<br><br><br>\"),\n      \n      ############ SECTION: Conclusion ############\n      fluidRow(\n        column(12,\n               tight_card(\n                 \"Conclusion (p-value)\",\n                 \n                 fluidRow(\n                   # Section to enter significance level.\n                   column(6,\n                          HTML(\"<p><b>Step 1) What is your significance level<\/b>?<\/p>\"),\n                          \n                          # Space to enter significance value.\n                          fluidRow(\n                            column(1,\n                                   withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>\\\\( \\\\alpha = \\\\)<\/p>\"))\n                            ),\n                            column(3,\n                                   numericInput(\n                                     ns(\"alpha_value\"),\n                                     NULL,\n                                     value = 0.05,\n                                     min = 0,\n                                     max = 1,\n                                     width = \"100%\"\n                                   ),\n                            ),\n                          ),\n                          uiOutput(ns(\"significance_level_warning\")),\n                   ),\n                   \n                   # Section to provide final result.\n                   column(6,\n                          HTML(\"<p><b>Step 2) Final Conclusion<\/b><\/p>\"),\n                          uiOutput(ns(\"final_conclusion_output\"))\n                   )\n                 ),\n                 header_colour = \"#3179ae\"\n               )\n        ),\n      ),\n      \n      HTML(\"<br><br><br>\"),\n      \n      ############ SECTION: Confidence Interval ############\n      fluidRow(\n        column(12,\n               tight_card(\n                 \"Conclusion (Confidence Interval)\",\n                 HTML(\"<p>\n                      A confidence interval in a two-sample t-test shows the range of plausible values for the difference between the population means at the chosen confidence\n                      level. If 0 falls outside this range, we reject the null hypothesis.\n                      <br><br>\n\n                      We can also use the confidence interval to guide hypothesis testing: if 0 (representing no difference between the two population means) does not lie within\n                      the confidence interval, then we reject the null hypothesis. If 0 does lie within the interval, we do not reject the null.\n                      <\/p>\"),\n                 fluidRow(\n                   column(6,\n                          HTML(\"<p><b>Step 1) What is your confidence level<\/b>?<\/p>\"),\n                          \n                          fluidRow(\n                            column(1,\n                                   withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>\\\\( \\\\alpha = \\\\)<\/p>\"))\n                            ),\n                            column(3,\n                                   numericInput(\n                                     ns(\"confidence_level\"),\n                                     NULL,\n                                     value = 0.95,\n                                     min = 0,\n                                     max = 1,\n                                     width = \"100%\"\n                                   ),\n                            ),\n                          ),\n                      uiOutput(ns(\"confidence_level_warning\")),\n                   ),\n                   column(6,\n                          HTML(\"<p><b>Step 2) Final Conclusion<\/b><\/p>\"),\n                          uiOutput(ns(\"confidence_level_output\")),\n                   )\n                 ),\n                 header_colour = \"#3179ae\"\n               )\n        ),\n      ),\n      \n      HTML(\"<br><br><br><br><br><br>\"),\n      \n    )\n  \n  )\n}","type":"text"},{"name":"R/ttest_paired_srv.R","content":"pairedTTestServer <- function(id) {\n  \n  moduleServer(id, function(input, output, session) {\n    \n    ns <- session$ns\n    \n    ############################ Modal Intro ############################# \n    observeEvent(input$learning_text, {\n      showModal(modalDialog(\n        title = \"The 'paired t-test'\",\n        withMathJax(HTML(\"<p>\n           When evaluating the effect of a treatment or intervention, it is often helpful to measure outcomes both <i>before<\/i> and <i>after<\/i> the treatment on the same\n           individuals. This kind of design is called a <b>paired sample<\/b> because each person contributes two related measurements: one before and one after treatment.\n           <br><br>\n           \n           To explore this, we are going to be using the example of a new medicine (which we will refer simply to as Drug A), which was developed to alter\n           someone's blood pressure. This is important as some people may have elevated blood pressure, meaning they could be at risk of serious health implications.\n           <br><br>\n           \n           Why use a paired sample? A paired design helps control for individual differences. For example, some people naturally have higher or lower blood pressure than\n           others. By comparing each person’s blood pressure to their own baseline, we reduce variability and increase the ability to detect a real effect of the drug.\n           <br><br>\n           \n           The paired t-test is used to determine whether the average difference between the paired measurements is significantly different from some hypothesised value. More\n           formally, let \\\\(\\\\mu_1\\\\) be the average blood pressure before taking the drug, and let \\\\(\\\\mu_1\\\\) be the average blood pressure after taking the drug. We define\n           the difference \\\\(\\\\mu_d = \\\\mu_2 - \\\\mu_1 \\\\).\n           <br><br>\n           \n           In this example, we are simply interested in whether the drug causes a change to someone's blood pressure. Hence, the null hypothesis is:\n           \n           <center><p style='font-size: 16px'>\\\\( H_{0} : \\\\mu_d = 0 \\\\)<\/p><\/center><br>\n\n           We set up the alternate hypothesis to be that the drug does cause a change in blood pressure. Hence, the alternate hypothesis is:\n           \n           <center><p style='font-size: 16px'>\\\\( H_{1} : \\\\mu_d \\\\neq 0 \\\\)<\/p><\/center><br>\n           \n           <b><span style='color: blue;'>KEY TAKEAWAY:<\/span><\/b> Now that we have defined \\\\(\\\\mu_d\\\\) to be \\\\(\\\\mu_2 - \\\\mu_1 \\\\), we can see that we actually now only\n           have a <b>single sample<\/b>. Hence, a paired t-test is actually just a 1-sample t-test that we learnt previously (you should do that exercise first if you have\n           not already completed it).\n           \n           Regardless, let's continue with this example to work out if we see a blood pressure change when our sample takes the drug.\n      <\/p>\")),\n        fluidRow(\n          column(8,\n                 withMathJax(HTML(\"<p>\n                   <h5><u>Investigating the change in blood pressure:<\/u><\/h5><br>\n                   \n                   Identical to the 1-sample t-test exercise, we can use the box model to model the hypothesis test. We first find the sample standard deviation.\n                   To do this, we subtract the blood pressure values from before taking the drug from the measured values after taking the drug. We find that the sample standard\n                   deviation is equal to 17.346. Additionally, from this data, we know that the observed value (OV) is -4.373. This means that from our sample, on average, blood \n                   pressure decreases by 4.373 mmHg (we still have to investigate whether this is statistically different from 0).\n                   <br><br>\n                   \n                   We also have that \\\\(n = 30\\\\) as there are 30 people in the sample, and \\\\(\\\\mu = 0\\\\), which comes from the null hypothesis.\n                   <\/p>\"))\n          ),\n          column(4,\n                 HTML(\"<br><br>\"),\n                 grVizOutput(ns(\"intro_example_box_model\"), width = \"80%\", height = \"70%\"),\n          )\n        ),\n        HTML(\"<p><br>\n                With the box made, we can now calculate the test statistic.<br>\n                <\/p>\"),\n        withMathJax(\n          HTML(paste(\"$$\\\\begin{align*} \\\\text{Test-Statistic (TS)} &= \\\\frac{\\\\text{OV} - \\\\text{EV}}{\\\\hat{\\\\text{SE}}}\n                              \\\\\\\\ &= \\\\frac{\\\\text{OV} - \\\\text{EV}}{\\\\frac{s}{\\\\sqrt{n}}}\n                              \\\\\\\\ &= \\\\frac{4.373 - 0}{\\\\frac{17.346}{\\\\sqrt{30}}}\n                              \\\\\\\\ &= -1.381 \\\\text{ (3 decimal places)} \\\\end{align*}$$\", sep = \"\"))\n        ),\n        HTML(\"<p>With the test-statistic found, you can now find the p-value. Scroll down in the lesson to see how this is done!<\/p>\"),\n        easyClose = TRUE,\n        footer = modalButton(\"Close\"),\n      ))\n    })\n    \n    # Example box model\n    output$intro_example_box_model <- renderGrViz({\n      string = \"digraph diagram {\n          graph [layout = dot, rankdir = TB]\n\n          node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12, width = 2.5]\n          box [label = '&mu; = 0; s = 4.751']\n\n          node [shape = oval,width = 1.5,fillcolor = \\\"#f9ffbd\\\", fontsize = 12]\n          sample [label = 'OV = -4.373']\n\n          edge [minlen = 2]\n            box->sample [label = '  n = 30', fontsize = 12, labeldistance = 5]\n          }\"\n      return(grViz(string))\n    })\n    \n    ############################ Uploading Data Mechanism ############################# \n    \n    sample_data_session <- load_data_paired_sample_Server(id = \"loading_data\")\n    \n    # Store the sample data.\n    sample_data <- reactiveVal(NULL)\n    \n    # Variable that is true when the data has been specified, meaning the rest of the exercise can commence\n    # This variable can be accessed by the ui conditional panel.\n    output$render_rest_of_exercise <- reactive({\n      !is.null(sample_data_session$data_paired_difference())\n      sample_data(sample_data_session$data_paired_difference())\n    })\n    outputOptions(output, \"render_rest_of_exercise\", suspendWhenHidden = FALSE)\n    \n    ################################################################\n    \n    # Box model plot\n    output$box_model <- renderGrViz({\n      \n      if (is.null(input$null_mu)) {\n        return()\n      }\n      \n      # String with mu and sigma.\n      pop_details = paste(\"&mu; = \", as.character(round(input$null_mu, digits = 3)), \"; s = \", as.character(round(sd(sample_data()), digits = 3)))\n      \n      # Set up graph and box\n      diagram = \"digraph diagram { graph [layout = dot, rankdir = TB] node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12, width = 2.5] box [label = '\"\n      diagram = paste(diagram, pop_details, \"']\", sep = \"\")\n      \n      # Set up sample circle.\n      diagram = paste(diagram, \" node [shape = oval,width = 1.5,fillcolor = \\\"#f9ffbd\\\", fontsize = 12] sample [label = '\", \"OV = \",\n                      as.character(round(mean(sample_data(), na.rm = TRUE), digits = 3)), \"']\", sep = \"\")\n      \n      # Create edge between box and circle.\n      # Annotate edge with n value.\n      n = length(sample_data())\n      diagram = paste(diagram, \" edge [minlen = 2] box->sample [label = '  n = \", n, \"', fontsize = 12, labeldistance = 5]}\", sep = \"\")\n      \n      return (grViz(diagram))\n    })\n    \n    null_mean_string = reactive({as.character(round(input$null_mu, digits = 3))})\n    alt_hypothesis_session <- alternate_hypotheses_1_sample_t_test_Server(id = \"alternate_hypothesis\", null_mean_string, \"d\")\n    \n    assumptions_1_sample_t_test_Server(id = \"assumptions\", sample_data)\n    \n    test_stat_session <- test_statistic_1_sample_t_test_Server(id = \"test_stat\", sample_data, null_mean_string, \"d\")\n    \n    p_value_session <- p_value_1_sample_t_test_Server(id = \"p_val\", test_stat_session$test_stat, sample_data, alt_hypothesis_session$alternate_hypothesis_choice)\n    \n    conclusion_1_sample_t_test_Server(id = \"conclusion\", p_value_session$p_val)\n    \n    confidence_interval_1_sample_t_test_Server(id = \"confidence_interval\", sample_data, null_mean_string, alt_hypothesis_session$alternate_hypothesis_choice)\n    \n  })\n    \n}","type":"text"},{"name":"R/ttest_paired_ui.R","content":"pairedTTestUI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    \n      \n    # Title Strip\n    fluidRow(\n      column(8,\n             HTML(\"<h1>Paired t-Test<\/h1>\"),\n      ),\n      column(4,\n             tags$style(HTML(paste0(\"\n              [id='\", ns(\"learning_text\"), \"'] {\n                font-size: 20px;\n                padding: 10px 20px;\n              }\n              \"))),\n             actionButton(ns(\"learning_text\"), \"What is a paired t-test?\", class = \"btn btn-primary\", style=\"color: #fff;\", width = \"100%\")\n      ),\n    ),\n    HTML(\"<br>\"),\n    \n    ############ SECTION: Input Data ############\n    load_data_paired_sample_UI(ns(\"loading_data\")),\n    \n    HTML(\"<br><br><br>\"),\n\n    # Conditional panel ensures that the rest of the exercise is displayed only if the data has been uploaded.\n    conditionalPanel(\n      condition = sprintf('output[\"%s\"]', ns(\"render_rest_of_exercise\")),\n\n      ############ SECTION: The NULL Hypothesis - Setting up the Box ############\n      fluidRow(\n        column(7,\n               tight_card(\n                 \"The 'NULL' Hypothesis - Setting up the Box\",\n\n                 p(\"We are going to use the box model to represent our null hypothesis.\"),\n\n                 accordion(\n\n                   # Step 1: Specify NULL Hypothesis\n                   accordion_panel(\n                     HTML(\"<b>Step 1) Specify NULL Hypothesis<\/b>\"),\n                     withMathJax(HTML(\"<p>\n                         The only things we need to do to set up the box in this test is to specify the sample data (which we have already done) and specify\n                         the null hypothesis.<br><br>\n\n                         For a paired t-test, the null hypothesis is that the difference between the average of condition 2 (\\\\(\\\\mu_2\\\\)) and condition 1\n                         (\\\\(\\\\mu_1\\\\)) is equal to some value we specify. We write \\\\(\\\\mu_2 - \\\\mu_1 \\\\) as \\\\(\\\\mu_d\\\\), where \\\\(d\\\\) stands for\n                         difference.<br><br>\n\n                         Hence, the null hypothesis is that the average population mean difference between condition 2 and condition 1 is equal to\n                         some value which we set below.\n                     <\/p>\")),\n                     fluidRow(\n                       column(7),\n                       column(2,\n                              withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>\\\\( H_0: \\\\) \\\\(\\\\mu_d = \\\\)<\/p>\"))\n                       ),\n                       column(3,\n                              numericInput(\n                                ns(\"null_mu\"),\n                                NULL,\n                                value = 0\n                              ),\n                       ),\n                     ),\n                   ),\n\n                   # Extra notes\n                   accordion_panel(\n                     HTML(\"<b>Extra Points<\/b>\"),\n                     withMathJax(HTML(\"<p>In case you are confused about where all the values in the diagram have come from, these come from the sample data that you previously\n                                   specified. In particular:\n                                  <ul>\n                                     <li>\\\\(s \\\\) represents the sample standard deviation. Unlike the 1-sample z-test which requires that the population standard\n                                       deviation is known, the 1-sample t-test removes this assumption, instead using the standard deviation of the sample and then later\n                                       the t-distribution to determine the p-value.<\/li>\n                                     <li>The value for \\\\(n \\\\) comes from the number of values in the sample chosen above.<\/li>\n                                     <li>The observed value (\\\\(\\\\text{OV} \\\\)) comes from the mean of the sample chosen above.<\/li>\n                                  <\/ul>\n                               <\/p>\"))\n                   )\n                 ),\n                 header_colour = \"#3179ae\"\n               )\n        ),\n        column(5,\n               tight_card(\n                 NULL,\n                 HTML(\"<center>\"),\n                 grVizOutput(ns(\"box_model\"), width = \"70%\", height = \"70%\"),\n                 HTML(\"<\/center>\")\n               ),\n        )\n      ),\n\n      HTML(\"<br><br><br>\"),\n\n      ########### SECTION: The Alternate Hypothesis ############\n      alternate_hypotheses_1_sample_t_test_UI(ns(\"alternate_hypothesis\")),\n      HTML(\"<br><br><br>\"),\n\n      ############ SECTION: Assumptions ############\n      assumptions_1_sample_t_test_UI(ns(\"assumptions\")),\n      HTML(\"<br><br><br>\"),\n\n      ############ SECTION: Test Statistic ############\n      test_statistic_1_sample_t_test_UI(ns(\"test_stat\")),\n      HTML(\"<br><br><br>\"),\n\n      ############ SECTION: p-value ############\n      p_value_1_sample_t_test_UI(ns(\"p_val\")),\n      HTML(\"<br><br><br>\"),\n\n      ############ SECTION:Conclusion ############\n      conclusion_1_sample_t_test_UI(ns(\"conclusion\")),\n      HTML(\"<br><br><br>\"),\n      \n      ############ SECTION: Conclusion (Confidence Interval) ############\n      confidence_interval_1_sample_t_test_UI(ns(\"confidence_interval\")),\n      \n      HTML(\"<br><br><br><br><br>\"),\n      \n    )\n\n  )\n}","type":"text"},{"name":"R/ttest_regression_srv.R","content":"regressionTTestServer <- function(id) {\n  \n  moduleServer(id, function(input, output, session) {\n    \n    ns <- session$ns\n    \n    ############################ Uploading Data Mechanism ############################# \n    \n    sample_data_session = load_data_regression_2_variable_Server(id = \"loading_data\")\n    \n    # Store the sample data.\n    data_x_axis = reactiveVal(NULL)\n    data_y_axis = reactiveVal(NULL)\n    \n    # Variable that is true when the data has been specified, meaning the rest of the exercise can commence\n    # This variable can be accessed by the ui conditional panel.\n    output$render_rest_of_exercise <- reactive({\n      !is.null(sample_data_session$data_x_axis())\n    })\n    \n    outputOptions(output, \"render_rest_of_exercise\", suspendWhenHidden = FALSE)\n    \n    observe({\n      val_x <- sample_data_session$data_x_axis()\n      val_y <- sample_data_session$data_y_axis()\n      \n      if (!is.null(val_x)) {\n        data_x_axis(val_x)\n      }\n      if (!is.null(val_y)) {\n        data_y_axis(val_y)\n      }\n    })\n    \n    ############################ Modal Intro ############################# \n    observeEvent(input$learning_text, {\n      showModal(modalDialog(\n        title = \"The Regression t-Test\",\n        fluidRow(\n          column(7,\n                 withMathJax(HTML(\"\n                <p>Remember Mr. Han from before? At a math conference, some of his colleagues were discussing that there is a linear relationship between the number\n                of hours a student spends studying and their test score. It certainly appears that there is a linear relationship between these variables when considering\n                the scatter plot on the right, but Mr. Han wants to formally test this using a hypothesis test.\n                <br><br>\n    \n                To do this, Mr. Han uses a regression t-test. A regression test is used to determine whether there is a significant relationship between two numerical \n                variables. In simple linear regression, we model this relationship using a straight line:\n                <br><br>\n       \n                <center>\n                \\\\(Y = \\\\beta_0 + \\\\beta_1X + \\\\epsilon \\\\)\n                <\/center>\n                <br>\n                \n                where:\n                 <ul>\n                    <li>\\\\(Y\\\\) is the dependent (response) variable.<\/li>\n                    <li>\\\\(X\\\\) is the independent (explanatory) variable.<\/li>\n                    <li>\\\\(\\\\beta_0\\\\) is the \\\\(Y\\\\)-intercept.<\/li>\n                    <li>\\\\(\\\\beta_1\\\\) is the slope/gradient (coefficient of \\\\(X\\\\)).<\/li>\n                    <li>\\\\(\\\\epsilon\\\\) is the residual error (error that the model doesn't explain).<\/li>\n                 <\/ul>\n               <\/p>\"))\n          ),\n          column(5,\n                 plotOutput(ns(\"intro_scatter_plot\"))\n                 \n          )\n        ),\n        fluidRow(\n          column(5,\n                 HTML(\"<br><br>\"),\n                 plotOutput(ns(\"intro_horizontal_line_plot\"))\n          ),\n          column(7,\n                 withMathJax(HTML(\"<p>\n                  The regression test specifically tests whether the slope \\\\(\\\\beta_1\\\\) is significantly different from zero. This is because, if \\\\(\\\\beta_1\\\\) were equal to\n                  0, then the regression line would be horizontal, indicating that there is no relationship between \\\\(X\\\\) and \\\\(Y\\\\) (see the example to the left).\n                  <br><br>\n                  \n                  Hence, the null hypothesis is that the slope is equal to zero. This is formulated as:\n                  <br><br>\n                  \n                  <center><p style='font-size: 16px'>\\\\( H_{0}: \\\\beta_1 = 0 \\\\)<\/p><\/center>\n                  \n                  In this example, Mr. Han is interested in whether there is any relationship between study hours and test scores (whether positive or negative), \n                  and so the alternate hypothesis is that the slope is not equal to 0. We write this as:\n                  <br><br>\n                  \n                  <center><p style='font-size: 16px'>\\\\( H_{1} : \\\\beta_1  \\\\neq 0 \\\\)<\/p><\/center>\n\n                  Unlike the other t-tests we have looked at, we will not motivate the regression test using the box model. This is because the box model is conceptually\n                  confusing when considering the regression test. That being said, all of the steps from the previous hypothesis tests are the same! We set the hypotheses\n                  (we already did this together above), check the test assumptions, find the test-statistic, find the p-value, and then compare this with our \n                  significance level.\n              <\/p>\"))\n          )\n        ),\n        fluidRow(\n          column(12,\n                 HTML(\"<br><p>\n               <b><span style='color: blue;'>Now it's off to you! <\/span><\/b>Together, we worked through the null and alternate hypotheses. Now you need to go through and \n               check the assumptions for a regression t-test, find the test statistic, and finally calculate the p-value. To continue with the study data example, in \n               the \\\"Input Sample Data\\\" section, select \\\"Pre-uploaded Data\\\" and then select the \\\"study_data\\\" data set.\n               <\/p>\")\n          )\n        ),\n        easyClose = TRUE,\n        footer = modalButton(\"Close\"),\n      ))\n    })\n    \n    # Plot of data\n    output$intro_scatter_plot = renderPlot({\n      plot(study_data$Minutes_Studied, study_data$Test_Score, xlab = \"Minutes Studied\", ylab = \"Test Score\", main = \"Study Data\")\n    })\n    \n    # Horizontal line plot\n    output$intro_horizontal_line_plot = renderPlot({\n      plot(1, type = \"n\",\n           xlim = c(0, 600),\n           ylim = c(0, 100),\n           xlab = \"Minutes Studied\",\n           ylab = \"Test Score\",\n           main = \"Hypothetical Horizontal Regression Line\")\n      \n      # Add a horizontal line at y = 75\n      abline(h = 50, col = \"red\", lwd = 2)\n    })\n    \n    # Alternate hypothesis (rendered) output.\n    output$alternate_hypothesis_output <- renderUI({\n      hypothesis = paste(\"<p style='font-size: 16px;'>\\\\( H_1: \\\\) \\\\(\\\\beta_1\")\n      \n      # Specify alternate hypothesis in reference to whether the user chooses to do a one-sided or two-sided test.\n      if (input$alternate_hypothesis_choice == 1) {\n        hypothesis = paste(hypothesis, \"\\\\neq 0 \\\\)<\/p>\")\n      } else if (input$alternate_hypothesis_choice == 2) {\n        hypothesis = paste(hypothesis, \">  0 \\\\)<\/p>\")\n      } else if (input$alternate_hypothesis_choice == 3) {\n        hypothesis = paste(hypothesis, \"<  0 \\\\)<\/p>\")\n      }\n      \n      return (\n        tagList(\n          HTML(\"<center>\"),\n          withMathJax(HTML(hypothesis)),\n          HTML(\"<\/center>\")\n        )\n      )\n    })\n    \n    make_scatter_plot <- function() {\n      plot(data_x_axis(), data_y_axis(), main = \"Scatter Plot\", xlab = \"X\", ylab = \"Y\")\n    }\n    output$assumption_linearity_scatter_plot <- renderPlot({make_scatter_plot()})\n    \n    make_residual_plot <- function() {\n      model <- lm(data_y_axis() ~ data_x_axis())\n      resids <- residuals(model)\n      plot(data_x_axis(), resids,\n           main = \"Residual Plot\",\n           xlab = \"X\",\n           ylab = \"Residuals\")\n      abline(h = 0, lty = 2, col = \"red\")\n    }\n    output$assumption_linearity_residual_plot <- renderPlot({make_residual_plot()})\n    output$assumption_homoscedasticity_residual_plot <- renderPlot({make_residual_plot()})\n    output$assumption_independence_residual_plot <- renderPlot({make_residual_plot()})\n    \n    # Residuals plotted by the data order. E.g., residual one is for the first (x,y) point, residual two for the second (x,y) point, etc.\n    output$ordered_residuals_plot <- renderPlot({\n      res <- residuals(lm(data_y_axis() ~ data_x_axis()))\n      plot(res, type = \"b\",\n           xlab = \"Observation Order\",\n           ylab = \"Residuals\",\n           main = \"Residuals vs Observation Order\")\n      abline(h = 0, col = \"red\", lty = 2)\n    })\n    \n    # QQ plot of the residuals\n    output$qqPlot <- renderPlot({\n      model <- lm(data_y_axis() ~ data_x_axis())\n      res <- residuals(model)\n      qqnorm(res)\n      qqline(res, col = \"red\", lwd = 2)\n    })\n    \n    # Expected value and standard error output.\n    output$ev_and_se_text <- renderUI({\n      \n      expected_value = withMathJax(\n        HTML(\"<p>Expected value under \\\\( H_0 \\\\):<\/p>\"),\n        HTML(\"$$\\\\begin{align*}\\\\mathbb{E}[\\\\widehat{\\\\beta}_1] &= 0 \\\\end{align*}$$\")\n      )\n      \n      # Fit linear model\n      model <- lm(data_y_axis() ~ data_x_axis())\n      residuals <- residuals(model)\n      RSS <- sum(residuals^2)\n      n <- length(data_y_axis())\n      df <- n - 2\n      s <- sqrt(RSS / df)\n      \n      residual_standard_error = withMathJax(\n        HTML(\"<p>Residual standard deviation:<\/p>\"),\n        HTML(paste0(\n          \"$$\\\\begin{align*}\",\n          \"s &= \\\\sqrt{\\\\frac{1}{n - 2} \\\\bigl((y_1 - \\\\widehat{y}_1)^2 + \\\\cdots + (y_n - \\\\widehat{y}_n)^2\\\\bigr)} \\\\\\\\\",\n          \"&= \\\\sqrt{\\\\frac{1}{\", n, \" - 2} \\\\times \", round(RSS, 3), \"} \\\\\\\\\",\n          \"&= \\\\sqrt{\\\\frac{\", round(RSS, 3), \"}{\", df, \"}} \\\\\\\\\",\n          \"&= \\\\sqrt{\", round(RSS / df, 3), \"} \\\\\\\\\",\n          \"&= \", round(s, 3),\n          \"\\\\end{align*}$$\"\n        ))\n      )\n      \n      s <- summary(model)$sigma\n      x_dev <- data_x_axis() - mean(data_x_axis())\n      SS_x <- sum(x_dev^2)\n      SE_b1 <- s / sqrt(SS_x)\n      \n      standard_error = withMathJax(\n        HTML(\"<p>Standard Error:<\/p>\"),\n        HTML(paste0(\n          \"$$\\\\begin{align*}\",\n          \"SE(\\\\widehat{\\\\beta}_1) &= \\\\frac{s}{\\\\sqrt{(x_1 - \\\\bar{x})^2  + \\\\cdots + (x_n - \\\\bar{x})^2}} \\\\\\\\\",\n          \"&= \\\\frac{\", round(s, 3), \"}{\\\\sqrt{\", round(SS_x, 3), \"}} \\\\\\\\\",\n          \"&= \\\\frac{\", round(s, 3), \"}{\", round(sqrt(SS_x), 3), \"} \\\\\\\\\",\n          \"&= \", round(SE_b1, 3),\n          \"\\\\end{align*}$$\"\n        ))\n      )\n      \n      return(\n        tagList(\n          expected_value, residual_standard_error, standard_error\n        )\n      )\n    })\n    \n    test_stat = reactiveVal(\"\")\n    \n    # Test statistic output.\n    output$test_statistic_calculation <- renderUI({\n      \n      # Calculate the test statistic.\n      x <- data_x_axis()\n      y <- data_y_axis()\n      model <- lm(y ~ x)\n      summary_model <- summary(model)\n      beta_hat <- coef(model)[\"x\"]\n      SE_beta_hat <- summary_model$coefficients[\"x\", \"Std. Error\"]\n      EV_beta_hat <- 0\n      t_stat <- (beta_hat - EV_beta_hat) / SE_beta_hat\n      test_stat(round(t_stat, 3))\n      \n      beta_hat_line = HTML(paste0(\n        \"<p>When calculating the linear regression line for the sample data, \",\n        \"$$\\\\widehat{\\\\beta}_1 = \", round(beta_hat,3), \"$$\",\n        \".<\/p>\"\n      ))\n      \n      t_stat = withMathJax(\n        HTML(paste0(\"$$\\\\begin{align*}\",\n                    \"t &= \\\\frac{\\\\widehat{\\\\beta}_1 - \\\\mathbb{E}[\\\\widehat{\\\\beta}_1]}{SE(\\\\widehat{\\\\beta}_1)} \\\\\\\\\",\n                    \"&= \\\\frac{\", round(beta_hat, 3), \" - \", EV_beta_hat, \"}{\", round(SE_beta_hat, 3), \"} \\\\\\\\\",\n                    \"&= \", round(t_stat, 3),\n                    \"\\\\end{align*}$$\"))\n      )\n      \n      additional_line = HTML(paste(\"<p style = 'text-align: left;'><span style='color: blue;'><i>The value for the test-statistic is \", round(test_stat(), 3), \". <\/i><\/span><\/p>\", sep = \"\"))\n      return(\n        tagList(\n          beta_hat_line,\n          HTML(\"<p>Now to calculate the test statistic:<\/p>\"),\n          t_stat,\n          additional_line\n        )\n      )\n    })\n    \n    p_val = reactiveVal(0)\n    df = reactiveVal(0)\n    \n    # P-value text output and calculation.\n    output$p_value_prelude <- renderUI({\n      \n      \n      \n      # General prelude text about what the p-value is.\n      first_string = HTML(paste(\"<p>The p-value is the probability of observing a test-statistic <b>more extreme that our test statistic of \",\n                                test_stat(), \n                                \".<\/b><\/p>\", \n                                sep = \"\"))\n      \n      df(length(data_x_axis())-2)\n      second_string = withMathJax(\n        HTML(\"<p>For a regression t-test, we set the degree of freedom equal to:<\/p>\"),\n        HTML(paste(\"$$\\\\begin{align*} \\\\text{df} &= n - 2\\\\\\\\\n                     &=\", length(data_x_axis()), \" - 2 \\\\\\\\\n                     &=\", df(),  \"\\\\end{align*}$$\", sep = \"\"))\n      )\n      \n      \n      # Specifically how to find the p-value (based upon alternate hypothesis).\n      third_string = \"<p>The test statistics fall on a standard normal curve. \"\n      if (input$alternate_hypothesis_choice == 1) {\n        negative_test_stat = as.character(-abs(as.numeric(test_stat())))\n        positive_test_stat = as.character(abs(as.numeric(test_stat())))\n        third_string = paste(third_string, \"As we are doing a two-sided alternate hypothesis, we are interested in finding the <b>area below \", negative_test_stat,\n                             \" and above \", positive_test_stat, \".<\/p><\/b>\", sep = \"\")\n      } else if (input$alternate_hypothesis_choice == 2){\n        third_string = paste(third_string, \"As we are doing a one-sided greater than alternate hypothesis, we are interested in finding the <b>area above \", test_stat(),\n                             \".<\/p><\/b>\", sep = \"\")\n      } else if (input$alternate_hypothesis_choice == 3){\n        third_string = paste(third_string, \"As we are doing a one-sided less than alternate hypothesis, we are interested in finding the <b>area below \", test_stat(),\n                             \".<\/p><\/b>\", sep = \"\")\n      }\n      third_string = HTML(third_string)\n      \n      # Calculate p-value.\n      p_val_local = 0\n      if (input$alternate_hypothesis_choice == 1) {\n        p_val_local = 2 * (1 - pt(abs(as.numeric(test_stat())), df()))\n      } else if (input$alternate_hypothesis_choice == 2) {\n        p_val_local = 1 - pt(as.numeric(test_stat()), df())\n      } else if (input$alternate_hypothesis_choice == 3) {\n        p_val_local = pt(as.numeric(test_stat()), df())\n      }\n      p_val(p_val_local)\n      \n      # String to output the p-value.\n      p_value = withMathJax(HTML(\"<p style='font-size: 16px; text-align: center;'>\\\\( p =\", as.character(round(p_val_local,5)) ,\"\\\\)<\/p>\"))\n      \n      return(\n        tagList(\n          first_string,\n          second_string,\n          third_string,\n          p_value\n        )\n      )\n      \n    })\n    \n    # Test statistic on curve to show p-value calculation.\n    output$test_stat_t_plot = renderPlot({\n      return(curve_shaded_test_stat(dt, list(df = df() - 1), as.numeric(test_stat()), input$alternate_hypothesis_choice))\n    })\n    \n    alpha = reactiveVal(0.05)\n    alpha_warning = reactiveVal(FALSE)\n    observeEvent(input$alpha_value, {\n      if (is.na(input$alpha_value) || input$alpha_value < 0 || input$alpha_value > 1) {\n        alpha(0.05)\n        alpha_warning(TRUE)\n      } else {\n        alpha(input$alpha_value)\n        alpha_warning(FALSE)\n      }\n    })\n    \n    # Error message for when the value for alpha is invalid.\n    output$significance_level_warning <- renderUI({\n      if (alpha_warning()) {\n        return(\n          HTML(\"<span style='color: red;'><p>Error: The value for α must be between 0 and 1.<\/p><\/span>\")\n        )\n      }\n    })\n    \n    # Hypothesis test output\n    output$final_conclusion_output <- renderUI({\n      \n      # Change > or < sign depending on whether the p-value is less than or greater than alpha.\n      math_line = withMathJax(\n        HTML(paste(\"$$\\\\begin{align*} \\\\alpha &> p \\\\\\\\\", as.character(alpha()), \" &> \", as.character(round(p_val(), 4)), \"\\\\end{align*}$$\", sep = \"\"))\n      )\n      conclusion_line = HTML(\"<span style='color: blue;'><p>As the p value is less than our significance level, we <b>reject the null hypothesis<\/b>.<\/p><\/span>\")\n      if (p_val() > alpha()) {\n        math_line = withMathJax(\n          HTML(paste(\"$$\\\\begin{align*} \\\\alpha &< p \\\\\\\\\", as.character(alpha()), \" &< \", as.character(round(p_val(), 4)), \"\\\\end{align*}$$\", sep = \"\"))\n        )\n        conclusion_line = HTML(\"<span style='color: blue;'><p>As the p value is greater than our significance level, we <b>accept the null hypothesis<\/b>.<\/p><\/span>\")\n      }\n      \n      return(\n        tagList(\n          math_line,\n          conclusion_line\n        )\n      )\n    })\n    \n    # Process confidence level text input.\n    confidence_level = reactiveVal(0.95)\n    alpha_warning_confidence_lvel = reactiveVal(FALSE)\n    observeEvent(input$confidence_level, {\n      if (is.na(input$confidence_level) || input$confidence_level <= 0 || input$confidence_level >= 1) {\n        confidence_level(0.95)\n        alpha_warning_confidence_lvel(TRUE)\n      } else {\n        confidence_level(input$confidence_level)\n        alpha_warning_confidence_lvel(FALSE)\n      }\n    })\n    \n    # Error message for when the value for alpha is invalid.\n    output$confidence_level_warning <- renderUI({\n      if (alpha_warning_confidence_lvel()) {\n        return(\n          HTML(\"<span style='color: red;'><p>Error: The value for confidence level must be between 0 and 1.<\/p><\/span>\")\n        )\n      }\n    })\n    \n    output$confidence_level_output = renderUI({\n      \n      x = data_x_axis()\n      y = data_y_axis()\n      \n      n = length(x)\n      conf_level = as.numeric(confidence_level())\n      alpha = 1 - conf_level\n      \n      # Fit linear model\n      fit = lm(y ~ x)\n      slope_est = coef(fit)[2]                 # slope estimate\n      se_slope = summary(fit)$coefficients[2,2] # standard error of slope\n      df = n - 2                                # degrees of freedom for slope\n      \n      formula_line = substitution_line = answer_line = conclusion_text = NULL\n      \n      # --- CI based on alternative hypothesis ---\n      if (input$alternate_hypothesis_choice == 1) {\n        # Two-sided\n        t_val = qt(1 - alpha/2, df = df)\n        lower = slope_est - t_val * se_slope\n        upper = slope_est + t_val * se_slope\n        \n        formula_line = \"$$CI = (\\\\widehat{\\\\beta}_1) \\\\pm t_{\\\\alpha/2, df} \\\\cdot SE(\\\\widehat{\\\\beta}_1)$$\"\n        substitution_line = paste0(\"$$CI = \", round(slope_est,4),\n                                   \" \\\\pm t_{\", round(alpha/2,4), \", \", round(df,2), \"} \\\\times \",\n                                   round(se_slope,4), \"$$\")\n        answer_line = paste0(\"$$CI = (\", round(lower,4), \", \", round(upper,4), \")$$\")\n        \n        if (0 < lower || 0 > upper) {\n          conclusion_text = \"As 0 (no linear association) is outside the confidence interval, we <b>reject the null hypothesis<\/b>.\"\n        } else {\n          conclusion_text = \"As 0 (no linear association) is inside the confidence interval, we <b>fail to reject the null hypothesis<\/b>.\"\n        }\n        \n      } else if (input$alternate_hypothesis_choice == 2) {\n        # Greater than (slope > 0)\n        t_val = qt(1 - alpha, df = df)\n        lower = slope_est - t_val * se_slope\n        \n        formula_line = \"$$CI = (\\\\widehat{\\\\beta}_1 - t_{\\\\alpha, df} \\\\cdot SE(\\\\widehat{\\\\beta}_1), \\\\infty)$$\"\n        substitution_line = paste0(\"$$CI = (\", round(slope_est,4),\n                                   \" - t_{\", round(alpha,4), \", \", round(df,2), \"} \\\\times \",\n                                   round(se_slope,4), \", \\\\infty)$$\")\n        answer_line = paste0(\"$$CI = (\", round(lower,4), \", \\\\infty)$$\")\n        \n        if (0 < lower) {\n          conclusion_text = \"As 0 is below the confidence interval, we <b>reject the null hypothesis<\/b>.\"\n        } else {\n          conclusion_text = \"As 0 is inside the confidence interval, we <b>fail to reject the null hypothesis<\/b>.\"\n        }\n        \n      } else if (input$alternate_hypothesis_choice == 3) {\n        # Less than (slope < 0)\n        t_val = qt(1 - alpha, df = df)\n        upper = slope_est + t_val * se_slope\n        \n        formula_line = \"$$CI = (-\\\\infty, \\\\widehat{\\\\beta}_1 + t_{\\\\alpha, df} \\\\cdot SE(\\\\widehat{\\\\beta}_1))$$\"\n        substitution_line = paste0(\"$$CI = (-\\\\infty, \", round(slope_est,4),\n                                   \" + t_{\", round(alpha,4), \", \", round(df,2), \"} \\\\times \",\n                                   round(se_slope,4), \")$$\")\n        answer_line = paste0(\"$$CI = (-\\\\infty, \", round(upper,4), \")$$\")\n        \n        if (0 > upper) {\n          conclusion_text = \"As 0 is above the confidence interval, we <b>reject the null hypothesis<\/b>.\"\n        } else {\n          conclusion_text = \"As 0 is inside the confidence interval, we <b>fail to reject the null hypothesis<\/b>.\"\n        }\n      }\n      \n      # --- Build UI ---\n      tagList(\n        withMathJax(HTML(formula_line)),\n        withMathJax(HTML(substitution_line)),\n        withMathJax(HTML(answer_line)),\n        HTML(paste0(\"<span style='color: blue;'><p>\", conclusion_text, \"<\/p><\/span>\"))\n      )\n    })\n    \n    \n\n    \n  })\n    \n}","type":"text"},{"name":"R/ttest_regression_ui.R","content":"regressionTTestUI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    # Title Strip\n    fluidRow(\n      column(8,\n             HTML(\"<h1>Regression t-Test<\/h1>\"),\n      ),\n      column(4,\n             tags$style(HTML(paste0(\"\n              [id='\", ns(\"learning_text\"), \"'] {\n                font-size: 20px;\n                padding: 10px 20px;\n              }\n              \"))),\n             actionButton(ns(\"learning_text\"), \"What is a Regression t-Test?\", class = \"btn btn-primary\", style=\"color: #fff;\", width = \"100%\")\n      ),\n    ),\n    HTML(\"<br>\"),\n    \n    load_data_regression_2_variable_UI(ns(\"loading_data\")),\n    \n    HTML(\"<br><br><br>\"),\n    \n    # Conditional panel ensures that the rest of the exercise is displayed only if the data has been uploaded.\n    conditionalPanel(\n      condition = sprintf('output[\"%s\"]', ns(\"render_rest_of_exercise\")),\n      \n      ############ SECTION: The Null and Alternate Hypotheses ############\n      fluidRow(\n        column(7,\n               tight_card(\n                 \"The Null and Alternate Hypotheses\",\n                 withMathJax(HTML(\"<p>\n                                 When looking at the other t-tests, we motivated them using the box model. While you could motivate the regression test\n                                 using a box model, it is much trickier, and could lead to increased confusion. Instead, we will state the null hypothesis outright.\n                                 <br><br>\n                                 \n                                 A linear regression line, has the form: \\\\( Y = \\\\beta_0 + \\\\beta_1X + \\\\epsilon \\\\)\n                                 <br>\n                                 \n                                 Here:\n                                 <ul>\n                                    <li>\\\\(\\\\beta_0\\\\) is the \\\\(Y\\\\)-intercept.<\/li>\n                                    <li>\\\\(\\\\beta_1\\\\) is the gradient (coefficient of \\\\(X\\\\)).<\/li>\n                                    <li>\\\\(\\\\epsilon\\\\) is the residual error (error that the model doesn't explain).<\/li>\n                                 <\/ul>\n  \n                                 The <b>null hypothesis is \\\\(\\\\beta_1 = 0\\\\)<\/b>. In other words, that there is <b>no linear relationship<\/b> between \\\\(X\\\\) and \\\\(Y\\\\).\n                                 \n                                 Similar to the other tests, you can choose which type of alternate hypothesis you want:\n                                 <\/p>\")),\n                 radioButtons(\n                   inputId = ns(\"alternate_hypothesis_choice\"),\n                   label = NULL,\n                   choices = list(\n                     \"Two Sided\" = 1,\n                     \"One Sided (greater than)\" = 2,\n                     \"One Sided (less than)\" = 3\n                   )\n                 ),\n                 header_colour = \"#3179ae\"\n               )\n        ),\n        column(5,\n               tight_card(\n                 NULL,\n                 HTML(\"<p><b>Null Hypothesis<\/b><\/p>\"),\n                 HTML(\"<center>\"),\n                 withMathJax(HTML(\"<p style='font-size: 16px;'>\\\\( H_0: \\\\) \\\\( \\\\beta_1 = 0 \\\\)<\/p>\")),\n                 HTML(\"<\/center>\"),\n                 HTML(\"<p><b>Alternate Hypothesis<\/b><\/p>\"),\n                 uiOutput(ns('alternate_hypothesis_output'))\n               )\n        )\n      ),\n      \n      HTML(\"<br><br><br>\"),\n      \n      ############ SECTION: Assumptions ############\n      fluidRow(\n        column(12,\n               tight_card(\n                 \"Assumptions\",\n                 HTML(\"<p>For the hypothesis test to be valid, we need to check the following assumptions:<\/p>\"),\n                 \n                 accordion(\n                   open = FALSE,\n                   \n                   # Assumption 1: Linearity\n                   accordion_panel(\n                     HTML(\"<b>Assumption 1: Linearity<\/b>\"),\n                     withMathJax(HTML(\"<p>The <b>relationship<\/b> between \\\\(X\\\\) and \\\\(Y\\\\) <b>is linear<\/b>.<\/p>\")),\n                     withMathJax(HTML(\"<p><span style='color: blue;'><b>How do we check?<\/b><\/span> \n                                \n                                      <ul>\n                                        <li>Look at a scatterplot of \\\\(X\\\\) vs \\\\(Y\\\\). There should be a straight-line trend (check the graph on the left below).<\/li>\n                                        <li>Look at a residual plot for the linear equation where \\\\(X\\\\) is the independent variable and \\\\(Y\\\\) is the dependent variable.\n                                            It should show homoscedasticity with no pattern (check the graph on the right below).<\/li>\n                                      <\/ul>\n                                     <\/p>\")),\n                     fluidRow(\n                       column(6,\n                              plotOutput(ns(\"assumption_linearity_scatter_plot\"))\n                       ),\n                       column(6,\n                              plotOutput(ns(\"assumption_linearity_residual_plot\"))\n                       ),\n                     )\n                   ),\n                   \n                   # Assumption 2: Homoscedasticity\n                   accordion_panel(\n                     HTML(\"<b>Assumption 2: Homoscedasticity<\/b>\"),\n                     withMathJax(HTML(\"<p>The second assumption is that the residuals show <b>homoscedasticity<\/b>, that is, the residuals have <b>constant varaince<\/b> across\n                                           \\\\(X\\\\).<\/p>\")),\n                     HTML(\"<p><span style='color: blue;'><b>How do we check?<\/b><\/span><br><\/p>\"),\n                     HTML(\"<p><ul>\n                                        <li>Residual plot: The spread of the residuals should be equal (check the graph below).<\/li>\n                                      <\/ul><\/p>\"),\n                     HTML(\"<center>\"),\n                     plotOutput(ns(\"assumption_homoscedasticity_residual_plot\"), width = \"50%\"),\n                     HTML(\"<\/center>\")\n                   ),\n                   \n                   # Assumption 3: Normality\n                   accordion_panel(\n                     HTML(\"<b>Assumption 3: Normality<\/b>\"),\n                     withMathJax(HTML(\"<p>The third assumption is that the residuals should be <b>approximately normally distributed<\/b>.<br><br>\n                                          \n                                          <span style='color: blue;'><b>How do we check?<\/b><\/span><br><br>\n                                          \n                                          First, a bit of context. The reason why we care about this assumption is because the regression t-test relies on the sample distribution of\n                                          the slope \\\\(\\\\beta_1\\\\) being approximately normal.<br><br>\n                                          \n                                          However, lucky for us, the CLT tell us that the sampling distribution will approach normality regardless of the residual distribution, \n                                          provided the sample size is large enough.<br><br>\n                                          \n                                          The reason we are interested in checking that the residuals are normally distributed is that we may be unsure as to whether the CLT applies.\n                                          For example, we may be unsure whether we have enough points for the CLT to apply in our circumstance. If we see that the residuals are \n                                          normally distributed, we can be more confident that the CLT applies.<br><br>\n                                          \n                                          There are two main ways to check this assumption:\n                                          \n                                          <ul>\n                                            <li>QQ-plot: see if the residuals follow the diagonal QQ-line (see below).<\/li>\n                                            <li>Number of points: You can make reference to the sample size when making your decision about this assumption. For example, if you\n                                            see some slight deviations in normality (when looking at the qq-plot), but have a large sample size, you have more confidence that \n                                            the CLT will apply.<\/li>\n                                          <\/ul>\n                                      <\/p>\")),\n                     HTML(\"<center>\"),\n                     plotOutput(ns(\"qqPlot\"), width = \"50%\"),\n                     HTML(\"<\/center>\")\n                   ),\n                   \n                   # Assumption 4: Independence of Residuals\n                   accordion_panel(\n                     HTML(\"<b>Assumption 4: Independence of Residuals<\/b>\"),\n                     HTML(\"<p>The second assumption is the <b>independence of residuals<\/b>. The assumption is that the residuals are unrelated to each other.<\/p>\"),\n                     HTML(\"<p><span style='color: blue;'><b>How do we check?<\/b><\/span><br><\/p>\"),\n                     HTML(\"<p>There are some advanced methods used to detect this. Two methods that you could use:\n                                      <ul>\n                                        <li>Residual plot against observation order: This is a plot of residuals in the order the data was collected or indexed. If we see a random\n                                        scatter of points, this suggests independence. On the other hand, patterns, trends or clusters could suggest dependence (check the graph on the \n                                        left below).<\/li>\n                                        <li>Standard residual plot: If the residuals show a systematic shape or wave, it could suggest dependence, that is, the residuals are not\n                                        independent (check graph on the right below).<\/li>\n                                      <\/ul><\/p>\"),\n                     fluidRow(\n                       column(6,\n                              plotOutput(ns(\"ordered_residuals_plot\"))\n                       ),\n                       column(6,\n                              plotOutput(ns(\"assumption_independence_residual_plot\"))\n                       )\n                     )\n                   )\n                   \n                 ),\n                 header_colour = \"#3179ae\"\n               )\n        )\n      ),\n      \n      HTML(\"<br><br><br>\"),\n      \n      ############ SECTION: Test Statistic ############\n      fluidRow(\n        column(12,\n               tight_card(\n                 \"Test Statistic\",\n                 fluidRow(\n                   column(6,\n                          withMathJax(HTML(\"<p><b>Step 1) Calculate Expected Value (\\\\(\\\\mathbb{E}\\\\)) and Standard Error (\\\\(\\\\text{SE}\\\\))<\/b><\/p>\")),\n                          uiOutput(ns(\"ev_and_se_text\"))\n                   ),\n                   column(6,\n                          HTML(\"<p><b>Step 2) Test Statistic Calculation<\/b><\/p>\"),\n                          uiOutput(ns(\"test_statistic_calculation\"))\n                   )\n                 ),\n                 header_colour = \"#3179ae\"\n               )\n        )\n        \n      ),\n      \n      HTML(\"<br><br><br>\"),\n      \n      ############ SECTION: Test p-value ############\n      fluidRow(\n        column(6,\n               tight_card(\n                 \"p-value\",\n                 uiOutput(ns(\"p_value_prelude\")),\n                 header_colour = \"#3179ae\"\n               )\n        ),\n        column(6,\n               tight_card(\n                 NULL,\n                 HTML(\"<center>\"),\n                 plotOutput(ns(\"test_stat_t_plot\"), width = \"100%\", heigh = \"325px\"),\n                 HTML(\"<\/center>\"),\n               )\n        )\n      ),\n      \n      HTML(\"<br><br><br>\"),\n      \n      ############ SECTION: Conclusion (p-value) ############\n      fluidRow(\n        column(12,\n               tight_card(\n                 \"Conclusion (p-value)\",\n                 \n                 fluidRow(\n                   # Section to enter significance level.\n                   column(6,\n                          HTML(\"<p><b>Step 1) What is your significance level<\/b>?<\/p>\"),\n                          \n                          # Space to enter significance value.\n                          fluidRow(\n                            column(1,\n                                   withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>\\\\( \\\\alpha = \\\\)<\/p>\"))\n                            ),\n                            column(3,\n                                   numericInput(\n                                     ns(\"alpha_value\"),\n                                     NULL,\n                                     value = 0.05,\n                                     min = 0,\n                                     max = 1,\n                                     width = \"100%\"\n                                   ),\n                            ),\n                          ),\n                          uiOutput(ns(\"significance_level_warning\")),\n                   ),\n                   \n                   # Section to provide final result.\n                   column(6,\n                          HTML(\"<p><b>Step 2) Final Conclusion<\/b><\/p>\"),\n                          uiOutput(ns(\"final_conclusion_output\"))\n                   )\n                 ),\n                 header_colour = \"#3179ae\"\n               )\n        ),\n      ),\n      \n      HTML(\"<br><br><br>\"),\n      \n      ############ SECTION: Confidence Interval ############\n      fluidRow(\n        column(12,\n               tight_card(\n                 \"Conclusion (Confidence Interval)\",\n                 HTML(\"<p>\n                       A confidence interval in a regression test gives a range of values for the true population slope that are consistent with the observed data at the chosen\n                       confidence level. In informal terms, we can think of this as the range of plausible values for the effect of the predictor on the response.\n                       <br><br>\n\n                       We can also use the confidence interval to guide hypothesis testing: if 0 (representing no linear association between predictor and response) does not \n                       lie within the confidence interval, then we reject the null hypothesis. If 0 does lie within the interval, we do not reject the null.\n                       <\/p>\"),\n                 fluidRow(\n                   column(6,\n                          HTML(\"<p><b>Step 1) What is your confidence level<\/b>?<\/p>\"),\n                          \n                          fluidRow(\n                            column(1,\n                                   withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>\\\\( \\\\alpha = \\\\)<\/p>\"))\n                            ),\n                            column(3,\n                                   numericInput(\n                                     ns(\"confidence_level\"),\n                                     NULL,\n                                     value = 0.95,\n                                     min = 0,\n                                     max = 1,\n                                     width = \"100%\"\n                                   ),\n                            ),\n                          ),\n                          uiOutput(ns(\"confidence_level_warning\")),\n                   ),\n                   column(6,\n                          HTML(\"<p><b>Step 2) Final Conclusion<\/b><\/p>\"),\n                          uiOutput(ns(\"confidence_level_output\")),\n                   )\n                 ),\n                 header_colour = \"#3179ae\"\n               )\n        ),\n      ),\n\n      HTML(\"<br><br><br><br><br><br>\")\n      \n    )\n\n  )\n}","type":"text"},{"name":"R/ttest_t_curve_motivation_srv.R","content":"tCurveMotivationServer <- function(id) {\n  \n  moduleServer(id, function(input, output, session) {\n    \n    ns <- session$ns\n    \n    output$changing_df_graph <- renderPlot({\n      par(mar = c(4,0,0,0)) # no margins\n      \n      x <- seq(-4, 4, length.out = 100)\n      y_t <- dt(x, df = input$df_slider)\n      y_norm <- dnorm(x, mean = 0, sd = 1)\n      \n      # Determine y-axis limits so t curve fits fully\n      ylim <- range(y_t, y_norm)\n      \n      # Plot t-distribution curve in black solid line\n      plot(x, y_t, type = \"l\", col = \"black\", lwd = 1,\n           ylab = \"\", xlab = \"\", axes = FALSE, ylim = ylim)\n      \n      # Add x-axis with labels\n      axis(1, col = \"black\")\n      \n      # Add normal curve if requested - red dashed line\n      if (input$display_normal_curve) {\n        lines(x, y_norm, col = \"red\", lwd = 1, lty = \"dashed\")\n      }\n    })\n    \n    output$test_stat_normal_plot = renderPlot({\n      return(curve_shaded_test_stat(dnorm, list(mean = 0, sd = 1), as.numeric(input$test_statistic_input), 1))\n    })\n\n    output$test_stat_t_plot = renderPlot({\n      return(curve_shaded_test_stat(dt, list(df=input$df_slider_demo_2), as.numeric(input$test_statistic_input), 1))\n    })\n\n    output$p_value_normal_curve = renderUI({\n      p_val = 2 * (1 - pnorm(abs(as.numeric(input$test_statistic_input))))\n      p_value = withMathJax(HTML(\"<p style='font-size: 16px; text-align: center;'>\\\\( p =\", as.character(round(p_val,5)) ,\"\\\\)<\/p>\"))\n      return(p_value)\n    })\n\n    output$p_value_t_curve = renderUI({\n      p_val = 2 * (1 - pt(abs(as.numeric(input$test_statistic_input)), df = input$df_slider_demo_2))\n      p_value = withMathJax(HTML(\"<p style='font-size: 16px; text-align: center;'>\\\\( p =\", as.character(round(p_val,5)) ,\"\\\\)<\/p>\"))\n      return(p_value)\n    })\n    \n  \n    \n\n  })\n    \n}","type":"text"},{"name":"R/ttest_t_curve_motivation_ui.R","content":"tCurveMotivationUI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    \n    HTML(\"<h1>Introducing the t-Distribution (Motivation)<\/h1>\"),\n    \n    ############ SECTION: When we don't know the population sd! ############\n    fluidRow(\n        column(12,\n               tight_card(\n                   \"When we don't know the population sd!\",\n                   withMathJax(\n                     HTML(\"\n                        <p style='margin-top: 0.75rem; margin-bottom: 0.75rem; line-height: 1.5;'>\n                          When determining the standard error (SE) in the 1-sample z-test section, \n                          we assumed that the <b>population standard deviation (denoted by \\\\(\\\\sigma\\\\)) is known<\/b>:\n                        <\/p>\n                      \"),\n                     HTML(\"$$\\\\begin{align*} \\\\text{SE} &= \\\\frac{\\\\color{red}{\\\\sigma}}{\\\\sqrt{n}} \\\\end{align*}$$\"),\n                     HTML(\"\n                        <p style='margin-top: 0.75rem; margin-bottom: 0.75rem; line-height: 1.5;'>\n                          However, in practice, the population standard deviation is usually unknown. \n                          Hence, we often use the <b>sample standard deviation (denoted by \\\\(s\\\\)) instead<\/b>:\n                        <\/p>\n                      \"),\n                     HTML(\"$$\\\\begin{align*} \\\\hat{\\\\text{SE}} &= \\\\frac{\\\\color{red}{s}}{\\\\sqrt{n}} \\\\end{align*}$$\"),\n                     HTML(\"\n                        <p style='margin: 0; line-height: 1.5;'>\n                          One observation is that when we substitute the population standard deviation for the sample standard deviation, \n                          we now write \\\\(\\\\text{SE}\\\\) instead of \\\\(\\\\hat{\\\\text{SE}}\\\\). \n                          The \\\\(\\\\hat{}\\\\) represents that this standard error is an estimate. \n                          We don’t have the true \\\\(\\\\text{SE}\\\\) anymore, as we are using the sample, \n                          which is a subset of the population.<br><br>\n                  \n                          As the sample size increases, the estimated standard error (\\\\(\\\\hat{\\\\text{SE}}\\\\)) \n                          will converge to the population standard error (\\\\(\\\\text{SE}\\\\)). \n                          Conceptually, this is because as the sample becomes larger, \n                          it is more representative of the population. \n                          Also, the above is only true if we are doing unbiased sampling!\n                        <\/p>\n                      \")\n                   ),\n                   header_colour = \"#3179ae\"\n               )\n        )\n    ),\n    \n\n    HTML(\"<br><br>\"),\n\n    ############ SECTION: Introducing the t-curve. ############\n    fluidRow(\n\n      column(6,\n             tight_card(\n                \"Introducing the t-curve\",\n                withMathJax(\n                  HTML(\n                    \"<p>\n                        Firstly, let’s remind ourselves of the test statistic (\\\\(\\\\text{TS}\\\\)) calculation for a 1-sample z-test:\n                    <\/p>\"\n                  ),\n                  HTML(\"$$\\\\begin{align*} \\\\text{Test Statistic (TS)} &= \\\\frac{\\\\text{OV} - \\\\text{EV}}{\\\\color{red}{\\\\text{SE}}} \\\\end{align*}$$\"),\n                  HTML(\n                    \"<p>\n                        As a reminder, \\\\(\\\\text{OV}\\\\) stands for observed value and \\\\(\\\\text{EV}\\\\) stands for expected value. As mentioned in the above section,\n                        the \\\\(\\\\text{SE}\\\\) (indicated in red) requires that the population standard deviation is known. When this is not known, we can instead use\n                        the estimate standard error (using the sample’s standard deviation):\n                    <\/p>\"\n                  ),\n                  HTML(\"$$\\\\begin{align*} \\\\text{Test Statistic (TS)} &= \\\\frac{\\\\text{OV} - \\\\text{EV}}{\\\\color{red}{\\\\hat{\\\\text{SE}}}} \\\\end{align*}$$\"),\n                  HTML(\"\n                    <p>\n                       In both cases above, the test statistic formulas look the same. The only difference is that the latter one has an estimate for \\\\(\\\\text{SE}\\\\)\n                       (i.e. \\\\(\\\\hat{\\\\text{SE}}\\\\)). Hence, we  claim that the second test statistic has extra variability because of the uncertainty surrounding\n                       \\\\(\\\\hat{\\\\text{SE}}\\\\).<br><br>\n\n                       How do we account for this extra variability? We adjust the method in which the p-value is found. Hence, to account for this extra variability,\n                       like the 1-sample z-test, which uses a normal curve to find the p-value, we use the t-curve. The t-curve (or t-distribution) is similar in\n                       appearance to the normal curve, except it contains an extra parameter called degrees of freedom, which adjusts the ‘fatness’ of the curve’s tails.\n                       This is evident when playing with the app to the right. When degrees of freedom increases, the tail fatness decreases. You can also see that\n                       as the degrees of freedom value increases, the curve approaches the normal distribution.\n                    <\/p>\n                  \")\n                ),\n                header_colour = \"#3179ae\"\n             ),\n      ),\n      column(6,\n             primary_card(\n                \"Demonstration\",\n                HTML(\"<p>The slider below changes the degrees of freedom of the red t-curve in the graph below.<\/p>\"),\n                fluidRow(\n                  column(8,\n                         sliderInput(\n                           ns(\"df_slider\"),\n                           NULL,\n                           min = 1,\n                           max = 25,\n                           value = 1),\n                  ),\n                  column(4,\n                         checkboxInput(ns(\"display_normal_curve\"), \"Display normal curve\", TRUE),\n                  )\n                ),\n                plotOutput(ns(\"changing_df_graph\"), width = \"100%\", height = \"300px\"),\n                header_colour = \"#3179ae\"\n             )\n      )\n    ),\n\n    HTML(\"<br><br><br>\"),\n\n    ############ SECTION: Introducing the t-curve. ############\n    fluidRow(\n\n      column(6,\n             tight_card(\n               \"T-Distribution and P-Values\",\n               withMathJax(\n                 HTML(\n                   \"<p>\n                        Previously, it was mentioned that the parameter called “degrees of freedom” adjusts the ‘fatness’ of the curve’s tails. This can be easily\n                        verified in the app above when setting the slider to 1 and then 10. At 1 degree of freedom, the red t-curve has its tails well and truly above\n                        the dashed normal curve. However, when looking at 10 degrees of freedom, the red t-curve’s tails have shrunk to be closer to that of the dashed\n                        normal curve.<br><br>\n\n                        There is a very logical reason for this! Recall from the ‘1-sample z-test’ exercise that when it comes to finding the p-value, we plot our test\n                        statistic and find the area under the curve covering the shaded region. If we have a p-value below our significance level (which is typically\n                        \\\\(\\\\alpha = 0.05\\\\)), we reject the null hypothesis.<br><br>\n\n                        As mentioned previously, if we do not have the population standard deviation, we need to account for the extra variability introduced by using\n                        the sample standard deviation. Degrees of freedom allow us to do just that! The value of degrees of freedom is directly linked to sample size,\n                        meaning larger degrees of freedom are associated with larger sample sizes. When degrees of freedom are equal to 1, this indicates that our sample\n                        is tiny (likely contains only 2 points), meaning there is lots of variability/uncertainty, and that is why the tails of the t-curve are so fat.\n                        The result of this is that the area under the curve will be much larger, meaning that a more extreme test statistic is needed to reject the null\n                        hypothesis.<br><br>\n\n                        On the other hand, when degrees of freedom are equal to a larger value (such as 25), the t-curve tails appear much more closely aligned with the\n                        normal curve’s tails. This is because we are now taking a much larger sample, and there is less variability to account for.<br><br>\n\n                        The demo to the right allows you to compare the p-values from a normal and t-distribution. You can see that for low values of degrees of freedom,\n                        the p-value is much larger than that of the normal distribution. However, as you increase degrees of freedom, the p-values become more similar.\n                    <\/p>\"\n                 )\n               ),\n               header_colour = \"#3179ae\"\n             )\n      ),\n      column(6,\n             primary_card(\n               title = \"Demonstration\",\n               HTML(\"<p>Comparison of the p-values for a two-sided alternate hypothesis test using a normal and t-curve.<\/p>\"),\n               fluidRow(\n                 column(4,\n                        numericInput(\n                          ns(\"test_statistic_input\"),\n                          \"Enter Test Statistic:\",\n                          value = 1\n                        )\n                 ),\n                 column(8,\n                        sliderInput(\n                          ns(\"df_slider_demo_2\"),\n                          \"Change Degree of Freedom (T-Curve):\",\n                          min = 1,\n                          max = 50,\n                          value = 1),\n                 )\n               ),\n               fluidRow(\n                 column(6,\n                    HTML(\"<h5><center><b>Normal Curve (z-tests)<\/b><\/center><\/h5>\"),\n                    plotOutput(ns(\"test_stat_normal_plot\"), width = \"100%\", heigh = \"250px\"),\n                    uiOutput(ns(\"p_value_normal_curve\"))\n                 ),\n                 column(6,\n                    HTML(\"<h5><center><b>T-Curve (t-tests)<\/b><\/center><\/h5>\"),\n                    plotOutput(ns(\"test_stat_t_plot\"), width = \"100%\", heigh = \"250px\"),\n                    uiOutput(ns(\"p_value_t_curve\"))\n                 )\n               ),\n               header_colour = \"#3179ae\"\n             )\n      )\n    ),\n\n    HTML(\"<br><br><br>\"),\n\n    ############ SECTION: Conclusion ############\n    fluidRow(\n      column(12,\n             tight_card(\n               \"Conclusion\",\n               HTML(\"<p>\n                  The purpose of this exercise was to develop a conceptual understanding of what the t-distribution is and why we need it. We did this through discussing\n                  the 1-sample z-test, and specifically, how things change when we don't know the population standard deviation. I have left some things vague (such as\n                  how we know which value to set degrees of freedom to), but we will go into greater detail in further exercises.\n              <\/p>\"),\n               header_colour = \"#3179ae\"\n             )\n      )\n    ),\n    \n    HTML(\"<br><br><br>\"),\n  )\n}","type":"text"},{"name":"R/utility_generic_plotting_functions.R","content":"# Function to create a curve and shade the region corresponding to the test statistic and tail.\n# Arguments:\n#   function_stat: the function to plot (e.g. dnorm is normal density curve, dt is t-curve).\n#   stat_function_args: list with the arguments needed to plot the stat function (e.g. for a standard normal curve, list(mean = 0, sd = 1)).\n#   test_stat: test statistic as a number.\n#   alternate_hypothesis_choice: 1 denotes both upper and lower tail, 2 denotes lower tail, 3 denotes upper tail\ncurve_shaded_test_stat <- function(function_stat, stat_function_args, test_stat, alternate_hypothesis_choice) {\n  \n  # Define the plots lowest and highest x-value.\n  lower_xlimit_plot = -3.5\n  upper_xlimit_plot = 3.5\n  if (alternate_hypothesis_choice == 1 && abs(test_stat) > upper_xlimit_plot) {\n    lower_xlimit_plot = -abs(test_stat) - 1\n    upper_xlimit_plot = abs(test_stat) + 1\n  } else if (test_stat < lower_xlimit_plot) {\n    lower_xlimit_plot = test_stat - 1\n  } else if (test_stat > upper_xlimit_plot) {\n    upper_xlimit_plot = test_stat + 1\n  }\n  \n  # Generate x and y values for the curve\n  x_vals <- seq(lower_xlimit_plot, upper_xlimit_plot, length.out = 1000)\n  y_vals <- do.call(function_stat, c(list(x_vals), stat_function_args))\n  \n  # Plot the curve\n  par(mar = c(4, 0.5, 0.5, 0.5))\n  plot(x_vals, y_vals, type = \"l\", lwd = 2, col = \"black\",\n       xlab = \"\", ylab = \"\", yaxt = \"n\", bty = \"n\", axes = TRUE)\n  axis(1)\n  \n  # Shade areas depending on hypothesis\n  \n  # Two-tailed test: shade both sides\n  if (alternate_hypothesis_choice == 1) {\n    x_shade1 <- x_vals[x_vals <= -abs(test_stat)]\n    y_shade1 <- do.call(function_stat, c(list(x_shade1), stat_function_args))\n    polygon(c(x_shade1, rev(x_shade1)),\n            c(y_shade1, rep(0, length(y_shade1))),\n            col = rgb(1, 0, 0, 0.5), border = NA)\n    \n    x_shade2 <- x_vals[x_vals >= abs(test_stat)]\n    y_shade2 <- do.call(function_stat, c(list(x_shade2), stat_function_args))\n    polygon(c(x_shade2, rev(x_shade2)),\n            c(y_shade2, rep(0, length(y_shade2))),\n            col = rgb(1, 0, 0, 0.5), border = NA)\n    \n    abline(v = c(-abs(test_stat), abs(test_stat)), col = \"blue\", lty = 2)\n    text(-abs(test_stat) - 0.8, 0.3, round(-abs(test_stat), 2), col = \"blue\", adj = 0)\n    text(abs(test_stat) + 0.25, 0.3, round(abs(test_stat), 2), col = \"blue\", adj = 0)\n    \n  # Right-tailed test\n  } else if (alternate_hypothesis_choice == 2) {\n    x_shade <- x_vals[x_vals >= test_stat]\n    y_shade <- do.call(function_stat, c(list(x_shade), stat_function_args))\n    polygon(c(x_shade, rev(x_shade)),\n            c(y_shade, rep(0, length(y_shade))),\n            col = rgb(1, 0, 0, 0.5), border = NA)\n    \n    abline(v = test_stat, col = \"blue\", lty = 2)\n    text(test_stat + 0.25, 0.3, round(test_stat, 2), col = \"blue\", adj = 0)\n    \n  # Left-tailed test\n  } else if (alternate_hypothesis_choice == 3) {\n    x_shade <- x_vals[x_vals <= test_stat]\n    y_shade <- do.call(function_stat, c(list(x_shade), stat_function_args))\n    polygon(c(x_shade, rev(x_shade)),\n            c(y_shade, rep(0, length(y_shade))),\n            col = rgb(1, 0, 0, 0.5), border = NA)\n    \n    abline(v = test_stat, col = \"blue\", lty = 2)\n    text(test_stat - 0.8, 0.3, round(test_stat, 2), col = \"blue\", adj = 0)\n  }\n  \n}","type":"text"},{"name":"R/utility_helper_functions.R","content":"tight_card <- function(title, ..., content_style = NULL,  header_colour = NULL) {\n  \n  style_for_card = paste(\n    \"width: 100%;\",\n    \"border-top: 4px solid \", header_colour, \";\",\n    \"padding: 0;\",\n    \"margin: 0;\"\n  )\n  if (is.null(header_colour)) {\n    style_for_card = NULL\n  }\n  \n  card(\n    full_screen = FALSE,\n    style = style_for_card,\n    tags$div(\n      style = \"margin: 0; padding: 0;\",\n      # Title area\n      tags$div(\n        title,\n        style = \"\n          font-size: 1.25rem;\n          font-weight: bold;\n          padding: 0 0.25rem 0 0.25rem;\n          margin: -2px 0 0 0;\n          line-height: 1.2;\n          text-decoration: underline;\n        \"\n      ),\n      # Flexible content area.\n      tags$div(\n        tagList(...),\n        style = paste(\n          \"padding: 0.5rem 0.25rem 0 0.25rem; margin: 0;\",\n          content_style\n        )\n      )\n    )\n  )\n}\n\nprimary_card <- function(title, ..., content_style = NULL, header_colour = \"#FFFFFF\", title_color = \"#FFFFFF\") {\n  card(\n    full_screen = FALSE,\n    style = \"width: 100%; padding: 0; margin: 0;\",\n    \n    # Header with background color and white text,\n    # but no horizontal padding here:\n    card_header(\n      tags$div(\n        title,\n        style = \"padding-left: 0.25rem; padding-right: 0.25rem;\"\n      ),\n      style = paste(\n        \"background-color:\", header_colour, \";\",\n        \"color:\", title_color, \";\",\n        \"font-size: 1.25rem;\",\n        \"padding-top: 0.8rem; padding-bottom: 0.8rem;\",  # vertical padding only here\n        \"line-height: 1.2;\",\n        \"margin: 0;\"\n      )\n    ),\n    \n    # Body with inner div padding:\n    card_body(\n      tags$div(\n        tagList(...),\n        style = \"padding-left: 0.25rem; padding-right: 0.25rem;\"\n      ),\n      class = \"primary-card-content\",\n      style = paste(\n        \"padding-top: 0.5rem;\",\n        \"padding-bottom: 0.5rem;\",\n        \"margin: 0;\",\n        content_style\n      )\n    )\n  )\n}\n\npopsd <- function(x) {\n  # Remove NA values\n  x <- na.omit(x)\n  \n  # Return NA if input is empty\n  n <- length(x)\n  if (n == 0) return(NA_real_)  \n  \n  mean_x <- mean(x)\n  sqrt(sum((x - mean_x)^2) / n)\n}\n\ngcd <- function(a, b) {\n  while (b != 0) {\n    temp <- b\n    b <- a %% b\n    a <- temp\n  }\n  return(abs(a))\n}\n\n# We assume that if mean_or_sample_as_int = 1 then we are talking about sum, and mean_or_sample_as_int = 2 is mean.\nsimulate_box <- function(mean_or_sample_as_int, n, box) {\n  value = sample(box, n, replace = TRUE)\n  if (mean_or_sample_as_int == 2) {\n    value = mean(value)\n  } else {\n    value = sum(value)\n  }\n  return(value)\n}\n","type":"text"},{"name":"R/utility_load_data_1_sample_srv.R","content":"# Generate data for the Mr Han's Math Class example guiding the 1-sample z and t-test exercises.\nset.seed(1)\nHan_math_numbers <- rnorm(25, mean = 142, sd = 5)\nHan_math_numbers = data.frame(Scores = Han_math_numbers)\n\nload_1_sample_data_Server <- function(id) {\n  moduleServer(\n    id,\n    function(input, output, session) {\n      ns <- session$ns\n      \n      # Store the sample data.\n      data <- reactiveVal(NULL)\n      \n      # To trigger the pre_uploaded functions to re-run so data is re-updated.\n      re_run_flag <- reactiveVal(FALSE)\n      \n      # Mechanism to allow the user to specify the data sample they will be using.\n      output$data_upload <- renderUI({\n        \n        # Ensure some radio button option has been selected.\n        req(input$data_upload_choice)\n        \n        data(NULL)\n        \n        # Pre-uploaded data\n        if (input$data_upload_choice == \"pre_uploaded\") {\n          \n          isolate({\n            re_run_flag(!re_run_flag())\n          })\n          \n          return(\n            tagList(\n              HTML(\"<br>\"),\n              selectInput( \n                ns(\"data_set_pre_uploaded\"), \n                \"Which data set would you like to analyse?\", \n                list(\"Mr. Han's Math Class\", \"iris\", \"Orange\", \"PlantGrowth\", \"ToothGrowth\", \"chickwts\", \"ChickWeight\") \n              ),\n              #HTML(\"<p><i>Note: These are common data sets. If you want to learn more about them, feel free to look on Google!<i><\/p>\")\n            )\n          )\n        }\n        \n        # Manual upload data.\n        if (input$data_upload_choice == \"manually_specified\") {\n          return(\n            tagList(\n              HTML(\"<br>\"),\n              HTML(\"<p><b>Enter data into the text box below.<\/b>\n            <ul>\n              <li>All values must be numeric, and numbers should contain no spaces or any characters other than a . for a decimal place.<\/li>\n              <li>Each value must be on it's own line, or comma seperated.<\/li>\n              <li>Don't forget to press 'Upload' once you are finished!<\/li>\n            <\/ul><\/p>\"),\n              \n              # Textbox\n              textAreaInput( \n                ns(\"manual_data_upload_textbox\"), \n                NULL, \n                value = \"\",\n                width = \"100%\"\n              ),\n              \n              # Upload action button. Wrapped in a fluid row to make it right-aligned.\n              fluidRow(\n                column(8),\n                column(4,\n                       actionButton(\n                         inputId = ns(\"load_manual_data\"),\n                         label = \"Upload\",\n                         class = \"btn-success text-white\",\n                         style = \"color: #fff;\",\n                         width = \"100%\"\n                       ),\n                )\n              )\n              \n            )\n          )\n        }\n        \n      })\n      \n      # When the user chooses a pre uploaded data set, prompt them to choose the numeric column they wish to analyse.\n      output$numeric_column_seleciton_pre_uploaded_data <- renderUI({\n        req(input$data_set_pre_uploaded)\n        \n        # Only display if the pre_uploaded radio button option is selected.\n        if (input$data_upload_choice != \"pre_uploaded\") {\n          return()\n        }\n        \n        # Get numeric columns\n        #   Mr. Han Math Class example\n        if (input$data_set_pre_uploaded == \"Mr. Han's Math Class\") {\n          data = Han_math_numbers\n          \n        #   Using inbuilt R data sets.  \n        } else {\n          data = get(input$data_set_pre_uploaded)\n        }\n        numeric_cols <- names(data)[sapply(data, is.numeric)]\n        \n\n        # Select button for the identified numeric columns.\n        return(\n          tagList(\n            selectInput( \n              ns(\"column_select_pre_uploaded\"), \n              \"Which column containing numeric deata would you like to analyse?\", \n              numeric_cols\n            )\n          )\n        )\n      })\n      \n      # Update the data store once the column has been selected.\n      observeEvent(input$column_select_pre_uploaded, {\n        if (input$data_set_pre_uploaded == \"Mr. Han's Math Class\") {\n          data_to_store = Han_math_numbers[[input$column_select_pre_uploaded]]\n      \n        # Otherwise, use inbuilt R data sets.  \n        } else {\n          data_to_store = get(input$data_set_pre_uploaded)[[input$column_select_pre_uploaded]]\n          \n        }\n        data(data_to_store)\n      })\n      \n      # Optional button for if the user want to separate their data by a categorical variable.\n      output$separate_categorical_variable_pre_uploaded_data <- renderUI({\n        req(input$column_select_pre_uploaded)\n        \n        # Only display if the pre_uploaded radio button option is selected.\n        if (input$data_upload_choice != \"pre_uploaded\") {\n          return()\n        }\n        \n        # Get factor columns.\n        if (input$data_set_pre_uploaded == \"Mr. Han's Math Class\") {\n          data = Han_math_numbers\n        \n        #   Otherwise, we are using a pre-built data set in R.\n        } else {\n          data = get(input$data_set_pre_uploaded)\n        }\n        \n        factor_cols <- names(data)[sapply(data, is.factor)]\n        \n        # If no factor columns, return nothing.\n        if (length(factor_cols) == 0) {\n          return(NULL)\n        }\n        \n        factor_cols = append(\"(None)\", factor_cols)\n\n        # Select button for the identified factor columns to optionally separate on.\n        return(\n          tagList(\n            selectInput( \n              ns(\"factor_filtering_select_pre_uploaded\"), \n              \"(OPTIONAL) Below, you can optionally indicate if you want to separate your identified numeric variable by a categorical variable.\", \n              factor_cols\n            )\n          )\n        )\n        \n      })\n      \n      # If the user takes up the option to separate by a categorical variable, get the category they wish to filter with.\n      output$category_choice_pre_uploaded_data <- renderUI({\n        \n        req(input$factor_filtering_select_pre_uploaded)\n        \n        # Only display if the pre_uploaded radio button option is selected and \"(None)\" is not selected for the category.\n        if (input$data_upload_choice != \"pre_uploaded\" || input$factor_filtering_select_pre_uploaded == \"(None)\") {\n          return()\n        }\n        \n        different_categories = levels(get(input$data_set_pre_uploaded)[[input$factor_filtering_select_pre_uploaded]])\n        \n        # Select button for the different categories of the identified column.\n        return(\n          tagList(\n            selectInput( \n              ns(\"specific_category_select_pre_uploaded\"), \n              \"(OPTIONAL) Select which column to filter on.\", \n              different_categories\n            )\n          )\n        )\n      })\n      \n      # Re-update the data store if a filter is selected.\n      observeEvent(input$specific_category_select_pre_uploaded, {\n        if (input$factor_filtering_select_pre_uploaded == \"(None)\") {\n          return()\n        }\n        data_to_store = get(input$data_set_pre_uploaded)\n        \n        # Filter the data.\n        data_to_store <- data_to_store[data_to_store[[input$factor_filtering_select_pre_uploaded]] == input$specific_category_select_pre_uploaded, ]\n        \n        # Extract the selected column.\n        data(data_to_store[[input$column_select_pre_uploaded]])\n      })\n      \n      # Used to update the data when returning to the \"pre-uploaded data\" state.\n      observe({\n        re_run_flag()\n        req(input$data_set_pre_uploaded)\n        req(input$column_select_pre_uploaded)\n        \n        if (input$data_set_pre_uploaded == \"Mr. Han's Math Class\") {\n          data_to_store = Han_math_numbers[[input$column_select_pre_uploaded]]\n          \n        #   Otherwise, user has selected data prebuilt into R.\n        } else {\n          data_to_store = get(input$data_set_pre_uploaded)[[input$column_select_pre_uploaded]]\n        }\n        data(data_to_store)\n      })\n      \n      num_missing_values_manual_upload <- reactiveVal(0)\n      error_message_insufficient_unique_values_manual_upload <- reactiveVal(FALSE)\n      \n      # Observe if the \"Upload\" button is clicked. This will involve checking the data, and triggering a warning if the data is not in the correct form.\n      observeEvent(input$load_manual_data, {\n        \n        req(input$manual_data_upload_textbox)\n        \n        input_string = input$manual_data_upload_textbox\n        \n        # Split string at commas and newline characters.\n        splits <- strsplit(input_string, \"[,\\n]\")[[1]]\n        \n        # Remove any instances of empty strings.\n        splits <- trimws(splits)\n        splits = splits[splits != \"\"]\n        \n        # Convert the values to numbers.\n        numeric_vec <- as.numeric(splits)\n        \n        # Check that there are more than one unique value (table length will be greater than 1). Otherwise, sd = 0, and the test will break.\n        adequate_unique <- length(table(numeric_vec)) > 1\n        \n        # In the case that there are not unique values, raise an error with the user.\n        if (adequate_unique == FALSE) {\n          num_missing_values_manual_upload(0)\n          error_message_insufficient_unique_values_manual_upload(TRUE)\n          data(NULL)\n          return()\n        }\n        \n        error_message_insufficient_unique_values_manual_upload(FALSE)\n        \n        # Count number of NA values (NA values mean that there was an issue with the data upload).\n        na_count <- sum(sapply(numeric_vec, function(x) is.na(x)))\n        num_missing_values_manual_upload(na_count)\n        \n        # Updata the data store with manual data\n        data(numeric_vec)\n      })\n      \n      # Warning message notifying that there were some NA values found when manually updating the values.\n      output$manual_entry_missing_values_warning <- renderUI({\n        req(input$data_upload_choice)\n        \n        # Only display if the pre_uploaded radio button option is selected.\n        if (input$data_upload_choice != \"manually_specified\") {\n          return()\n        }\n        \n        if (num_missing_values_manual_upload() > 0) {\n          string = paste(\"<span style='color: red;'><p>Warning: From the data that you uploaded, \", as.character(num_missing_values_manual_upload()), \" of the values\n                     could not be interpreted. This could be becuase these values were not numeric, or because you did not specify the data into the required format.<\/p><\/span>\")\n          return(\n            tagList(\n              HTML(\"<br>\"),\n              HTML(string)\n            )\n          )\n        } else {\n          return()\n        }\n      })\n      \n      # Error message for when not enogh unique values.\n      output$manual_entry_insufficient_unique_values <- renderUI({\n        req(input$data_upload_choice)\n        \n        # Only display if the pre_uploaded radio button option is selected.\n        if (input$data_upload_choice != \"manually_specified\") {\n          return()\n        }\n        \n        if (error_message_insufficient_unique_values_manual_upload()) {\n          string = \"<span style='color: red;'><p>Warning: You must have at least two unique values in your manually specified data.<\/p><\/span>\"\n          return(\n            tagList(\n              HTML(\"<br>\"),\n              HTML(string)\n            )\n          )\n        } else {\n          return()\n        }\n      })\n      \n      # Plot of data\n      output$initial_data_plots = renderPlot({\n        \n        # If data has not been uploaded, don't display anything.\n        if (is.null(data())) {\n          return()\n        }\n        \n        # Get the data\n        data_plotting <- data.frame(data())\n        \n        # Extract the column (assuming only one column)\n        x <- data_plotting[[1]]\n        \n        # Save original plotting settings\n        old_par <- par(no.readonly = TRUE)\n        \n        # Stack plots: 2 rows, 1 column\n        par(mfrow = c(2, 1))\n        \n        # Boxplot (default vertical)\n        boxplot(x,\n                horizontal = TRUE,\n                col = \"blue\",\n                main = \"Boxplot\",\n                ylab = \"Values\")\n        \n        # Histogram\n        hist(x,\n             breaks = 30,\n             col = \"blue\",\n             border = \"black\",\n             main = \"Histogram\",\n             xlab = \"Values\",\n             ylab = \"Frequency\")\n        \n        # Restore settings\n        par(old_par)\n        \n      })\n      \n      # Plot UI or warning message output.\n      output$data_upload_plot_section_output <- renderUI({\n        \n        # Text to render alerting the user that they can't proceed until they make a data choice.\n        # This is when no data has been set.\n        if (is.null(data())) {\n          string = \"<span style='color: blue;'><p>In order to proceed, you must select some data to act as your sample.<\/p><\/span>\"\n          return(\n            tagList(\n              HTML(string)\n            )\n          )\n        }\n        \n        # If data has been set, display the plots.\n        return(\n          tagList(\n            plotOutput(ns(\"initial_data_plots\"),  width = \"100%\")\n          )\n        )\n      })\n      \n      # To make the data accessible outside of the module.\n      list(data = data)\n      \n    }\n\n  )\n}\n","type":"text"},{"name":"R/utility_load_data_1_sample_ui.R","content":"load_1_sample_data_UI <- function(id, test_name = \"1-sample z-test\") {\n  ns <- NS(id)\n  tagList(\n    \n    ############ SECTION: Input Data ############\n    fluidRow(\n      column(7,\n             tight_card(\n               \"Input Sample Data\",\n               HTML(paste(\"<p>In order to do a \",  test_name, \", we first need to proivde our single (one) sample that we will be analysing. Below you can\n                        choose pre-uploaded data to analyse, or you can manually enter data.<\/p>\"), sep = \"\"),\n               HTML(\"<br>\"),\n               \n               # User specifies whether they will use inbuilt data or manually specify data.\n               radioButtons( \n                 inputId = ns(\"data_upload_choice\"), \n                 label = HTML(\"<p><b>What data source will you be using?<\/b><\/p>\"), \n                 choices = list( \n                   \"Pre-uploaded Data\" = \"pre_uploaded\", \n                   \"Manually Specified Data\" = \"manually_specified\" \n                 ),\n                 selected = NA\n               ),\n               \n               # Mechanism for user to specify data depending on radio button option.\n               uiOutput(ns(\"data_upload\")),\n               \n               # These will output only for the case that the \"pre_uploaded\" option is selected.\n               uiOutput(ns(\"numeric_column_seleciton_pre_uploaded_data\")),\n               uiOutput(ns(\"separate_categorical_variable_pre_uploaded_data\")),\n               uiOutput(ns(\"category_choice_pre_uploaded_data\")),\n               \n               # These will output only for the case that the \"manually_specified\" option is selected.\n               uiOutput(ns(\"manual_entry_insufficient_unique_values\")),\n               uiOutput(ns(\"manual_entry_missing_values_warning\")),\n               header_colour = \"#3179ae\"\n             )\n      ),\n      column(5,\n             tight_card(\n               NULL,\n               uiOutput(ns(\"data_upload_plot_section_output\"))\n             )\n      )\n    ),\n  \n  )\n}\n","type":"text"},{"name":"R/utility_load_data_2_sample_srv.R","content":"# GPT generate syntehtic blood_pressure data.\nset.seed(1)  # For reproducibility\n\n# Number of samples per group\nn <- 50\n\n# Create data\nblood_pressure <- data.frame(\n  drug = rep(c(\"Drug_A\", \"Drug_B\"), each = n),\n  blood_pressure = c(\n    rnorm(n, mean = 120, sd = 10),  # Drug_A values\n    rnorm(n, mean = 115, sd = 10)   # Drug_B values\n  )\n)\n\n\nload_data_2_sample_Server <- function(id) {\n  moduleServer(\n    id,\n    function(input, output, session) {\n      ns <- session$ns\n      \n      data_sample_1 <- reactiveVal(NULL)\n      data_sample_2 <- reactiveVal(NULL)\n      \n      # To trigger the pre_uploaded functions to re-run so data is re-updated.\n      re_run_flag <- reactiveVal(FALSE)\n      \n      # Mechanism to allow the user to specify the data sample they will be using.\n      output$data_upload <- renderUI({\n        \n        # Ensure some radio button option has been selected.\n        req(input$data_upload_choice)\n        \n        # Reset data to be null.\n        data_sample_1(NULL)\n        data_sample_2(NULL)\n        \n        # Pre-uploaded data\n        if (input$data_upload_choice == \"pre_uploaded\") {\n          \n          isolate({\n            re_run_flag(!re_run_flag())\n          })\n          \n          return(\n            tagList(\n              selectInput( \n                ns(\"data_set_pre_uploaded\"), \n                HTML(\"<p>Which <b>data set<\/b> would you like to analyse?<\/p>\"),\n                list(\"blood_pressure\", \"iris\", \"InsectSprays\", \"CO2\", \"ToothGrowth\", \"PlantGrowth\")\n              ),\n            )\n          )\n        }\n        \n        # Manual upload data.\n        if (input$data_upload_choice == \"manually_specified\") {\n          return(\n            tagList(\n              HTML(\"<br>\"),\n              HTML(\"<p><b>Enter data into the text box below for each sample.<\/b>\n            <ul>\n              <li>All values must be numeric, and numbers should contain no spaces or any characters other than a '.' for a decimal place.<\/li>\n              <li>Each value must be on it's own line, or comma seperated.<\/li>\n              <li>Don't forget to press 'Upload' once you are finished!<\/li>\n            <\/ul><\/p><br>\"),\n              \n              # Textbox -> Sample 1\n              HTML(\"<p><b>Sample 1:<\/b><\/p>\"),\n              textAreaInput( \n                ns(\"manual_data_upload_sample_1\"), \n                NULL, \n                value = \"\",\n                width = \"100%\"\n              ),\n              \n              # Textbox -> Sample 2\n              HTML(\"<p><b>Sample 2:<\/b><\/p>\"),\n              textAreaInput( \n                ns(\"manual_data_upload_sample_2\"), \n                NULL, \n                value = \"\",\n                width = \"100%\"\n              ),\n              \n              # Upload action button. Wrapped in a fluid row to make it right-aligned.\n              fluidRow(\n                column(8),\n                column(4,\n                       actionButton(\n                         inputId = ns(\"load_manual_data\"),\n                         label = \"Upload\",\n                         class = \"btn-success text-white\",\n                         style = \"color: #fff;\",\n                         width = \"100%\"\n                       ),\n                )\n              )\n              \n            )\n          )\n        }\n      })\n      \n      error_message_insufficient_unique_values_manual_upload = reactiveVal(FALSE)\n      \n      # Observe if the \"Upload\" button is clicked for the manual data. This will involve checking the data, and triggering a warning if the data is not in the correct form.\n      observeEvent(input$load_manual_data, {\n        \n        req(input$manual_data_upload_sample_1)\n        req(input$manual_data_upload_sample_2)\n        \n        # Re-set warning messages\n        error_message_insufficient_unique_values_manual_upload(FALSE)\n        \n        data_sample_1(NULL)\n        data_sample_2(NULL)\n        \n        sample_1 = input$manual_data_upload_sample_1\n        sample_2 = input$manual_data_upload_sample_2\n        \n        # Process condition 1 data.\n        splits_samp_1 = strsplit(sample_1, \"[,\\n]\")[[1]]\n        splits_samp_1 = trimws(splits_samp_1)\n        splits_samp_1 = splits_samp_1[splits_samp_1 != \"\"]\n        numeric_samp_1 = as.numeric(splits_samp_1)\n        numeric_samp_1 = numeric_samp_1[!is.na(numeric_samp_1)]\n        \n        # Process condition 2 data.\n        splits_samp_2 = strsplit(sample_2, \"[,\\n]\")[[1]]\n        splits_samp_2 = trimws(splits_samp_2)\n        splits_samp_2 = splits_samp_2[splits_samp_2 != \"\"]\n        numeric_samp_2 = as.numeric(splits_samp_2)\n        numeric_samp_2 = numeric_samp_2[!is.na(numeric_samp_2)]\n        \n        # Check that there are more than one unique value (table length will be greater than 1). Otherwise, sd = 0, and the test will break.\n        adequate_unique = length(table(numeric_samp_1)) > 1 &&  length(table(numeric_samp_2)) > 1\n        \n        # In the case that there are not unique values, raise an error with the user.\n        if (adequate_unique == FALSE) {\n          error_message_insufficient_unique_values_manual_upload(TRUE)\n          return()\n        }\n        \n        data_sample_1(numeric_samp_1)\n        data_sample_2(numeric_samp_2)\n      })\n      \n      # Error message for when not enogh unique values.\n      output$manual_entry_insufficient_unique_values <- renderUI({\n        req(input$data_upload_choice)\n        \n        # Only display if the pre_uploaded radio button option is selected.\n        if (input$data_upload_choice != \"manually_specified\") {\n          return()\n        }\n        \n        if (error_message_insufficient_unique_values_manual_upload()) {\n          string = \"<span style='color: red;'><p>Warning: You must have at least two unique values in your manually specified data.<\/p><\/span>\"\n          return(\n            tagList(\n              HTML(\"<br>\"),\n              HTML(string)\n            )\n          )\n        } else {\n          return()\n        }\n      })\n      \n      \n      # Categorical Variable Selection\n      output$categorical_variable_selection_pre_uploaded <- renderUI({\n        req(input$data_set_pre_uploaded)\n        \n        # Only display if the pre_uploaded radio button option is selected.\n        if (input$data_upload_choice != \"pre_uploaded\") {\n          return()\n        }\n        \n        # Get character or factor column names.\n        data = get(input$data_set_pre_uploaded)\n        cols_char_or_factor <- names(data)[sapply(data, function(col) {\n          (is.character(col) || is.factor(col)) && length(unique(col)) >= 2\n        })]\n        \n        return(\n          tagList(\n            fluidRow(\n              HTML(\"<p>The second step in choosing our samples involves selecting a <b>categorical variable<\/b> that we will <b>split the samples<\/b> from:<\/p>\"),\n              column(6,\n                     selectInput(\n                       ns(\"categorical_pre_uploaded\"),\n                       NULL,\n                       cols_char_or_factor,\n                       selected = cols_char_or_factor[1]\n                     )\n              )\n            ),\n          )\n        )\n      })\n      \n      # Select the samples.\n      output$sample_selection_pre_uploaded <- renderUI({\n        req(input$data_set_pre_uploaded)\n        req(input$categorical_pre_uploaded)\n        \n        # Only display if the pre_uploaded radio button option is selected.\n        if (input$data_upload_choice != \"pre_uploaded\") {\n          return()\n        }\n        \n        # Get numeric column names.\n        df <- get(input$data_set_pre_uploaded)\n        unique_values <- unique(df[[input$categorical_pre_uploaded]])\n        \n        return(\n          tagList(\n            fluidRow(\n              HTML(\"<p>With the categorical variable set, we now <b>choose the 2 samples<\/b> we would like to analyse:<\/p>\"),\n              column(6,\n                     selectInput(\n                       ns(\"sample_1_pre_uploaded\"),\n                       HTML(\"<p><b>Sample 1:<\/b><\/p>\"),\n                       unique_values,\n                       selected = unique_values[1]\n                     )\n              ),\n              column(6,\n                     selectInput(\n                       ns(\"sample_2_pre_uploaded\"),\n                       HTML(\"<p><b>Sample 2:<\/b><\/p>\"),\n                       unique_values,\n                       selected = unique_values[2]\n                     )\n              )\n            )\n          )\n        )\n      })\n      \n      # Dependent Variable Selection\n      output$dependent_variable_selection_pre_uploaded_data <- renderUI({\n        req(input$data_set_pre_uploaded)\n        req(input$categorical_pre_uploaded)\n        req(input$sample_1_pre_uploaded)\n        req(input$sample_2_pre_uploaded)\n        \n        # Only display if the pre_uploaded radio button option is selected.\n        if (input$data_upload_choice != \"pre_uploaded\") {\n          return()\n        }\n        \n        # Get numeric column names.\n        data = get(input$data_set_pre_uploaded) \n        numeric_cols <- names(data)[sapply(data, is.numeric)]\n        \n        return(\n          tagList(\n            fluidRow(\n              HTML(\"<p>Finally, we select the <b>dependent variable<\/b>. This is the variable that each obervation in the samples are being measured against.<\/p>\"),\n              column(6,\n                     selectInput(\n                       ns(\"dependent_variable\"),\n                       NULL,\n                       numeric_cols,\n                       selected = numeric_cols[1]\n                     )\n              ),\n              HTML(\"<br><br><br><br>\")\n            ),\n          )\n        )\n      })\n      \n      # Warning message when for the pre-uploaded option, samples 1 and 2 are the same.\n      # Also, is the function where the data is saved into the reactive variables.\n      output$pre_uploaded_warning_and_save_data <- renderUI({\n        req(input$data_set_pre_uploaded)\n        req(input$categorical_pre_uploaded)\n        req(input$sample_1_pre_uploaded)\n        req(input$sample_2_pre_uploaded)\n        req(input$dependent_variable)\n        \n        # Only display if the pre_uploaded radio button option is selected.\n        if (input$data_upload_choice != \"pre_uploaded\") {\n          return()\n        }\n        \n        # Warning message when the conditions are the same.\n        if (input$sample_1_pre_uploaded == input$sample_2_pre_uploaded) {\n          data_sample_1(NULL)\n          data_sample_2(NULL)\n          return(\n            tagList(\n              HTML(\"<span style='color: red;'><p>Warning: Sample 1 and Sample 2 should be different.<\/p><\/span>\"),\n            )\n          )\n          \n          # Otherwise, set the data.\n        } else {\n          \n          df = get(input$data_set_pre_uploaded)\n          temp_1 = df[as.character(df[[input$categorical_pre_uploaded]]) == input$sample_1_pre_uploaded, input$dependent_variable]\n          data_sample_1(temp_1)\n          temp_2 = df[as.character(df[[input$categorical_pre_uploaded]]) == input$sample_2_pre_uploaded, input$dependent_variable]\n          data_sample_2(temp_2)\n          return()\n        }\n      })\n      \n      # Radio button allowing user to choose which data they want to plot.\n      output$radio_button_plot_type <- renderUI({\n        \n        # If data has not been uploaded, don't display anything.\n        if (is.null(data_sample_1()) || is.null(data_sample_2())) {\n          return()\n        }\n        \n        return(\n          radioButtons(ns(\"plot_type\"), NULL, c(\n            \"Box plot\" = \"Box_plot\",\n            \"Histogram\" = \"Histogram\" \n          ), inline=T)\n        )\n      })\n      \n      # Plot UI or warning message output.\n      output$data_upload_plot_section_output <- renderUI({\n        \n        # Text to render alerting the user that they can't proceed until they make a data choice.\n        # This is when no data has been set.\n        if (is.null(data_sample_1())) {\n          string = \"<span style='color: blue;'><p>In order to proceed, you must select some data to act as your sample.<\/p><\/span>\"\n          return(\n            tagList(\n              HTML(string)\n            )\n          )\n        }\n        \n        # If data has been set, display the plots.\n        return(\n          tagList(\n            plotOutput(ns(\"initial_data_plots\"),  width = \"100%\")\n          )\n        )\n      })\n      \n      # Display input data.\n      output$initial_data_plots <- renderPlot({\n        \n        req(input$plot_type)\n        \n        # If data has not been uploaded, don't display anything.\n        if (is.null(data_sample_1()) || is.null(data_sample_2())) {\n          return()\n        }\n        \n        if (input$plot_type == \"Box_plot\") {\n          \n          boxplot(list(\n            `Sample 1` = data_sample_1(), \n            `Sample 2` = data_sample_2()\n          ),\n          horizontal = TRUE,\n          col = c(\"blue\", \"red\"),\n          main = \"Side-by-side Boxplots\",\n          ylab = \"Samples\")\n          \n          # Histograms\n        } else {\n          \n          # Save original plotting settings\n          old_par <- par(no.readonly = TRUE)\n          \n          # Stack plots: 2 rows, 1 column\n          par(mfrow = c(2, 1))\n          \n          # Histogram - Sample 1\n          hist(data_sample_1(),\n               breaks = 30,\n               col = \"blue\",\n               border = \"black\",\n               main = \"Sample 1 Histogram\",\n               xlab = \"Values\",\n               ylab = \"Frequency\")\n          \n          # Histogram - Sample 2\n          hist(data_sample_2(),\n               breaks = 30,\n               col = \"red\",\n               border = \"black\",\n               main = \"Sample 2 Histogram\",\n               xlab = \"Values\",\n               ylab = \"Frequency\")\n          \n          # Restore settings\n          par(old_par)\n        }\n      })\n      \n      # To make the data accessible outside of the module.\n      list(data_sample_1 = data_sample_1, \n           data_sample_2 = data_sample_2)\n      \n      \n    }\n    \n  )\n}\n","type":"text"},{"name":"R/utility_load_data_2_sample_ui.R","content":"load_data_2_sample_UI <- function(id, test_name = \"1-sample t-test\") {\n  ns <- NS(id)\n  tagList(\n    \n    ############ SECTION: Input Data ############\n    fluidRow(\n      column(7,\n             tight_card(\n               \"Input Sample Data\",\n               HTML(\"<p>As the name suggests, in a 2-sample t-test, we need 2 samples. These 2 samples should be both measuring the same thing \n                                  (i.e, they need to have the same dependent variable). Before choosing the samples, we need to select our data set.<\/p>\"),\n               \n               # User specifies whether they will use inbuilt data or manually specify data.\n               radioButtons( \n                 inputId = ns(\"data_upload_choice\"),\n                 label = HTML(\"<p><b>What data source will you be using?<\/b><\/p>\"), \n                 choices = list( \n                   \"Pre-uploaded Data\" = \"pre_uploaded\", \n                   \"Manually Specified Data\" = \"manually_specified\" \n                 ),\n                 selected = NA\n               ),\n               \n               # Mechanism for user to specify data depending on radio button option.\n               uiOutput(ns(\"data_upload\")),\n               \n               # These will output only for the case that the \"pre_uploaded\" option is selected.\n               uiOutput(ns(\"categorical_variable_selection_pre_uploaded\")),\n               uiOutput(ns(\"sample_selection_pre_uploaded\")),\n               uiOutput(ns(\"dependent_variable_selection_pre_uploaded_data\")),\n               uiOutput(ns(\"pre_uploaded_warning_and_save_data\")),\n               \n               \n               # These will output only for the case that the \"manually_specified\" option is selected.\n               uiOutput(ns(\"manual_entry_insufficient_unique_values\")),\n               header_colour = \"#3179ae\"\n             )\n      ),\n      column(5,\n             tight_card(\n               NULL,\n               uiOutput(ns(\"radio_button_plot_type\")),\n               uiOutput(ns(\"data_upload_plot_section_output\"))\n             )\n      )\n    )\n\n    \n  )\n}\n","type":"text"},{"name":"R/utility_load_data_paired_sample_srv.R","content":"# Originally, we were using the PairedData package to use real paired datasets. However, this is not compatabile with shiny live...\n# Now, we will use sleep (which is paired data included in base R, and synthetic data).\n\n# Sleep paired dataset that is inbuilt into R.\nSleepStudy <- reshape(sleep,\n                      timevar = \"group\",\n                      idvar = \"ID\",\n                      direction = \"wide\")\nnames(SleepStudy)[names(SleepStudy) == \"extra.1\"] <- \"condition 1\"\nnames(SleepStudy)[names(SleepStudy) == \"extra.2\"] <- \"condition 2\"\n\n# ChatGPT generated synthetic datasets\nset.seed(1)\n\n# BloodPressureStudy: before/after treatment with two drugs\nBloodPressureStudy <- data.frame(\n  Before_Treatment = round(rnorm(30, 140, 15), 1),\n  After_DrugA = round(rnorm(30, 135, 14), 1),\n  After_DrugB = round(rnorm(30, 133, 13), 1)\n)\n\n# CognitiveScores: paired cognitive test scores at baseline and 6 months\nCognitiveScores <- data.frame(\n  Baseline_Memory = round(rnorm(30, 75, 8), 0),\n  SixMonths_Memory = round(rnorm(30, 80, 7), 0),\n  Baseline_Attention = round(rnorm(30, 70, 10), 0),\n  SixMonths_Attention = round(rnorm(30, 72, 9), 0)\n)\n\n# FitnessTestResults: paired measurements before and after 8 weeks training\nFitnessTestResults <- data.frame(\n  VO2Max_Before = round(rnorm(40, 45, 5), 1),\n  VO2Max_After = round(rnorm(40, 49, 5), 1),\n  SprintTime_Before = round(rnorm(40, 12.0, 0.8), 2),\n  SprintTime_After = round(rnorm(40, 11.5, 0.7), 2)\n)\n\n# DietImpactStudy: paired weight and cholesterol before and after diet\nDietImpactStudy <- data.frame(\n  Weight_Before = round(rnorm(25, 85, 12), 1),      # kg\n  Weight_After = round(rnorm(25, 80, 11), 1),       # kg\n  Cholesterol_Before = round(rnorm(25, 200, 25), 0), # mg/dL\n  Cholesterol_After = round(rnorm(25, 185, 20), 0)   # mg/dL\n)\n\nload_data_paired_sample_Server <- function(id) {\n  moduleServer(\n    id,\n    function(input, output, session) {\n      ns <- session$ns\n      \n      # Store the sample data.\n      data_condition_1 <- reactiveVal(NULL)\n      data_condition_2 <- reactiveVal(NULL)\n      data_paired_difference <- reactiveVal(NULL)\n      \n      # To trigger the pre_uploaded functions to re-run so data is re-updated.\n      re_run_flag <- reactiveVal(FALSE)\n      \n      # Mechanism to allow the user to specify the data sample they will be using.\n      output$data_upload <- renderUI({\n        \n        # Ensure some radio button option has been selected.\n        req(input$data_upload_choice)\n        \n        # Reset data to be null.\n        data_condition_1(NULL)\n        data_condition_2(NULL)\n        data_paired_difference(NULL)\n        \n        # Pre-uploaded data\n        # The pre-uploaded data set comes from the 'PairedData' package: https://cran.r-project.org/web/packages/PairedData/PairedData.pdf\n        if (input$data_upload_choice == \"pre_uploaded\") {\n          \n          isolate({\n            re_run_flag(!re_run_flag())\n          })\n          \n          return(\n            tagList(\n              selectInput( \n                ns(\"data_set_pre_uploaded\"), \n                HTML(\"<p><b>Which data set would you like to analyse?<\/b><\/p>\"),\n                list(\"BloodPressureStudy\", \"SleepStudy\", \"CognitiveScores\",\"FitnessTestResults\",\"DietImpactStudy\")\n              ),\n              HTML(\"<p><i>Warning: Other than the 'SleepStudy' data set, the other data sets are synthetic (made up) data.<\/i><\/p>\"),\n              HTML(\"<p>Now we need to select what data we want to be in condition 1, and what to be in condition 2. The paired difference will be condition 2 - condition 1.<\/p><br>\")\n            )\n          )\n        }\n        \n        # Manual upload data.\n        if (input$data_upload_choice == \"manually_specified\") {\n          return(\n            tagList(\n              HTML(\"<br>\"),\n              HTML(\"<p><b>Enter data into the text box below for each sample.<\/b>\n            <ul>\n              <li>All values must be numeric, and numbers should contain no spaces or any characters other than a '.' for a decimal place.<\/li>\n              <li>Each value must be on it's own line, or comma seperated.<\/li>\n              <li>As this is paired data, there must be the same number of values in each textbox.<\/li>\n              <li>Don't forget to press 'Upload' once you are finished!<\/li>\n            <\/ul><\/p><br>\"),\n              \n              # Textbox -> condition 1 data entry.\n              HTML(\"<p><b>Condition 1:<\/b><\/p>\"),\n              textAreaInput( \n                ns(\"manual_data_upload_textbox_condition_1\"), \n                NULL, \n                value = \"\",\n                width = \"100%\"\n              ),\n              \n              # Textbox -> condition 2 data entry.\n              HTML(\"<p><b>Condition 2:<\/b><\/p>\"),\n              textAreaInput( \n                ns(\"manual_data_upload_textbox_condition_2\"), \n                NULL, \n                value = \"\",\n                width = \"100%\"\n              ),\n              \n              # Upload action button. Wrapped in a fluid row to make it right-aligned.\n              fluidRow(\n                column(8),\n                column(4,\n                       actionButton(\n                         inputId = ns(\"load_manual_data\"),\n                         label = \"Upload\",\n                         class = \"btn-success text-white\",\n                         style = \"color: #fff;\",\n                         width = \"100%\"\n                       ),\n                )\n              )\n              \n            )\n          )\n        }\n        \n      })\n      \n      # When the user chooses a pre uploaded data set, prompt them to choose the numeric column for condition 1 and 2.\n      output$numeric_column_selection_pre_uploaded_data <- renderUI({\n        req(input$data_set_pre_uploaded)\n        \n        # Only display if the pre_uploaded radio button option is selected.\n        if (input$data_upload_choice != \"pre_uploaded\") {\n          return()\n        }\n        \n        # Get numeric column names.\n        data = get(input$data_set_pre_uploaded) \n        numeric_cols <- names(data)[sapply(data, is.numeric)]\n        \n        return(\n          tagList(\n            fluidRow(\n              column(6,\n                     selectInput(\n                       ns(\"condition_1_pre_uploaded\"),\n                       HTML(\"<p><b>Condition 1:<\/b><\/p>\"),\n                       numeric_cols,\n                       selected = numeric_cols[1]\n                     )\n              ),\n              column(6,\n                     selectInput(\n                       ns(\"condition_2_pre_uploaded\"),\n                       HTML(\"<p><b>Condition 2:<\/b><\/p>\"),\n                       numeric_cols,\n                       selected = numeric_cols[2]\n                     )\n              )\n            ),\n            HTML(\"<br><br>\")\n          )\n        )\n      })\n      \n      # Warning message when for the pre-uploaded option, conditions 1 and 2 are the same.\n      output$pre_uploaded_warning_and_save_data <- renderUI({\n        req(input$data_set_pre_uploaded)\n        req(input$condition_1_pre_uploaded)\n        \n        # Only display if the pre_uploaded radio button option is selected.\n        if (input$data_upload_choice != \"pre_uploaded\") {\n          return()\n        }\n        \n        # Warning message when the conditions are the same.\n        if (input$condition_1_pre_uploaded == input$condition_2_pre_uploaded) {\n          data_condition_1(NULL)\n          data_condition_2(NULL)\n          data_paired_difference(NULL)\n          return(\n            tagList(\n              HTML(\"<span style='color: red;'><p>Warning: Condition 1 and condition 2 should be different.<\/p><\/span>\"),\n            )\n          )\n          \n          # Otherwise, set the data.\n        } else {\n          data_condition_1(get(input$data_set_pre_uploaded)[[input$condition_1_pre_uploaded]])\n          data_condition_2(get(input$data_set_pre_uploaded)[[input$condition_2_pre_uploaded]])\n          data_paired_difference(data_condition_2() - data_condition_1())\n          return()\n        }\n      })\n      \n      # Reactive variables to keep track of the number of values entered for each condition.\n      num_values_cond_1 = reactiveVal(NULL)\n      num_values_cond_2 = reactiveVal(NULL)\n      error_message_unequal_paired_samples = reactiveVal(FALSE)\n      error_message_insufficient_unique_values_manual_upload = reactiveVal(FALSE)\n      \n      # Observe if the \"Upload\" button is clicked. This will involve checking the data, and triggering a warning if the data is not in the correct form.\n      observeEvent(input$load_manual_data, {\n        \n        req(input$manual_data_upload_textbox_condition_1)\n        req(input$manual_data_upload_textbox_condition_2)\n        \n        # Re-set warning messages\n        error_message_unequal_paired_samples(FALSE)\n        error_message_insufficient_unique_values_manual_upload(FALSE)\n        \n        data_condition_1(NULL)\n        data_condition_2(NULL)\n        data_paired_difference(NULL)\n        \n        condition_1 = input$manual_data_upload_textbox_condition_1\n        condition_2 = input$manual_data_upload_textbox_condition_2\n        \n        # Process condition 1 data.\n        splits_cond_1 <- strsplit(condition_1, \"[,\\n]\")[[1]]\n        splits_cond_1 <- trimws(splits_cond_1)\n        splits_cond_1 = splits_cond_1[splits_cond_1 != \"\"]\n        numeric_cond_1 = as.numeric(splits_cond_1)\n        numeric_cond_1 = numeric_cond_1[!is.na(numeric_cond_1)]\n        \n        # Process condition 2 data.\n        splits_cond_2 <- strsplit(condition_2, \"[,\\n]\")[[1]]\n        splits_cond_2 <- trimws(splits_cond_2)\n        splits_cond_2 = splits_cond_2[splits_cond_2 != \"\"]\n        numeric_cond_2 = as.numeric(splits_cond_2)\n        numeric_cond_2 = numeric_cond_2[!is.na(numeric_cond_2)]\n        \n        # Check if the data is really paired -> otherwise, trigger a warning message.\n        if (length(numeric_cond_1) != length(numeric_cond_2)) {\n          num_values_cond_1(length(numeric_cond_1))\n          num_values_cond_2(length(numeric_cond_2))\n          error_message_unequal_paired_samples(TRUE)\n          return()\n        }\n        \n        # Find paired difference between the groups.\n        paired_difference = numeric_cond_2 - numeric_cond_1\n        \n        # Check that there are more than one unique value (table length will be greater than 1). Otherwise, sd = 0, and the test will break.\n        adequate_unique <- length(table(paired_difference)) > 1\n        \n        # In the case that there are not unique values, raise an error with the user.\n        if (adequate_unique == FALSE) {\n          error_message_insufficient_unique_values_manual_upload(TRUE)\n          return()\n        }\n        \n        data_condition_1(numeric_cond_1)\n        data_condition_2(numeric_cond_2)\n        data_paired_difference(paired_difference)\n        \n      })\n      \n      # Error message for when not enogh unique values.\n      output$manual_entry_unequal_samples <- renderUI({\n        req(input$data_upload_choice)\n        \n        # Only display if the manually_specified radio button option is selected.\n        if (input$data_upload_choice != \"manually_specified\") {\n          return()\n        }\n        \n        if (error_message_unequal_paired_samples()) {\n          string = paste(\"<span style='color: red;'><p>Warning: The number of values in each condition is unequal. Condition 1 has \", \n                         as.character(num_values_cond_1()), \" values, and condition 2 has \", as.character(num_values_cond_2()), \" values.<\/p><\/span>\", sep = \"\")\n          return(\n            tagList(\n              HTML(\"<br>\"),\n              HTML(string)\n            )\n          )\n        } else {\n          return()\n        }\n      })\n      \n      # Error message for when not enogh unique values.\n      output$manual_entry_insufficient_unique_values <- renderUI({\n        req(input$data_upload_choice)\n        \n        # Only display if the pre_uploaded radio button option is selected.\n        if (input$data_upload_choice != \"manually_specified\") {\n          return()\n        }\n        \n        if (error_message_insufficient_unique_values_manual_upload()) {\n          string = \"<span style='color: red;'><p>Warning: You must have at least two unique values in your manually specified data.<\/p><\/span>\"\n          return(\n            tagList(\n              HTML(\"<br>\"),\n              HTML(string)\n            )\n          )\n        } else {\n          return()\n        }\n      })\n      \n      # Radio button allowing user to choose which data they want to plot.\n      output$radio_buttons_data_to_plot <- renderUI({\n        \n        # If data has not been uploaded, don't display anything.\n        if (is.null(data_paired_difference())) {\n          return()\n        }\n        \n        return(\n            radioButtons(ns(\"data_to_plot\"), NULL, c(\n                                                 \"Paired Difference\" = \"Paired_Difference\",\n                                                 \"Condition 1\" = \"Condition_1\", \n                                                 \"Condition 2\" = \"Condition_2\"\n                                                  ), inline=T)\n        )\n      })\n      \n      # Plot UI or warning message output.\n      output$data_upload_plot_section_output <- renderUI({\n        \n        # Text to render alerting the user that they can't proceed until they make a data choice.\n        # This is when no data has been set.\n        if (is.null(data_paired_difference())) {\n          string = \"<span style='color: blue;'><p>In order to proceed, you must select some data to act as your sample.<\/p><\/span>\"\n          return(\n            tagList(\n                HTML(string)\n            )\n          )\n        }\n        \n        # If data has been set, display the plots.\n        return(\n          tagList(\n            plotOutput(ns(\"initial_data_plots\"),  width = \"100%\")\n          )\n        )\n      })\n      \n      # Display input data.\n      output$initial_data_plots <- renderPlot({\n        \n        req(input$data_to_plot)\n        \n        # If data has not been uploaded, don't display anything.\n        if (is.null(data_paired_difference())) {\n          return()\n        }\n        \n        data_plotting = data_condition_1()\n        if (input$data_to_plot == \"Condition_2\") {\n          data_plotting = data_condition_2()\n        } else if (input$data_to_plot == \"Paired_Difference\") {\n          data_plotting = data_paired_difference()\n        }\n        \n        data_plotting = data.frame(data_plotting)\n        \n        # Extract the column (assuming only one column)\n        x <- data_plotting[[1]]\n        \n        # Check that the data is actually loaded in.\n        if (length(x) == 0) {\n          return()\n        }\n        \n        # Save original plotting settings\n        old_par <- par(no.readonly = TRUE)\n        \n        # Stack plots: 2 rows, 1 column\n        par(mfrow = c(2, 1))\n        \n        # Boxplot (default vertical)\n        boxplot(x,\n                horizontal = TRUE,\n                col = \"blue\",\n                main = \"Boxplot\",\n                ylab = \"Values\")\n        \n        # Histogram\n        hist(x,\n             breaks = 30,\n             col = \"blue\",\n             border = \"black\",\n             main = \"Histogram\",\n             xlab = \"Values\",\n             ylab = \"Frequency\")\n        \n        # Restore settings\n        par(old_par)\n        \n      })\n      \n      # To make the data accessible outside of the module.\n      list(data_condition_1 = data_condition_1, \n           data_condition_2 = data_condition_2, \n           data_paired_difference = data_paired_difference)\n      \n    }\n    \n  )\n}\n","type":"text"},{"name":"R/utility_load_data_paired_sample_ui.R","content":"load_data_paired_sample_UI <- function(id, test_name = \"1-sample t-test\") {\n  ns <- NS(id)\n  tagList(\n    \n    ############ SECTION: Input Data ############\n    fluidRow(\n      column(7,\n             tight_card(\n               \"Input Sample Data\",\n               HTML(\"<p>In a paired t-test, we are dealing with paired data. This is where each element in our study has a measurement recorded under two different\n               conditions. We can then find the difference between the paired data to reduce the values into a single data sample. But before doing this, we first \n               have to choose a data set to analyse.<\/p>\"),\n               HTML(\"<br>\"),\n               \n               # User specifies whether they will use inbuilt data or manually specify data.\n               radioButtons( \n                 inputId = ns(\"data_upload_choice\"), \n                 label = HTML(\"<p><b>What data source will you be using?<\/b><\/p>\"), \n                 choices = list( \n                   \"Pre-uploaded Data\" = \"pre_uploaded\", \n                   \"Manually Specified Data\" = \"manually_specified\" \n                 ),\n                 selected = NA\n               ),\n               \n               # Mechanism for user to specify data depending on radio button option.\n               uiOutput(ns(\"data_upload\")),\n               \n               # These will output only for the case that the \"pre_uploaded\" option is selected.\n               uiOutput(ns(\"numeric_column_selection_pre_uploaded_data\")),\n               uiOutput(ns(\"pre_uploaded_warning_and_save_data\")),\n               \n               # # These will output only for the case that the \"manually_specified\" option is selected.\n               uiOutput(ns(\"manual_entry_unequal_samples\")),\n               uiOutput(ns(\"manual_entry_insufficient_unique_values\")),\n               header_colour = \"#3179ae\"\n             )\n      ),\n      column(5,\n             tight_card(\n               NULL,\n               uiOutput(ns(\"radio_buttons_data_to_plot\")),\n               uiOutput(ns(\"data_upload_plot_section_output\"))\n             )\n      )\n    )\n    \n  )\n}\n","type":"text"},{"name":"R/utility_load_data_regression_2_variable_srv.R","content":"# ChatGPT synthetic study dataset.\nset.seed(1)\nn <- 25\nMinutes_Studied <- round(runif(n, min = 0, max = 600), 0)  # now includes 0\nTest_Score <- round(50 + 0.075 * Minutes_Studied + rnorm(n, mean = 0, sd = 5), 1)\n\n# Combine into a data frame\nstudy_data <- data.frame(\n  Minutes_Studied = Minutes_Studied,\n  Test_Score = Test_Score\n)\n\nload_data_regression_2_variable_Server <- function(id) {\n  moduleServer(\n    id,\n    function(input, output, session) {\n      ns <- session$ns\n      \n      # Store the sample data.\n      data_x_axis <- reactiveVal(NULL)\n      data_y_axis <- reactiveVal(NULL)\n      \n      # To trigger the pre_uploaded functions to re-run so data is re-updated.\n      re_run_flag <- reactiveVal(FALSE)\n      \n      # Mechanism to allow the user to specify the data sample they will be using.\n      output$data_upload <- renderUI({\n        \n        # Ensure some radio button option has been selected.\n        req(input$data_upload_choice)\n        \n        data_x_axis(NULL)\n        data_y_axis(NULL)\n        \n        # Pre-uploaded data\n        if (input$data_upload_choice == \"pre_uploaded\") {\n          \n          isolate({\n            re_run_flag(!re_run_flag())\n          })\n          \n          return(\n            tagList(\n              HTML(\"<br>\"),\n              selectInput( \n                ns(\"data_set_pre_uploaded\"), \n                \"Which data set would you like to analyse?\", \n                list(\"study_data\", \"iris\", \"mtcars\", \"trees\", \"airquality\", \"pressure\") \n              ),\n              HTML(\"<p><i>Note: These are common data sets. If you want to learn more about them, feel free to look on Google!<i><\/p>\")\n            )\n          )\n        }\n        \n        # Manual upload data.\n        if (input$data_upload_choice == \"manually_specified\") {\n          return(\n            tagList(\n              HTML(\"<br>\"),\n              HTML(\"<p><b>Enter data into the text box below for each sample.<\/b>\n                <ul>\n                  <li>All values must be numeric, and numbers should contain no spaces or any characters other than a '.' for a decimal place.<\/li>\n                  <li>Each value must be on it's own line, or comma seperated.<\/li>\n                  <li>There must be the same number of values in each textbox.<\/li>\n                  <li>Don't forget to press 'Upload' once you are finished!<\/li>\n                <\/ul><\/p><br>\"),\n              \n              # Textbox -> condition 1 data entry.\n              HTML(\"<p><b>x-axis:<\/b><\/p>\"),\n              textAreaInput( \n                ns(\"manual_data_upload_textbox_x_axis\"), \n                NULL, \n                value = \"\",\n                width = \"100%\"\n              ),\n              \n              # Textbox -> condition 2 data entry.\n              HTML(\"<p><b>y-axis:<\/b><\/p>\"),\n              textAreaInput( \n                ns(\"manual_data_upload_textbox_y_axis\"), \n                NULL, \n                value = \"\",\n                width = \"100%\"\n              ),\n              \n              # Upload action button. Wrapped in a fluid row to make it right-aligned.\n              fluidRow(\n                column(8),\n                column(4,\n                       actionButton(\n                         inputId = ns(\"load_manual_data\"),\n                         label = \"Upload\",\n                         class = \"btn-success text-white\",\n                         style = \"color: #fff;\",\n                         width = \"100%\"\n                       ),\n                )\n              )\n              \n            )\n          )\n        }\n        \n      })\n      \n      # When the user chooses a pre uploaded data set, prompt them to choose the numeric column they wish to analyse.\n      output$numeric_column_seleciton_pre_uploaded_data <- renderUI({\n        req(input$data_set_pre_uploaded)\n        \n        # Only display if the pre_uploaded radio button option is selected.\n        if (input$data_upload_choice != \"pre_uploaded\") {\n          return()\n        }\n        \n        # Get numeric columns\n        data = get(input$data_set_pre_uploaded)\n        numeric_cols <- names(data)[sapply(data, is.numeric)]\n        \n        data_to_store = get(input$data_set_pre_uploaded)[[numeric_cols[1]]]\n        data_x_axis(data_to_store)\n        data_to_store = get(input$data_set_pre_uploaded)[[numeric_cols[2]]]\n        data_y_axis(data_to_store)\n        \n        # Select button for the identified numeric columns.\n        return(\n          tagList(\n            HTML(\"<br>\"),\n            fluidRow(\n              column(6,\n                     selectInput( \n                       ns(\"x_axis_column_select_pre_uploaded\"), \n                       HTML(\"<p><b>Select x-axis data:<\/b><\/p>\"), \n                       numeric_cols,\n                       selected = numeric_cols[1]\n                     )\n              ),\n              column(6,\n                     selectInput( \n                       ns(\"y_axis_column_select_pre_uploaded\"), \n                       HTML(\"<p><b>Select y-axis data:<\/b><\/p>\"), \n                       numeric_cols,\n                       selected = numeric_cols[2]\n                     )\n              )\n            )\n            \n          )\n        )\n      })\n      \n      # Update the data store once the column has been selected.\n      observeEvent(input$x_axis_column_select_pre_uploaded, {\n        data_to_store = get(input$data_set_pre_uploaded)[[input$x_axis_column_select_pre_uploaded]]\n        data_x_axis(data_to_store)\n      })\n      observeEvent(input$y_axis_column_select_pre_uploaded, {\n        data_to_store = get(input$data_set_pre_uploaded)[[input$y_axis_column_select_pre_uploaded]]\n        data_y_axis(data_to_store)\n      })\n      \n      # Optional button for if the user want to separate their data by a categorical variable.\n      output$separate_categorical_variable_pre_uploaded_data <- renderUI({\n        req(input$x_axis_column_select_pre_uploaded)\n        req(input$y_axis_column_select_pre_uploaded)\n        \n        # Only display if the pre_uploaded radio button option is selected.\n        if (input$data_upload_choice != \"pre_uploaded\") {\n          return()\n        }\n        \n        # Get factor columns.\n        data = get(input$data_set_pre_uploaded)\n        factor_cols <- names(data)[sapply(data, is.factor)]\n        \n        # If no factor columns, return nothing.\n        if (length(factor_cols) == 0) {\n          return(NULL)\n        }\n        \n        factor_cols = append(\"(None)\", factor_cols)\n        \n        # Select button for the identified factor columns to optionally separate on.\n        return(\n          tagList(\n            selectInput( \n              ns(\"factor_filtering_select_pre_uploaded\"), \n              \"(OPTIONAL) Below, you can optionally indicate if you want to separate your identified numeric variable by a categorical variable.\", \n              factor_cols\n            )\n          )\n        )\n      })\n      \n      # Re-update the data store if None is selected.\n      observeEvent(input$factor_filtering_select_pre_uploaded, {\n        if (input$factor_filtering_select_pre_uploaded == \"(None)\") {\n          data_to_store = get(input$data_set_pre_uploaded)\n          data_x_axis(data_to_store[[input$x_axis_column_select_pre_uploaded]])\n          data_y_axis(data_to_store[[input$y_axis_column_select_pre_uploaded]])\n          return()\n        }\n      })\n      \n      # If the user takes up the option to separate by a categorical variable, get the category they wish to filter with.\n      output$category_choice_pre_uploaded_data <- renderUI({\n        \n        req(input$factor_filtering_select_pre_uploaded)\n        \n        # Only display if the pre_uploaded radio button option is selected and \"(None)\" is not selected for the category.\n        if (input$data_upload_choice != \"pre_uploaded\" || input$factor_filtering_select_pre_uploaded == \"(None)\") {\n          return()\n        }\n        \n        different_categories = levels(get(input$data_set_pre_uploaded)[[input$factor_filtering_select_pre_uploaded]])\n        \n        # Select button for the different categories of the identified column.\n        return(\n          tagList(\n            selectInput( \n              ns(\"specific_category_select_pre_uploaded\"), \n              \"(OPTIONAL) Select which column to filter on.\", \n              different_categories\n            )\n          )\n        )\n      })\n      \n      # Re-update the data store if a filter is selected.\n      observeEvent(input$specific_category_select_pre_uploaded, {\n        if (input$factor_filtering_select_pre_uploaded == \"(None)\") {\n          return()\n        }\n        \n        data_to_store = get(input$data_set_pre_uploaded)\n        \n        # Filter the data.\n        data_to_store <- data_to_store[data_to_store[[input$factor_filtering_select_pre_uploaded]] == input$specific_category_select_pre_uploaded, ]\n        \n        # Extract the selected column.\n        data_x_axis(data_to_store[[input$x_axis_column_select_pre_uploaded]])\n        data_y_axis(data_to_store[[input$y_axis_column_select_pre_uploaded]])\n      })\n      \n      # Used to update the data when returning to the \"pre-uploaded data\" state.\n      observe({\n        re_run_flag()\n        req(input$data_set_pre_uploaded)\n        req(input$column_select_pre_uploaded)\n        data_to_store = get(input$data_set_pre_uploaded)[[input$column_select_pre_uploaded]]\n        data(data_to_store)\n      })\n      \n      # Reactive variables to keep track of the number of values entered for each condition.\n      num_values_x_axis = reactiveVal(NULL)\n      num_values_y_axis = reactiveVal(NULL)\n      error_message_unequal_samples = reactiveVal(FALSE)\n      error_message_insufficient_unique_values_manual_upload = reactiveVal(FALSE)\n      \n      # Observe if the \"Upload\" button is clicked. This will involve checking the data, and triggering a warning if the data is not in the correct form.\n      observeEvent(input$load_manual_data, {\n        \n        req(input$manual_data_upload_textbox_x_axis)\n        req(input$manual_data_upload_textbox_y_axis)\n        \n        # Re-set warning messages\n        error_message_unequal_samples(FALSE)\n        error_message_insufficient_unique_values_manual_upload(FALSE)\n        \n        data_x_axis(NULL)\n        data_y_axis(NULL)\n        \n        x_axis = input$manual_data_upload_textbox_x_axis\n        y_axis = input$manual_data_upload_textbox_y_axis\n        \n        # Process condition 1 data.\n        splits_x_axis <- strsplit(x_axis, \"[,\\n]\")[[1]]\n        splits_x_axis <- trimws(splits_x_axis)\n        splits_x_axis = splits_x_axis[splits_x_axis != \"\"]\n        numeric_x_axis = as.numeric(splits_x_axis)\n        numeric_x_axis = numeric_x_axis[!is.na(numeric_x_axis)]\n        \n        # Process condition 2 data.\n        splits_y_axis <- strsplit(y_axis, \"[,\\n]\")[[1]]\n        splits_y_axis <- trimws(splits_y_axis)\n        splits_y_axis = splits_y_axis[splits_y_axis != \"\"]\n        numeric_y_axis = as.numeric(splits_y_axis)\n        numeric_y_axis = numeric_y_axis[!is.na(numeric_y_axis)]\n        \n        # Check if the data is 1-1, otherwise, trigger an error message.\n        if (length(numeric_x_axis) != length(numeric_y_axis)) {\n          num_values_x_axis(length(numeric_x_axis))\n          num_values_y_axis(length(numeric_y_axis))\n          error_message_unequal_samples(TRUE)\n          return()\n        }\n        \n        # Check that there are more than one unique value (table length will be greater than 1). Otherwise, sd = 0, and the test will break.\n        adequate_unique <- length(table(numeric_x_axis)) > 1 || length(table(numeric_y_axis)) > 1\n        \n        # In the case that there are not unique values, raise an error with the user.\n        if (adequate_unique == FALSE) {\n          error_message_insufficient_unique_values_manual_upload(TRUE)\n          return()\n        }\n        \n        data_x_axis(numeric_x_axis)\n        data_y_axis(numeric_y_axis)\n      })\n      \n      # Error message for when not enogh unique values.\n      output$manual_entry_unequal_samples <- renderUI({\n        req(input$data_upload_choice)\n        \n        # Only display if the manually_specified radio button option is selected.\n        if (input$data_upload_choice != \"manually_specified\") {\n          return()\n        }\n        \n        if (error_message_unequal_samples()) {\n          string = paste(\"<span style='color: red;'><p>Warning: The number of values in each condition is unequal. Condition 1 has \", \n                         as.character(num_values_x_axis()), \" values, and condition 2 has \", as.character(num_values_y_axis()), \" values.<\/p><\/span>\", sep = \"\")\n          return(\n            tagList(\n              HTML(\"<br>\"),\n              HTML(string)\n            )\n          )\n        } else {\n          return()\n        }\n      })\n      \n      # Error message for when not enough unique values.\n      output$manual_entry_insufficient_unique_values <- renderUI({\n        req(input$data_upload_choice)\n        \n        # Only display if the pre_uploaded radio button option is selected.\n        if (input$data_upload_choice != \"manually_specified\") {\n          return()\n        }\n        \n        if (error_message_insufficient_unique_values_manual_upload()) {\n          string = \"<span style='color: red;'><p>Warning: You must have at least two unique values in your manually specified data.<\/p><\/span>\"\n          return(\n            tagList(\n              HTML(\"<br>\"),\n              HTML(string)\n            )\n          )\n        } else {\n          return()\n        }\n      })\n      \n      # Plot of data\n      output$initial_data_plots = renderPlot({\n        \n        # If data has not been uploaded, don't display anything.\n        if (is.null(data_x_axis()) || is.null(data_y_axis())) {\n          return()\n        }\n        \n        plot(data_x_axis(), data_y_axis(), xlab = \"x-axis\", ylab = \"y-axis\")\n        \n      })\n      \n      # Plot UI or warning message output.\n      output$data_upload_plot_section_output <- renderUI({\n        \n        # Text to render alerting the user that they can't proceed until they make a data choice.\n        # This is when no data has been set.\n        if (is.null(data_x_axis()) || is.null(data_y_axis())) {\n          string = \"<span style='color: blue;'><p>In order to proceed, you must select some data to act as your sample.<\/p><\/span>\"\n          return(\n            tagList(\n              HTML(string)\n            )\n          )\n        }\n        \n        # If data has been set, display the plots.\n        return(\n          tagList(\n            plotOutput(ns(\"initial_data_plots\"),  width = \"100%\")\n          )\n        )\n      })\n      \n      # To make the data accessible outside of the module.\n      list(data_x_axis = data_x_axis, \n           data_y_axis = data_y_axis)\n\n    }\n    \n  )\n}\n","type":"text"},{"name":"R/utility_load_data_regression_2_variable_ui.R","content":"load_data_regression_2_variable_UI <- function(id, test_name = \"1-sample t-test\") {\n  ns <- NS(id)\n  tagList(\n    \n    ############ SECTION: Input Data ############\n    fluidRow(\n      column(7,\n             tight_card(\n               \"Input Sample Data\",\n               HTML(\"<p>In order to do a regression t-test, we need to specify the x-axis and y-axis for the linear model.<\/p>\"),\n               \n               # User specifies whether they will use inbuilt data or manually specify data.\n               radioButtons( \n                 inputId = ns(\"data_upload_choice\"), \n                 label = HTML(\"<p><b>What data source will you be using?<\/b><\/p>\"), \n                 choices = list( \n                   \"Pre-uploaded Data\" = \"pre_uploaded\", \n                   \"Manually Specified Data\" = \"manually_specified\" \n                 ),\n                 selected = NA\n               ),\n               \n               # Mechanism for user to specify data depending on radio button option.\n               uiOutput(ns(\"data_upload\")),\n               \n               # These will output only for the case that the \"pre_uploaded\" option is selected.\n               uiOutput(ns(\"numeric_column_seleciton_pre_uploaded_data\")),\n               uiOutput(ns(\"separate_categorical_variable_pre_uploaded_data\")),\n               uiOutput(ns(\"category_choice_pre_uploaded_data\")),\n               \n               # These will output only for the case that the \"manually_specified\" option is selected.\n               uiOutput(ns(\"manual_entry_unequal_samples\")),\n               uiOutput(ns(\"manual_entry_insufficient_unique_values\")),\n               header_colour = \"#3179ae\"\n             )\n      ),\n      column(5,\n             tight_card(\n               NULL,\n               uiOutput(ns(\"data_upload_plot_section_output\"))\n             )\n      )\n    ), \n\n    \n  )\n}\n","type":"text"},{"name":"R/ztest_1_sample_srv.R","content":"oneSampleZTestServer <- function(id) {\n  \n  moduleServer(id, function(input, output, session) {\n    \n    ns <- session$ns\n    \n    \n    ############################ Modal Intro ############################# \n    \n    # Text\n    observeEvent(input$learning_text, {\n      showModal(modalDialog(\n        title = \"The '1-Sample z-test'\",\n        \n        withMathJax(HTML(\"<p>\n              Suppose that in a made-up country, there is a statistics exam that all high school students take. If a student received a mark in the exam of 140 or over,\n              it means that they are demonstrating a satisfactory level of statistical knowledge as deemed by the education board. Based on data from multiple years, it’s\n              known that the population standard deviation in test scores is 7.5.<br><br>\n\n              Mr. Han is a statistics teacher who has been testing some new innovative teaching methods. In particular, he wants to test whether the average exam grade for\n              the 25 students in his class is statistically greater than a mark of 140.<br><br>\n\n              To do this, Mr. Han sets up a hypothesis test. He lets the symbol \\\\(\\\\mu \\\\) represent the average of his class. He sets up the null hypothesis that his class’s\n              average grade is 140. Mathematically, this is written as:<br>\n\n              <center><p style='font-size: 16px'>\\\\( H_{0} : \\\\mu = 140 \\\\)<\/p><\/center><br>\n\n              When setting up the alternate hypothesis, because Mr. Han is interested in seeing if his innovative teaching approach leads to marks greater than 140, we set up a\n              one-sided alternate hypothesis, written mathematically as:\n\n              <center><p style='font-size: 16px'>\\\\( H_{1} : \\\\mu > 140 \\\\)<\/p><\/center><br>\n\n              Mr. Han’s main idea is that we will use our sample of 25 students to determine whether there is evidence to support or reject the null hypothesis.\n          <\/p>\")),\n        fluidRow(\n          column(8,\n                 withMathJax(HTML(\"<p>\n                   <h5><u>How does Mr. Han go about doing this?<\/u><\/h5><br>\n\n                    We can use the box model to model the hypothesis test. However, there is a caveat: We do not know all the specific tickets to place in the box. Instead, we\n                    will specify the mean and standard deviation to summarise the tickets in the box. From the null hypothesis, we are claiming that the mean of the box is 140.\n                    We also know that the population standard deviation (denoted by \\\\(\\\\mu \\\\)) is equal to 7.5. Hence, we place these values into the box.<br><br>\n\n                    Next, we want to turn our attention to the test scores that Mr. Han’s students achieved in the class. Let’s say that the 25 students had an average score of\n                    142.843. As there were 25 students, we specify: \\\\(n = 25 \\\\). The average score of 142.843 is referred to as the observed value (OV). With these details drawn, \n                    we have completed the box model representation.<br><br>\n                   <\/p>\"))\n          ),\n          column(4,\n                 HTML(\"<br>\"),\n                 grVizOutput(ns(\"intro_example_box_model\"), width = \"80%\", height = \"70%\"),\n          )\n        ),\n        HTML(\"<p><br>\n                With the box made, Mr. Han can now calculate the test statistic. The calculation is as follows:<br>\n                <\/p>\"),\n        withMathJax(\n          HTML(paste(\"$$\\\\begin{align*} \\\\text{Test-Statistic (TS)} &= \\\\frac{\\\\text{OV} - \\\\text{EV}}{\\\\text{SE}}\n                              \\\\\\\\ &= \\\\frac{\\\\text{OV} - \\\\text{EV}}{\\\\frac{\\\\sigma}{\\\\sqrt{n}}}\n                              \\\\\\\\ &= \\\\frac{142.843 - 140}{\\\\frac{7.5}{\\\\sqrt{25}}}\n                              \\\\\\\\ &= 1.895 \\\\text{ (3 decimal places)} \\\\end{align*}$$\", sep = \"\"))\n        ),\n        HTML(\"<p>\n            With the test statistic found, Mr. Han is ready to find the p-value. Play around with the remainder of this exercise to help Mr. Han find the p-value, and test whether\n            the null hypothesis is supported or rejected.\n             <\/p>\"),\n        easyClose = TRUE,\n        footer = modalButton(\"Close\"),\n      ))\n    })\n    \n    # Example box model\n    output$intro_example_box_model <- renderGrViz({\n      string = \"digraph diagram {\n          graph [layout = dot, rankdir = TB]\n\n          node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12, width = 2.5]\n          box [label = '&mu; = 140; &sigma; = 7.5']\n\n          node [shape = oval,width = 1.5,fillcolor = \\\"#f9ffbd\\\", fontsize = 12]\n          sample [label = 'OV = 142.843']\n\n          edge [minlen = 2]\n            box->sample [label = '  n = 25', fontsize = 12, labeldistance = 5]\n          }\"\n      return(grViz(string))\n    })\n    \n    ############################ Uploading Data Mechanism ############################# \n    \n    sample_data_session <- load_1_sample_data_Server(id = \"loading_data\")\n    \n    # Store the sample data.\n    sample_data <- reactiveVal(NULL)\n    \n    # Variable that is true when the data has been specified, meaning the rest of the exercise can commence\n    # This variable can be accessed by the ui conditional panel.\n    output$render_rest_of_exercise <- reactive({\n      !is.null(sample_data_session$data())\n      sample_data(sample_data_session$data())\n    })\n    outputOptions(output, \"render_rest_of_exercise\", suspendWhenHidden = FALSE)\n    \n    ################################################################\n    \n    # Numeric text field to enter the population sd.\n    output$pop_sd_numeric_input <- renderUI({\n      sample_sd = sd(sample_data() ,na.rm = TRUE)\n      numericInput(\n        ns(\"population_standard_deviation_numeric\"),\n        NULL,\n        value = sample_sd,\n        min = 0\n      )\n    })\n    \n    # Button logic to set the pop sd to the sample sd.\n    observeEvent(input$set_pop_sd_to_sample, {\n      req(input$population_standard_deviation_numeric)\n      sample_sd = sd(sample_data() ,na.rm = TRUE)\n      updateNumericInput(\n        session,\n        inputId = ns(\"population_standard_deviation_numeric\"),\n        value = sample_sd\n      )\n    })\n    \n    # Override the sd value to be equal to the sample sd if it is less than or equal to 0.\n    observeEvent(input$population_standard_deviation_numeric, {\n      if (is.na(input$population_standard_deviation_numeric) || input$population_standard_deviation_numeric <= 0) {\n        sample_sd = sd(sample_data() ,na.rm = TRUE)\n        updateNumericInput(\n          session,\n          inputId = ns(\"population_standard_deviation_numeric\"),\n          value = sample_sd\n        )\n      }\n    })\n    \n    # Box model plot\n    output$box_model <- renderGrViz({\n      \n      if (is.null(input$null_mu) || is.null(input$population_standard_deviation_numeric)) {\n        return()\n      }\n      \n      # String with mu and sigma.\n      pop_details = paste(\"&mu; = \", as.character(round(input$null_mu, digits = 3)), \"; &sigma; = \", as.character(round(input$population_standard_deviation_numeric, digits = 3)))\n      \n      # Set up graph and box\n      diagram = \"digraph diagram { graph [layout = dot, rankdir = TB] node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12, width = 2.5] box [label = '\"\n      diagram = paste(diagram, pop_details, \"']\", sep = \"\")\n      \n      # Set up sample circle.\n      diagram = paste(diagram, \" node [shape = oval,width = 1.5,fillcolor = \\\"#f9ffbd\\\", fontsize = 12] sample [label = '\", \"OV = \",\n                      as.character(round(mean(sample_data(), na.rm = TRUE), digits = 3)), \"']\", sep = \"\")\n      \n      # Create edge between box and circle.\n      # Annotate edge with n value.\n      n = length(sample_data())\n      diagram = paste(diagram, \" edge [minlen = 2] box->sample [label = '  n = \", n, \"', fontsize = 12, labeldistance = 5]}\", sep = \"\")\n      \n      return (grViz(diagram))\n    })\n    \n    # Null hypothesis (rendered) output.\n    output$null_hypothesis_output <- renderUI({\n      hypothesis = paste(\"<p style='font-size: 16px;'>\\\\( H_0: \\\\) \\\\( \\\\mu\", \"=\", as.character(round(input$null_mu, digits = 3)), \"\\\\)<\/p>\")\n      return (\n        tagList(\n          HTML(\"<center>\"),\n          withMathJax(HTML(hypothesis)),\n          HTML(\"<\/center>\")\n        )\n      )\n    })\n    \n    # Alternate hypothesis (rendered) output.\n    output$alternate_hypothesis_output <- renderUI({\n      \n      null_mean_string = as.character(round(input$null_mu, digits = 3))\n      \n      # Specify alternate hypothesis in reference to whether the user chooses to do a one-sided or two-sided test.\n      hypothesis = paste(\"<p style='font-size: 16px;'>\\\\( H_1: \\\\) \\\\(\\\\mu\", \"\\\\neq\", null_mean_string, \"\\\\)<\/p>\")\n      if (input$alternate_hypothesis_choice == 2) {\n        hypothesis = paste(\"<p style='font-size: 16px;'>\\\\( H_1: \\\\) \\\\(\\\\mu\", \">\", null_mean_string, \"\\\\)<\/p>\")\n      } else if (input$alternate_hypothesis_choice == 3) {\n        hypothesis = paste(\"<p style='font-size: 16px;'>\\\\( H_1: \\\\) \\\\(\\\\mu\", \"<\", null_mean_string, \"\\\\)<\/p>\")\n        \n      }\n      return (\n        tagList(\n          HTML(\"<center>\"),\n          withMathJax(HTML(hypothesis)),\n          HTML(\"<\/center>\")\n        )\n      )\n    })\n    \n    output$assumption_2_plots <- renderUI({\n      \n      qq_plot <- renderPlot({\n        qqnorm(sample_data())\n        qqline(sample_data(), col = \"red\")\n      })\n      \n      box_plot <- renderPlot({\n        boxplot(sample_data(), main = \"Boxplot of Sample Data\")\n      })\n      \n      hist_plot <- renderPlot({\n        hist(sample_data(),\n             main = \"Histogram of Sample Data\",\n             xlab = \"\",\n             breaks = 30)\n      })\n      \n      return(\n        fluidRow(\n          column(4, qq_plot),\n          column(4, box_plot),\n          column(4, hist_plot)\n        )\n      )\n    })\n    \n    \n    EV_string = reactiveVal(\"\")\n    SE_string = reactiveVal(\"\")\n    \n    # Expected value and standard error output.\n    output$ev_and_se_text <- renderUI({\n      \n      sample_size = length(sample_data())\n      \n      # Find EV and SE.\n      mean_ = input$null_mu\n      sd_ = input$population_standard_deviation_numeric\n      EV = mean_\n      SE = sd_ / sqrt(sample_size)\n      \n      EV_string(as.character(round(EV, 5)))\n      SE_string(as.character(round(SE, 5)))\n      \n      expected_value = withMathJax(\n        HTML(\"<p>Expected Value:<\/p>\"),\n        HTML(paste(\"$$\\\\begin{align*} \\\\text{EV} &= \\\\mu \\\\\\\\ &=\", EV_string(), \"\\\\end{align*}$$\", sep = \"\"))\n      )\n      \n      standard_error = withMathJax(\n        HTML(\"<p>Standard Error:<\/p>\"),\n        HTML(paste(\"$$\\\\begin{align*} \\\\text{SE} &= \\\\frac{\\\\sigma}{\\\\sqrt{n}} \\\\\\\\ &= \\\\frac{\", round(sd_, 5) , \"}{\\\\sqrt{\",\n                   as.character(sample_size), \"}}\\\\\\\\ &= \", SE_string(), \"\\\\end{align*}$$\", sep = \"\"))\n      )\n      \n      return(\n        tagList(\n          expected_value, standard_error\n        )\n      )\n    })\n    \n    test_stat = reactiveVal(\"\")\n    \n    # Test statistic output.\n    output$test_statistic_calculation <- renderUI({\n      \n      observed_val = mean(sample_data(), na.rm = TRUE)\n      \n      # Calculate test statistic.\n      temp = (observed_val - as.numeric(EV_string()))/as.numeric(SE_string())\n      temp = as.character(round(temp, 4))\n      test_stat(temp)\n      \n      t_stat = withMathJax(\n        HTML(paste(\"$$\\\\begin{align*} \\\\text{TS} &= \\\\frac{\\\\text{OV} - \\\\text{EV}}{\\\\text{SE}} \\\\\\\\ &= \\\\frac{\", as.character(round(observed_val,5)), \" - \",\n                   EV_string(), \"}{\", SE_string(), \"} \\\\\\\\ &= \", test_stat(), \"\\\\end{align*}$$\", sep = \"\"))\n      )\n      additional_line = HTML(paste(\"<p style = 'text-align: left;'><span style='color: blue;'><i>The value for the test-statistic is \", test_stat(), \". <\/i><\/span><\/p>\", sep = \"\"))\n      return(\n        tagList(\n          t_stat,\n          additional_line\n        )\n      )\n    })\n    \n    p_val = reactiveVal(0)\n    \n    # P-value text output and calculation.\n    output$p_value_prelude <- renderUI({\n      \n      # General prelude text about what the p-value is.\n      first_string = HTML(paste(\"<p>The p-value is the probability of observing a test-statistic <b>more extreme that our test statistic of \", test_stat(), \".<\/b><\/p>\", sep = \"\"))\n      \n      # Specifically how to find the p-value (based upon alternate hypothesis).\n      second_string = \"<p>The test statistics fall on a standard normal curve. \"\n      if (input$alternate_hypothesis_choice == 1) {\n        negative_test_stat = as.character(-abs(as.numeric(test_stat())))\n        positive_test_stat = as.character(abs(as.numeric(test_stat())))\n        second_string = paste(second_string, \"As we are doing a two-sided alternate hypothesis, we are interested in finding the <b>area below \", negative_test_stat,\n                              \" and above \", positive_test_stat, \".<\/p><\/b>\", sep = \"\")\n      } else if (input$alternate_hypothesis_choice == 2){\n        second_string = paste(second_string, \"As we are doing a one-sided greater than alternate hypothesis, we are interested in finding the <b>area above \", test_stat(),\n                              \".<\/p><\/b>\", sep = \"\")\n      } else if (input$alternate_hypothesis_choice == 3){\n        second_string = paste(second_string, \"As we are doing a one-sided less than alternate hypothesis, we are interested in finding the <b>area below \", test_stat(),\n                              \".<\/p><\/b>\", sep = \"\")\n      }\n      second_string = HTML(second_string)\n      \n      # Calculate p-value.\n      p_val_local = 0\n      if (input$alternate_hypothesis_choice == 1) {\n        p_val_local = 2 * (1 - pnorm(abs(as.numeric(test_stat()))))\n      } else if (input$alternate_hypothesis_choice == 2) {\n        p_val_local = 1 - pnorm(as.numeric(test_stat()))\n      } else if (input$alternate_hypothesis_choice == 3) {\n        p_val_local = pnorm(as.numeric(test_stat()))\n      }\n      p_val(p_val_local)\n      \n      # String to output the p-value.\n      p_value = withMathJax(HTML(\"<p style='font-size: 16px; text-align: center;'>\\\\( p =\", as.character(round(p_val_local,5)) ,\"\\\\)<\/p>\"))\n      \n      return(\n        tagList(\n          first_string,\n          second_string,\n          p_value\n        )\n      )\n      \n    })\n    \n    # Histogram with normal curve to shown normal curve approximation.\n    output$test_stat_normal_plot = renderPlot({\n      return(curve_shaded_test_stat(dnorm, list(mean = 0, sd = 1), as.numeric(test_stat()), input$alternate_hypothesis_choice))\n    })\n    \n    # Process significance level text input.\n    alpha = reactiveVal(0.05)\n    alpha_warning = reactiveVal(FALSE)\n    observeEvent(input$alpha_value, {\n      if (is.na(input$alpha_value) || input$alpha_value < 0 || input$alpha_value > 1) {\n        alpha(0.05)\n        alpha_warning(TRUE)\n      } else {\n        alpha(input$alpha_value)\n        alpha_warning(FALSE)\n      }\n    })\n    \n    # Error message for when the value for alpha is invalid.\n    output$significance_level_warning <- renderUI({\n      if (alpha_warning()) {\n        return(\n          HTML(\"<span style='color: red;'><p>Error: The value for α must be between 0 and 1.<\/p><\/span>\")\n        )\n      }\n    })\n    \n    # Hypothesis test output\n    output$conclusion_output <- renderUI({\n      \n      # Change > or < sign depending on whether the p-value is less than or greater than alpha.\n      math_line = withMathJax(\n        HTML(paste(\"$$\\\\begin{align*} \\\\alpha &> p \\\\\\\\\", as.character(alpha()), \" &> \", as.character(round(p_val(), 4)), \"\\\\end{align*}$$\", sep = \"\"))\n      )\n      conclusion_line = HTML(\"<span style='color: blue;'><p>As the p value is less than our significance level, we <b>reject the null hypothesis<\/b>.<\/p><\/span>\")\n      if (p_val() > alpha()) {\n        math_line = withMathJax(\n          HTML(paste(\"$$\\\\begin{align*} \\\\alpha &< p \\\\\\\\\", as.character(alpha()), \" &< \", as.character(round(p_val(), 4)), \"\\\\end{align*}$$\", sep = \"\"))\n        )\n        conclusion_line = HTML(\"<span style='color: blue;'><p>As the p value is greater than our significance level, we <b>accept the null hypothesis<\/b>.<\/p><\/span>\")\n      }\n      \n      return(\n        tagList(\n          math_line,\n          conclusion_line\n        )\n      )\n    })\n    \n    # Process confidence level text input.\n    confidence_level = reactiveVal(0.95)\n    alpha_warning_confidence_lvel = reactiveVal(FALSE)\n    observeEvent(input$confidence_level, {\n      if (is.na(input$confidence_level) || input$confidence_level <= 0 || input$confidence_level >= 1) {\n        confidence_level(0.95)\n        alpha_warning_confidence_lvel(TRUE)\n      } else {\n        confidence_level(input$confidence_level)\n        alpha_warning_confidence_lvel(FALSE)\n      }\n    })\n    \n    # Error message for when the value for alpha is invalid.\n    output$confidence_level_warning <- renderUI({\n      if (alpha_warning_confidence_lvel()) {\n        return(\n          HTML(\"<span style='color: red;'><p>Error: The value for confidence level must be between 0 and 1.<\/p><\/span>\")\n        )\n      }\n    })\n    \n    # Confidence interval output\n    output$confidence_level_output = renderUI({\n      \n      xbar = as.numeric(EV_string())\n      se = as.numeric(SE_string())\n      conf_level = as.numeric(confidence_level())\n      alpha = 1 - conf_level\n      mu0 = as.numeric(input$null_mu)\n      \n      z_val = qnorm(1 - alpha/2)\n      \n      formula_line = substitution_line = answer_line = NULL\n      conclusion_line = NULL\n      \n      # Compute CI and generate lines based on hypothesis type\n      if (input$alternate_hypothesis_choice == 1) {\n        # Two sided\n        lower = xbar - z_val * se\n        upper = xbar + z_val * se\n        \n        formula_line = \"$$CI = \\\\bar{x} \\\\pm z_{\\\\alpha/2} \\\\cdot SE$$\"\n        substitution_line = paste0(\"$$CI = \", round(xbar,4), \" \\\\pm \", round(z_val,4), \" \\\\times \", round(se,4), \"$$\")\n        answer_line = paste0(\"$$CI = (\", round(lower,4), \", \", round(upper,4), \")$$\")\n        \n        # Check null\n        if (mu0 < lower || mu0 > upper) {\n          conclusion_text = \"As the null hypothesis value is outside the confidence interval, we <b>reject the null hypothesis<\/b>.\"\n        } else {\n          conclusion_text = \"As the null hypothesis value is inside the confidence interval, we <b>fail to reject the null hypothesis<\/b>.\"\n        }\n        \n      } else if (input$alternate_hypothesis_choice == 2) {\n        # One sided (greater than)\n        z_val = qnorm(1 - alpha)\n        lower = xbar - z_val * se\n        formula_line = \"$$CI = (\\\\bar{x} - z_{\\\\alpha} \\\\cdot SE, \\\\infty)$$\"\n        substitution_line = paste0(\"$$CI = (\", round(xbar,4), \" - \", round(z_val,4), \" \\\\times \", round(se,4), \", \\\\infty)$$\")\n        answer_line = paste0(\"$$CI = (\", round(lower,4), \", \\\\infty)$$\")\n        \n        if (mu0 < lower) {\n          conclusion_text = \"As the null hypothesis value is below the confidence interval, we <b>reject the null hypothesis<\/b>.\"\n        } else {\n          conclusion_text = \"As the null hypothesis value is inside the confidence interval, we <b>fail to reject the null hypothesis<\/b>.\"\n        }\n        \n      } else if (input$alternate_hypothesis_choice == 3) {\n        # One sided (less than)\n        z_val = qnorm(1 - alpha)\n        upper = xbar + z_val * se\n        formula_line = \"$$CI = (-\\\\infty, \\\\bar{x} + z_{\\\\alpha} \\\\cdot SE)$$\"\n        substitution_line = paste0(\"$$CI = (-\\\\infty, \", round(xbar,4), \" + \", round(z_val,4), \" \\\\times \", round(se,4), \")$$\")\n        answer_line = paste0(\"$$CI = (-\\\\infty, \", round(upper,4), \")$$\")\n        \n        if (mu0 > upper) {\n          conclusion_text = \"As the null hypothesis value is above the confidence interval, we <b>reject the null hypothesis<\/b>.\"\n        } else {\n          conclusion_text = \"As the null hypothesis value is inside the confidence interval, we <b>fail to reject the null hypothesis<\/b>.\"\n        }\n      }\n      \n      # Build UI\n      tagList(\n        withMathJax(HTML(formula_line)),\n        withMathJax(HTML(substitution_line)),\n        withMathJax(HTML(answer_line)),\n        HTML(paste0(\"<span style='color: blue;'><p>\", conclusion_text, \"<\/p><\/span>\"))\n      )\n    })\n    \n  })\n  \n}","type":"text"},{"name":"R/ztest_1_sample_ui.R","content":"oneSampleZTestUI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    \n    # Title Strip\n    fluidRow(\n      column(8,\n             HTML(\"<h1>1-Sample z-test<\/h1>\"),\n      ),\n      column(4,\n             tags$style(HTML(paste0(\"\n              [id='\", ns(\"learning_text\"), \"'] {\n                font-size: 20px;\n                padding: 10px 20px;\n              }\n              \"))),\n             actionButton(ns(\"learning_text\"), \"What is a 1-sample z-test?\", class = \"btn btn-primary\", style=\"color: #fff;\", width = \"100%\")\n      ),\n    ),\n    HTML(\"<br>\"),\n    \n    ############ SECTION: Input Data ############\n    load_1_sample_data_UI(ns(\"loading_data\"), test_name = \"1-sample z-test\"),\n\n    HTML(\"<br><br><br>\"),\n\n# Conditional panel ensures that the rest of the exercise is displayed only if the data has been uploaded.\nconditionalPanel(\n  condition = sprintf('output[\"%s\"]', ns(\"render_rest_of_exercise\")),\n\n      ############ SECTION: The NULL Hypothesis - Setting up the Box ############\n      fluidRow(\n        column(7,\n               tight_card(\n                 \"The 'NULL' Hypothesis - Setting up the Box\",\n                 p(\"We start by using the box model to represent our null hypothesis.\"),\n                 \n                 accordion(\n\n                   # Step 1: Enter tickets.\n                   accordion_panel(\n                      HTML(\"<b>Step 1) Specify Population Standard Deviation (σ)<\/b>\"),\n                      withMathJax(HTML(\"<p>\n                        An assumption for the 1-sample z-test is that the standard deviation of the population (denoted \\\\(\\\\sigma\\\\)) in which our sample is drawn is\n                        known. For example, a prior research paper may have estimated the population standard deviation, and you could use the value they discovered.<br><br>\n\n                        For this exercise, you can manually set the population standard deviation. However, for the most part, it is likely that the population standard\n                        deviation is unknown. Hence, for the purposes of this exercise, you can set the population standard deviation to be equal to the sample standard\n                        deviation (this has been automatically done below, but you are free to change the value). In practice, this is far from ideal, and in a future\n                        exercise, we will use the 1-sample t-test when the population standard deviation is unknown.<\/p>\")),\n                      HTML(\"<br>\"),\n                      fluidRow(\n                        column(7,\n                               actionButton(\n                                 inputId = ns(\"set_pop_sd_to_sample\"),\n                                 label = \"Set Population SD to be Sample SD\",\n                                 class = \"btn-primary\",\n                                 style = \"color: #fff;\",\n                                 width = \"100%\"\n                               )\n                        ),\n                        column(2,\n                               withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>\\\\(\\\\sigma = \\\\)<\/p>\"))\n                        ),\n                        column(3,\n                               uiOutput(ns(\"pop_sd_numeric_input\"))\n                        ),\n                      )\n                   ),\n                   \n                   # Step 2: Specify NULL Hypothesis\n                   accordion_panel(\n                     HTML(\"<b>Step 2) Specify NULL Hypothesis<\/b>\"),\n                     HTML(\"<p>Next we need to specify the 'null' hypothesis. In this test we are focusing on the mean, so the null hypothesis is that the population mean\n                          is equal to some value which we set below.<\/p>\"),\n                     \n                     withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>Given \\\\(\\\\mu \\\\), where \\\\(\\\\mu \\\\) is the mean of some variable:<\/p>\")),\n                     fluidRow(\n                       column(7),\n                       column(2,\n                              withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>\\\\( H_0: \\\\) \\\\(\\\\mu = \\\\)<\/p>\"))\n                       ),\n                       column(3,\n                              numericInput(\n                                ns(\"null_mu\"),\n                                NULL,\n                                value = 140\n                              ),\n                       ),\n                     )\n                   ),\n                   \n                   # Other\n                   accordion_panel(\n                     HTML(\"<b>Other<\/b>\"),\n                     HTML(\"<p><ul>\n                            <li>The value for <b>n<\/b> comes from the number of values in the sample chosen above.<\/li>\n                            <li>The <b>observed value (OV)<\/b> comes from the mean of the sample chosen above.<\/li>\n                         <\/ul><\/p>\")\n                   )\n                   \n                 ),\n                 header_colour = \"#3179ae\"\n               )\n        ),\n        column(5,\n               tight_card(\n                 NULL,\n                 HTML(\"<center>\"),\n                 grVizOutput(ns(\"box_model\"), width = \"70%\", height = \"70%\"),\n                 HTML(\"<\/center>\")\n               ),\n        )\n      ),\n\n      HTML(\"<br><br><br>\"),\n\n      ########### SECTION: The Alternate Hypothesis ############\n      fluidRow(\n        column(7,\n               tight_card(\n                 \"The Alternate Hypothesis\",\n                 HTML(\"<p>Specify what type of alternate hypothesis you will be using below:<\/p>\"),\n                 HTML(\"<br>\"),\n                 radioButtons(\n                   inputId = ns(\"alternate_hypothesis_choice\"),\n                   label = NULL,\n                   choices = list(\n                     \"Two Sided\" = 1,\n                     \"One Sided (greater than)\" = 2,\n                     \"One Sided (less than)\" = 3\n                   )\n                 ),\n                 header_colour = \"#3179ae\"\n               )\n        ),\n        column(5,\n               tight_card(\n                 NULL,\n                 HTML(\"<p><b>Null Hypothesis<\/b><\/p>\"),\n                 uiOutput(ns('null_hypothesis_output')),\n                 HTML(\"<p><b>Alternate Hypothesis<\/b><\/p>\"),\n                 uiOutput(ns('alternate_hypothesis_output')),\n               )\n        )\n      ),\n\n      HTML(\"<br><br><br>\"),\n      \n      ############ SECTION: Assumptions ############\n      fluidRow(\n        column(12,\n               tight_card(\n                 \"Assumptions\",\n                 HTML(\"<p>For the hypothesis test to be valid, we need to check the following assumptions:<\/p>\"),\n\n                 accordion(\n                   open = FALSE,\n                   \n                   # Assumption 1: Independent Samples\n                   accordion_panel(\n                     HTML(\"<b>Assumption 1: Independent Sample<\/b>\"),\n                     HTML(\"<p>The first assumption is that our sample is <b>independent and randomly chosen<\/b>.<\/p>\"),\n                     HTML(\"<p><span style='color: blue;'><b>How do we check?<\/b><\/span> <i>We check by investigating the experimental setup.<\/i><br><br>\n                            For example, consider we were investigating data for a proportion test involving human participants. We could read the accompanying scientific\n                            publication to understand the methodology they used to gather the people in the sample.<\/p>\")\n                   ),\n                   \n                   # Assumption 2: Independent Samples\n                   accordion_panel(\n                     HTML(\"<b>Assumption 2: Normality<\/b>\"),\n                     HTML(\"<p>The second assumption is that the sample means follow a normal distribution.\"),\n                     HTML(\"<p><span style='color: blue;'><b>How do we check?<\/b><\/span>\n                           <br><br>\n                     \n                           <b>Idea 1: Large n<\/b><br>\n                           Recall that the central limit theorem tells us that if we take a sufficiently large number of draws from the box, then the sample\n                           means will approximately follow a normal distribution. If confused, please do the exerice at Fundamentals > Box Model Part 2.\n                            <ul>\n                              <li>Recall that the central limit theorem tells us that if we take a sufficiently large number of draws from the box, then the sample\n                              means will approximately follow a normal distribution. If confused, please do the exerice at Fundamentals > Box Model Part 2.<\/li>\n                              <li>One way to gauge whether the central limit theorem holds or not is to see how large our sample is (this is indicated by the \\\"n\\\" in\n                              the box model above).<\/li>\n                              <li>Many textbooks will say that you can say that you can use the rule of thumb that the central limit theorem will apply if we have 30\n                              or more draws. BEWARE - this is not always true! If the distribution of the values is very skewed, you will need much more than 30 draws!<\/li>\n                            <\/ul>\n                            \n                            <br>\n                            <b>Idea 2: QQ-plot, Boxplot and Histogram<\/b><br>\n                            We learnt that if our data has some specific properties, then required a smaller value for n for the CLT to apply. In particular...\n                            <ul>\n                              <li>(QQ-plot) If the sample closely follows the QQ line, it suggests the data is normally distribued. Data that is normally distributed\n                              requires far less point for the CLT to apply.<\/li>\n                              <li>(Boxplot and Histogram) If the data is symmetric, less points are required for the CLT. These plots can also be used to indicate whether the \n                              data appears to be normally distributed.<\/li>\n                            <\/ul>\n                       <\/p>\"),\n                     uiOutput(ns(\"assumption_2_plots\"))\n                   ),\n                   \n                   # Assumption 3: Known Population Standard Deviation\n                   accordion_panel(\n                     HTML(\"<b>Assumption 3: Known Population Standard Deviation<\/b>\"),\n                     HTML(\"<p>As mentioned previously in \\\"The NULL Hypothesis - Setting up the Box\\\" section, it is assumed that the population standard deviation is known.<\/p>\")\n                     \n                   ),\n                 ),\n                 header_colour = \"#3179ae\"\n              )\n        )\n      ),\n\n      HTML(\"<br><br><br>\"),\n\n      ############ SECTION: Test Statistics ############\n      fluidRow(\n        column(12,\n               tight_card(\n                 \"Test Statistic\",\n                 fluidRow(\n                   column(6,\n                          HTML(\"<p><b>Step 1) Calculate Expected Value (SE) and Standard Error (SE)<\/b><\/p>\"),\n                          uiOutput(ns(\"ev_and_se_text\"))\n                   ),\n                   column(6,\n                          HTML(\"<p><b>Step 2) Test Statistic Calculation<\/b><\/p>\"),\n                          uiOutput(ns(\"test_statistic_calculation\"))\n                   )\n                 ),\n                 header_colour = \"#3179ae\"\n               ),\n        ),\n      ),\n\n      HTML(\"<br><br><br>\"),\n\n      ############ SECTION: p-value ############\n      fluidRow(\n        column(6,\n               tight_card(\n                 \"p-value\",\n                 uiOutput(ns(\"p_value_prelude\")),\n                 header_colour = \"#3179ae\"\n               )\n        ),\n        column(6,\n               tight_card(\n                 NULL,\n                 HTML(\"<center>\"),\n                 plotOutput(ns(\"test_stat_normal_plot\"), width = \"100%\", heigh = \"325px\"),\n                 HTML(\"<\/center>\"),\n               )\n        )\n      ),\n\n      HTML(\"<br><br><br>\"),\n\n      ############ SECTION: Conclusion ############\n      fluidRow(\n        column(12,\n               tight_card(\n                 \"Conclusion (p-value)\",\n                 HTML(\"<p>One way to tell whether we accept or reject the null hypothesis is to observe whether our p-value is below or above the significance level.<\/p>\"),\n                 fluidRow(\n\n                   # Section to enter significance level.\n                   column(6,\n                          HTML(\"<p><b>Step 1) What is your significance level<\/b>?<\/p>\"),\n\n                          # Space to enter significance value.\n                          fluidRow(\n                            column(1,\n                                   withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>\\\\( \\\\alpha = \\\\)<\/p>\"))\n                            ),\n                            column(3,\n                                   numericInput(\n                                     ns(\"alpha_value\"),\n                                     NULL,\n                                     value = 0.05,\n                                     min = 0,\n                                     max = 1,\n                                     width = \"100%\"\n                                   ),\n                            ),\n                          ),\n                          uiOutput(ns(\"significance_level_warning\")),\n                   ),\n\n                   # Section to provide final result.\n                   column(6,\n                          HTML(\"<p><b>Step 2) Final Conclusion<\/b><\/p>\"),\n                          uiOutput(ns(\"conclusion_output\")),\n                   )\n                 ),\n                 header_colour = \"#3179ae\"\n               )\n        ),\n      ),\n  \n      HTML(\"<br><br><br>\"),\n  \n      ############ SECTION: Confidence Interval ############\n      fluidRow(\n        column(12,\n               tight_card(\n                 \"Conclusion (Confidence Interval)\",\n                 HTML(\"<p>\n                      A confidence interval in a 1-sample z-test shows the range of population means that are plausible at the chosen confidence level, and if the\n                      hypothesized mean falls outside this range, the null hypothesis is rejected.\n                      <br><br>\n                      \n                      We can also use a confidence interval to tell us whether we should accept or reject the null hypothesis. If the expected value DOES NOT lie within the \n                      confidence interval, then we reject the null hypothesis.\n                      <\/p>\"),\n                 fluidRow(\n                   column(6,\n                          HTML(\"<p><b>Step 1) What is your confidence level<\/b>?<\/p>\"),\n                          \n                          # Space to enter significance value.\n                          fluidRow(\n                            column(1,\n                                   withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>\\\\( \\\\alpha = \\\\)<\/p>\"))\n                            ),\n                            column(3,\n                                   numericInput(\n                                     ns(\"confidence_level\"),\n                                     NULL,\n                                     value = 0.95,\n                                     min = 0,\n                                     max = 1,\n                                     width = \"100%\"\n                                   ),\n                            ),\n                          ),\n                          uiOutput(ns(\"confidence_level_warning\")),\n                   ),\n                   column(6,\n                            HTML(\"<p><b>Step 2) Final Conclusion<\/b><\/p>\"),\n                            uiOutput(ns(\"confidence_level_output\")),\n                   )\n                 ),\n                 header_colour = \"#3179ae\"\n               )\n        ),\n      ),\n    \n    \n      HTML(\"<br><br><br><br><br><br><br>\"),\n  \n  \n  )\n)}","type":"text"},{"name":"R/ztest_proportion_test_srv.R","content":"proportionTestMainServer <- function(id) {\n  \n  moduleServer(id, function(input, output, session) {\n    \n    ns <- session$ns\n    \n    # Process the null hypothesis proportion input.\n    null_prop = reactiveVal(0.7)\n    null_proportion_warning = reactiveVal(FALSE)\n    observeEvent(input$null_porportion, {\n      if (is.na(input$null_porportion) || input$null_porportion < 0 || input$null_porportion > 1) {\n        null_prop(0.7)\n        null_proportion_warning(TRUE)\n      } else {\n        null_prop(input$null_porportion)\n        null_proportion_warning(FALSE)\n      }\n    })\n    \n    # Error message for when the value for n is invalid.\n    output$null_prop_warning <- renderUI({\n      if (null_proportion_warning()) {\n        return(\n          HTML(\"<span style='color: red;'><p>Error: The value must be between 0 and 1.<\/p><\/span>\")\n        )\n      }\n    })\n    \n    # Process the number of draws text input.\n    sample_size = reactiveVal(5)\n    number_of_draws_warning = reactiveVal(FALSE)\n    observeEvent(input$number_of_draws, {\n      if (is.na(input$number_of_draws) || input$number_of_draws < 0) {\n        sample_size(25)\n        number_of_draws_warning(TRUE)\n      } else {\n        sample_size(ceiling(input$number_of_draws))\n        number_of_draws_warning(FALSE)\n      }\n    })\n    \n    # Error message for when the value for n is invalid.\n    output$n_warning_message <- renderUI({\n      if (number_of_draws_warning()) {\n        return(\n          HTML(\"<span style='color: red;'><p>Error: The value for n must be a whole number greater than 0.<\/p><\/span>\")\n        )\n      }\n    })\n    \n    # Alternate hypothesis (rendered) output.\n    output$alternate_hypothesis_output <- renderUI({\n      \n      # Specify alternate hypothesis in reference to whether the user chooses to do a one-sided or two-sided test.\n      hypothesis = paste(\"<p style='font-size: 16px;'>\\\\( H_1: \\\\) \\\\( p\", \"\\\\neq\", as.character(null_prop()), \"\\\\)<\/p>\")\n      if (input$alternate_hypothesis_choice == 2) {\n        hypothesis = paste(\"<p style='font-size: 16px;'>\\\\( H_1: \\\\) \\\\( p\", \">\", as.character(null_prop()), \"\\\\)<\/p>\")\n      } else if (input$alternate_hypothesis_choice == 3) {\n        hypothesis = paste(\"<p style='font-size: 16px;'>\\\\( H_1: \\\\) \\\\( p\", \"<\", as.character(null_prop()), \"\\\\)<\/p>\")\n        \n      }\n      return (\n        tagList(\n          HTML(\"<center>\"),\n          withMathJax(HTML(hypothesis)),\n          HTML(\"<\/center>\")\n        )\n      )\n    })\n    \n    # Null hypothesis (rendered) output.\n    output$null_hypothesis_output <- renderUI({\n      hypothesis = paste(\"<p style='font-size: 16px;'>\\\\( H_0: \\\\) \\\\( p\", \"=\", as.character(null_prop()), \"\\\\)<\/p>\")\n      return (\n        tagList(\n          HTML(\"<center>\"),\n          withMathJax(HTML(hypothesis)),\n          HTML(\"<\/center>\")\n        )\n      )\n    })\n    \n    # Text output for assumption 2 (normal distribution).\n    output$assumption2_text_output <- renderUI({\n      \n      # Get whether we are are modelling the sample using the sum or mean.\n      sample = \"sum\"\n      if (input$box_sum_or_mean == 2) {\n        sample = \"mean\"\n      }\n      \n      string_1 = paste(\"<p>The third assumption is that the sample \", sample, \"s follow an approximate normal distribution.<\/p>\", sep = \"\")\n      string_2 = paste(\"<p><span style='color: blue;'><b>How do we check?<\/b><\/span><br>\n                     <ul>\n                        <li>Recall that the central limit theorem tells us that if we take a sufficiently large number of draws from the box,\n                             then the sample \", sample, \"s will approximately follow a normal distribution. <i>If confused, please see the box model exercise<\/i>.<\/li>\n                        <li>One way we can easily tell if the central limit theorem applies is to sample taking many draws from the box, and seeing whether the\n                            values appear normally distributed.<\/li>\n                        <li>The plot to the left shows the distribution of 10000 simulated samples.<\/li>\n                        <li>Additionally, if the distribution of tickets is symmetric and/or normally distributed, you will need to take fewer draws from the box for the sample\",\n                        sample, \"s to be normally distributed (i.e., a smaller n is needed for the central limit theorem to apply).<\/li>\n                      <ul>\n                      <\/p>\", sep = \"\")\n      return(\n        tagList(\n          HTML(string_1),\n          HTML(string_2)\n        )\n      )\n    })\n    \n    # Text asking user what their observed value is.\n    output$observed_value_output <- renderUI({\n      sample = \"sum\"\n      if (input$box_sum_or_mean == 2) {\n        sample = \"mean\"\n      }\n      string = paste(\"<p><i>What is the observed \", sample, \" that you saw from your sample?<\/i><\/p>\")\n      return(\n        tagList(\n          HTML(string)\n        )\n      )\n      \n    })\n    \n    # Process the number of draws text input.\n    observed_val = reactiveVal(0.73)\n    observed_val_warning = reactiveVal(FALSE)\n    observeEvent(input$observed_value, {\n      if (is.na(input$observed_value) || input$observed_value < 0 || input$observed_value > 1) {\n        observed_val(0.73)\n        observed_val_warning(TRUE)\n      } else {\n        observed_val(input$observed_value)\n        observed_val_warning(FALSE)\n      }\n    })\n    \n    # Error message for when the value for n is invalid.\n    output$observed_val_warning_message <- renderUI({\n      if (observed_val_warning()) {\n        return(\n          HTML(\"<span style='color: red;'><p>Error: The observed value must be between 0 and 1.<\/p><\/span>\")\n        )\n      }\n    })\n    \n    EV_string = reactiveVal(\"\")\n    SE_string = reactiveVal(\"\")\n    \n    # Expected value and standard error output.\n    output$ev_and_se_text <- renderUI({\n      \n      # Find EV and SE.\n      mean_ = null_prop()\n      sd_ = sqrt(null_prop() * (1-null_prop()))\n      EV = sample_size() * mean_\n      SE = sqrt(sample_size()) *sd_\n      if (input$box_sum_or_mean == 2) { \n        EV = mean_\n        SE = sd_/sqrt(sample_size())\n      }\n      \n      # EV and SE text (changes based upon whether the sample sum or mean is being used).\n      expected_value = \"\"\n      standard_error = \"\"\n      \n      EV_string(as.character(round(EV, 5)))\n      SE_string(as.character(round(SE, 5)))\n      \n      # Mean\n      if (input$box_sum_or_mean == 2) { \n        expected_value = withMathJax(\n          HTML(\"<p>Expected Value:<\/p>\"),\n          HTML(paste(\"$$\\\\begin{align*} \\\\text{EV} &= \\\\mu \\\\\\\\ &=\", EV_string(), \"\\\\end{align*}$$\", sep = \"\"))\n        )\n        \n        standard_error = withMathJax(\n          HTML(\"<p>Standard Error:<\/p>\"),\n          HTML(paste(\"$$\\\\begin{align*} \\\\text{SE} &= \\\\frac{\\\\sigma}{\\\\sqrt{n}} \\\\\\\\ &= \\\\frac{\", round(sd_, 5) , \"}{\\\\sqrt{\", \n                     as.character(sample_size()), \"}}\\\\\\\\ &= \", SE_string(), \"\\\\end{align*}$$\", sep = \"\"))\n        )\n        \n        # Sum\n      } else {\n        expected_value = withMathJax(\n          HTML(\"<p>Expected Value:<\/p>\"),\n          HTML(paste(\"$$\\\\begin{align*} \\\\text{EV} &= n \\\\times \\\\mu \\\\\\\\ &=\", as.character(sample_size()), \"\\\\times\", round(mean_, 5),\n                     \"\\\\\\\\ &= \", EV_string(), \"\\\\end{align*}$$\", sep = \"\"))\n        )\n        \n        standard_error = withMathJax(\n          HTML(\"<p>Standard Error:<\/p>\"),\n          HTML(paste(\"$$\\\\begin{align*} \\\\text{SE} &= \\\\sqrt{n} \\\\times \\\\sigma \\\\\\\\ &= \\\\sqrt{\", as.character(sample_size()), \"} \\\\times\", \n                     round(sd_, 5), \"\\\\\\\\ &= \", SE_string(), \"\\\\end{align*}$$\", sep = \"\"))\n        )\n      }\n      \n      return(\n        tagList(\n          expected_value, standard_error\n        )\n      )\n    })\n    \n    test_stat = reactiveVal(\"\")\n    \n    # Test statistic output.\n    output$test_statistic_calculation <- renderUI({\n      temp = (observed_val() - as.numeric(EV_string()))/as.numeric(SE_string())\n      temp = as.character(round(temp, 4))\n      test_stat(temp)\n      t_stat = withMathJax(\n        HTML(paste(\"$$\\\\begin{align*} \\\\text{TS} &= \\\\frac{\\\\text{OV} - \\\\text{EV}}{\\\\text{SE}} \\\\\\\\ &= \\\\frac{\", as.character(round(observed_val(),5)), \" - \", \n                   EV_string(), \"}{\", SE_string(), \"} \\\\\\\\ &= \", test_stat(), \"\\\\end{align*}$$\", sep = \"\"))\n      )\n      additional_line = HTML(paste(\"<p style = 'text-align: left;'><span style='color: blue;'><i>The value for the test-statistic is \", test_stat(), \". <\/i><\/span><\/p>\", sep = \"\"))\n      return(\n        tagList(\n          t_stat,\n          additional_line\n        )\n      )\n    })\n    \n    p_val = reactiveVal(0)\n    \n    # P-value text output and calculation.\n    output$p_value_prelude <- renderUI({\n      \n      # General prelude text about what the p-value is.\n      first_string = HTML(paste(\"<p>The p-value is the probability of observing a test-statistic <b>more extreme that our test statistic of \", test_stat(), \".<\/b><\/p>\", sep = \"\"))\n      \n      # Specifically how to find the p-value (based upon alternate hypothesis).\n      second_string = \"<p>The test statistics fall on a standard normal curve. \"\n      if (input$alternate_hypothesis_choice == 1) {\n        negative_test_stat = as.character(-abs(as.numeric(test_stat())))\n        positive_test_stat = as.character(abs(as.numeric(test_stat())))\n        second_string = paste(second_string, \"As we are doing a two-sided alternate hypothesis, we are interested in finding the <b>area below \", negative_test_stat, \n                              \" and above \", positive_test_stat, \".<\/p><\/b>\", sep = \"\")\n      } else if (input$alternate_hypothesis_choice == 2){\n        second_string = paste(second_string, \"As we are doing a one-sided greater than alternate hypothesis, we are interested in finding the <b>area above \", test_stat(), \n                              \".<\/p><\/b>\", sep = \"\")\n      } else if (input$alternate_hypothesis_choice == 3){\n        second_string = paste(second_string, \"As we are doing a one-sided less than alternate hypothesis, we are interested in finding the <b>area below \", test_stat(), \n                              \".<\/p><\/b>\", sep = \"\")\n      }\n      second_string = HTML(second_string)\n      \n      # Calculate p-value.\n      p_val_local = 0\n      if (input$alternate_hypothesis_choice == 1) {\n        p_val_local = 2 * (1 - pnorm(abs(as.numeric(test_stat()))))\n      } else if (input$alternate_hypothesis_choice == 2) {\n        p_val_local = 1 - pnorm(as.numeric(test_stat()))\n      } else if (input$alternate_hypothesis_choice == 3) {\n        p_val_local = pnorm(as.numeric(test_stat()))\n      }\n      p_val(p_val_local)\n      \n      # String to output the p-value.\n      p_value = withMathJax(HTML(\"<p style='font-size: 16px; text-align: center;'>\\\\( p =\", as.character(round(p_val_local,5)) ,\"\\\\)<\/p>\"))\n      \n      return(\n        tagList(\n          first_string,\n          second_string,\n          p_value\n        )\n      )\n      \n    })\n    \n    # Process significance level text input.\n    alpha = reactiveVal(0.05)\n    alpha_warning = reactiveVal(FALSE)\n    observeEvent(input$alpha_value, {\n      if (is.na(input$alpha_value) || input$alpha_value < 0 || input$alpha_value > 1) {\n        alpha(0.05)\n        alpha_warning(TRUE)\n      } else {\n        alpha(input$alpha_value)\n        alpha_warning(FALSE)\n      }\n    })\n    \n    # Error message for when the value for alpha is invalid.\n    output$significance_level_warning <- renderUI({\n      if (alpha_warning()) {\n        return(\n          HTML(\"<span style='color: red;'><p>Error: The value for α must be between 0 and 1.<\/p><\/span>\")\n        )\n      }\n    })\n    \n    # Hypothesis test output\n    output$conclusion_output <- renderUI({\n      \n      # Change > or < sign depending on whether the p-value is less than or greater than alpha.\n      math_line = withMathJax(\n        HTML(paste(\"$$\\\\begin{align*} \\\\alpha &> p \\\\\\\\\", as.character(alpha()), \" &> \", as.character(round(p_val(), 4)), \"\\\\end{align*}$$\", sep = \"\"))\n      )\n      conclusion_line = HTML(\"<span style='color: blue;'><p>As the p value is less than our significance level, we <b>reject the null hypothesis<\/b>.<\/p><\/span>\")\n      if (p_val() > alpha()) {\n        math_line = withMathJax(\n          HTML(paste(\"$$\\\\begin{align*} \\\\alpha &< p \\\\\\\\\", as.character(alpha()), \" &< \", as.character(round(p_val(), 4)), \"\\\\end{align*}$$\", sep = \"\"))\n        )\n        conclusion_line = HTML(\"<span style='color: blue;'><p>As the p value is greater than our significance level, we <b>accept the null hypothesis<\/b>.<\/p><\/span>\")\n      }\n      \n      return(\n        tagList(\n          math_line,\n          conclusion_line\n        )\n      )\n    })\n    \n    # Process confidence level text input.\n    confidence_level = reactiveVal(0.95)\n    alpha_warning_confidence_lvel = reactiveVal(FALSE)\n    observeEvent(input$confidence_level, {\n      if (is.na(input$confidence_level) || input$confidence_level <= 0 || input$confidence_level >= 1) {\n        confidence_level(0.95)\n        alpha_warning_confidence_lvel(TRUE)\n      } else {\n        confidence_level(input$confidence_level)\n        alpha_warning_confidence_lvel(FALSE)\n      }\n    })\n    \n    # Error message for when the value for alpha is invalid.\n    output$confidence_level_warning <- renderUI({\n      if (alpha_warning_confidence_lvel()) {\n        return(\n          HTML(\"<span style='color: red;'><p>Error: The value for confidence level must be between 0 and 1.<\/p><\/span>\")\n        )\n      }\n    })\n    \n    output$confidence_level_output = renderUI({\n      p_hat = as.numeric(input$observed_value)\n      n = as.numeric(input$number_of_draws)\n      conf_level = as.numeric(confidence_level())\n      alpha = 1 - conf_level\n      p0 = as.numeric(input$null_porportion)\n      \n      formula_line = substitution_line = answer_line = NULL\n      conclusion_text = NULL\n      \n      wilson_ci = function(p_hat, n, z_val) {\n        denom = 1 + z_val^2 / n\n        margin = z_val * sqrt(p_hat*(1 - p_hat)/n + z_val^2/(4*n^2))\n        lower = (p_hat + z_val^2/(2*n) - margin) / denom\n        upper = (p_hat + z_val^2/(2*n) + margin) / denom\n        return(list(lower=lower, upper=upper))\n      }\n      \n      if (input$alternate_hypothesis_choice == 1) {\n        z_val = qnorm(1 - alpha/2)\n        ci_vals = wilson_ci(p_hat, n, z_val)\n        lower = ci_vals$lower\n        upper = ci_vals$upper\n        \n        formula_line = \"$$CI = \\\\left( \\\\frac{\\\\widehat{p} + z^2/(2n) - z \\\\sqrt{\\\\widehat{p}(1-\\\\widehat{p})/n + z^2/(4n^2)}}{1 + z^2/n}, \\\\frac{\\\\widehat{p} + z^2/(2n) + z \\\\sqrt{\\\\widehat{p}(1-\\\\widehat{p})/n + z^2/(4n^2)}}{1 + z^2/n} \\\\right)$$\"\n        \n        substitution_line = paste0(\n          \"$$CI = \\\\left( \\\\frac{\", round(p_hat,4), \" + \", round(qnorm(1 - alpha/2),4)^2, \"/(2*\", n, \") - \",\n          round(qnorm(1 - alpha/2),4), \" \\\\times \\\\sqrt{(\", round(p_hat,4), \"*(1-\", round(p_hat,4), \")/\", n, \") + (\", round(qnorm(1 - alpha/2),4)^2, \"/(4*\", n, \"^2))}}{1 + \", round(qnorm(1 - alpha/2),4)^2, \"/\", n, \"}, \",\n          \"\\\\frac{\", round(p_hat,4), \" + \", round(qnorm(1 - alpha/2),4)^2, \"/(2*\", n, \") + \", round(qnorm(1 - alpha/2),4), \" \\\\times \\\\sqrt{(\", round(p_hat,4), \"*(1-\", round(p_hat,4), \")/\", n, \") + (\", round(qnorm(1 - alpha/2),4)^2, \"/(4*\", n, \"^2))}}{1 + \", round(qnorm(1 - alpha/2),4)^2, \"/\", n, \"} \\\\right)$$\"\n        )\n        \n        answer_line = paste0(\"$$CI = (\", round(lower,4), \", \", round(upper,4), \")$$\")\n        \n        if (p0 < lower || p0 > upper) {\n          conclusion_text = \"As the null proportion is outside the confidence interval, we <b>reject the null hypothesis<\/b>.\"\n        } else {\n          conclusion_text = \"As the null proportion is inside the confidence interval, we <b>fail to reject the null hypothesis<\/b>.\"\n        }\n        \n      } else if (input$alternate_hypothesis_choice == 2) {\n        z_val = qnorm(1 - alpha)\n        ci_vals = wilson_ci(p_hat, n, z_val)\n        lower = ci_vals$lower\n        \n        formula_line = \"$$CI = \\\\left( \\\\frac{\\\\widehat{p} + z^2/(2n) - z \\\\sqrt{\\\\widehat{p}(1-\\\\widehat{p})/n + z^2/(4n^2)}}{1 + z^2/n}, \\\\infty \\\\right)$$\"\n        \n        substitution_line = paste0(\n          \"$$CI = \\\\left( \\\\frac{\", round(p_hat,4), \" + \", round(z_val,4)^2, \"/(2*\", n, \") - \", round(z_val,4),\n          \" \\\\times \\\\sqrt{\", round(p_hat,4), \"*(1-\", round(p_hat,4), \")/\", n, \" + \", round(z_val,4)^2, \"/(4*\", n, \"^2)}}{1 + \", round(z_val,4)^2, \"/\", n, \"}, \\\\infty \\\\right)$$\"\n        )\n        \n        answer_line = paste0(\"$$CI = (\", round(lower,4), \", \\\\infty)$$\")\n        \n        if (p0 < lower) {\n          conclusion_text = \"As the null proportion is below the confidence interval, we <b>reject the null hypothesis<\/b>.\"\n        } else {\n          conclusion_text = \"As the null proportion is inside the confidence interval, we <b>fail to reject the null hypothesis<\/b>.\"\n        }\n        \n      } else if (input$alternate_hypothesis_choice == 3) {\n        z_val = qnorm(1 - alpha)\n        ci_vals = wilson_ci(p_hat, n, z_val)\n        upper = ci_vals$upper\n        \n        formula_line = \"$$CI = \\\\left( -\\\\infty, \\\\frac{\\\\widehat{p} + z^2/(2n) + z \\\\sqrt{\\\\widehat{p}(1-\\\\widehat{p})/n + z^2/(4n^2)}}{1 + z^2/n} \\\\right)$$\"\n        \n        substitution_line = paste0(\n          \"$$CI = \\\\left(-\\\\infty, \\\\frac{\",  \n          round(p_hat,4), \" + \", round(z_val,4)^2, \"/(2*\", n, \") + \",  \n          round(z_val,4), \" \\\\times \\\\sqrt{(\", round(p_hat,4), \"*(1-\", round(p_hat,4), \")/\", n, \") + (\", round(z_val,4)^2, \"/(4*\", n, \"^2))}}{1 + \",  \n          round(z_val,4)^2, \"/\", n, \"}\\\\right)$$\"\n        )\n        \n        answer_line = paste0(\"$$CI = (-\\\\infty, \", round(upper,4), \")$$\")\n        \n        if (p0 > upper) {\n          conclusion_text = \"As the null proportion is above the confidence interval, we <b>reject the null hypothesis<\/b>.\"\n        } else {\n          conclusion_text = \"As the null proportion is inside the confidence interval, we <b>fail to reject the null hypothesis<\/b>.\"\n        }\n      }\n      \n      tagList(\n        withMathJax(HTML(formula_line)),\n        withMathJax(HTML(substitution_line)),\n        withMathJax(HTML(answer_line)),\n        HTML(paste0(\"<span style='color: blue;'><p>\", conclusion_text, \"<\/p><\/span>\"))\n      )\n    })\n    \n    \n    ############################ Modal Intro ############################# \n    \n    # Text\n    observeEvent(input$learning_text, {\n      showModal(modalDialog(\n        title = \"The 'Proportion Test'\",\n        \n        HTML(\"<p>\n            When you walk into a room, you can be assured that lots of people will be Taylor Swift fans (you could say that people are cray-cray for Tay-Tay).<br><br>\n            \n            Let's say that we <b>'hypothesise' that 70% of people are Taylor Swift fans<\/b>. Now, to test our hypothesis, we go to our data science class of <b>30 students<\/b>\n            and ask <b>how many students are Taylor Swift fans<\/b>. The main goal here is to see if our <b>sample<\/b> is consistent with our 70% hypothesis.<br><br>\n            \n            In this regard, we set up a <b>null hypothesis<\/b> that the <b>proportion of Taylor Swift fans is 0.7<\/b> (70%). We mathematically write this as:<br>\n        <\/p>\"),\n        withMathJax(HTML(\"<center><p style='font-size: 16px'>\\\\( H_{0} : p = 0.7 \\\\)<\/p><\/center>\")),\n        HTML(\"<p><br>\n           We set up our alternate hypothesis to be that the proportion of Taylor Swift fans is <b>NOT 0.7<\/b>. We mathematically write this as:\n        <\/p>\"),\n        withMathJax(HTML(\"<center><p style='font-size: 16px'>\\\\( H_{1} : p \\\\neq 0.7 \\\\)<\/p><\/center>\")),\n        HTML(\"<p><br>\n           The main idea is that from our sample of 30 students, we want to see if there is <b>evidence to support or reject<\/b> the null hypothesis.\n        <\/p>\"),\n        fluidRow(\n          column(8,\n                 HTML(\"<p>\n                 <h5><u>How do we go about doing this?<\/u><\/h5><br>\n              \n                  We set up our box assuming that the <b>null hypothesis is true<\/b>. We add tickets valued <b>\\\"1\\\" to represent our target<\/b> (in this example, that someone \n                  likes Taylor Swift), and <b>\\\"0\\\" to represent the complement<\/b>. The tickets are arranged such that the proportion of \\\"1\\\" tickets is the same as the null \n                  hypothesis. As seen in the box model to the right, there are seven \\\"1\\\" tickets and three \\\"0\\\" tickets, meaning the proportion of \\\"1\\\"'s is correctly 70%.<br><br>\n                  \n                  After setting up our box model, we want to see if what we observe from the class is consistent with the null hypothesis. We call what we observe the <b>observed\n                  value (OV)<\/b>.<br><br>\n                  \n                  Let's say that in the class, 22 people like Taylor Swift, and 8 do not. We can represent the observed value derived from this observation using the <b>mean<\/b>\n                  or the <b>sum<\/b>.<br><br>\n                  \n                  <u>Mean:<\/u>\n                  \n                 <\/p>\"),\n                 withMathJax(\n                   HTML(paste(\"$$\\\\begin{align*} \\\\text{OV} &= \\\\frac{1 \\\\times \\\\text{Number of TS Fans} + 0 \\\\times \\\\text{Number of Non-TS Fans}}{\\\\text{Data Science Class Size}} \n                            \\\\\\\\ &= \\\\frac{1 \\\\times 22 + 0 \\\\times 8}{30} \\\\\\\\ &= \\\\frac{22}{30} \\\\\\\\ &= 0.73 \\\\text{ (2 decimal places)} \\\\end{align*}$$\", sep = \"\"))\n                 ),\n                 HTML(\"<p><u>Sum:<\/u><\/p>\"),\n                 withMathJax(\n                   HTML(paste(\"$$\\\\begin{align*} \\\\text{OV} &= 1 \\\\times \\\\text{Number of TS Fans} + 0 \\\\times \\\\text{Number of Non-TS Fans} \n                            \\\\\\\\ &= 1 \\\\times 22 + 0 \\\\times 8 \\\\\\\\ &= 22 \\\\end{align*}$$\", sep = \"\"))\n                 ),\n          ),\n          column(4,\n                 HTML(\"<br>\"),\n                 grVizOutput(ns(\"intro_example_box_model\"), width = \"80%\", height = \"70%\"),\n          )\n        ),\n        HTML(\"<p><br>\n              Now that we've introduced how to set up the box for this test, as well as what the observed value is, it's your turn to use this app to test whether our\n              observed value is consistent with our null hypothesis or not. Good luck :)\n              <\/p>\"),\n        easyClose = TRUE,\n        footer = modalButton(\"Close\"),\n      ))\n    })\n    \n    # Example box model\n    output$intro_example_box_model <- renderGrViz({\n      string = \"digraph diagram {\n        graph [layout = dot, rankdir = TB]\n      \n        node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12, width = 2.5]\n        box [label = '1, 1, 1, 1, 1, 1, 1, 0, 0, 0']\n      \n        node [shape = oval,width = 1.5,fillcolor = \\\"#f9ffbd\\\", fontsize = 12]\n        sample [label = 'Data Science Class']\n      \n        edge [minlen = 2]\n          box->sample [label = '  n = 30', fontsize = 12, labeldistance = 5]\n        }\"\n      return(grViz(string))\n    })\n    \n    ################################################################\n    \n    ############################ Plots ############################# \n    \n    output$box_model <- renderGrViz({\n      \n      tickets_string = \"\"\n      \n      prop_temp = null_prop() * 100\n      \n      # Find simplified proportion of 1's and 0's so that they are equivalent to the proportion provided in the null hypothesis.\n      gcd_value = gcd(prop_temp, 100 - prop_temp)\n      proportion_of_1s = prop_temp / gcd_value\n      proportion_of_0s = (100 - prop_temp) / gcd_value\n      \n      # Case where there are too many digits. Write using percentages.\n      if (gcd_value < 5) { # A value smaller than 5 can be chosen. But, much smaller values will lead to too many values in the box.\n        prop_temp_complement = 100 - prop_temp\n        tickets_string = paste(\"1 x \", as.character(round(prop_temp, digits = 2)), \"%, 0 x \", as.character(round(prop_temp_complement, digits = 2)), \"%\", sep = \"\")\n        \n      } else {\n        \n        # Add 1's to the string\n        for (i in 1:proportion_of_1s) {\n          if (proportion_of_1s == 0) {\n            break\n          }\n          tickets_string = paste(tickets_string, \"1,\")\n        } \n        \n        # Add 0's to the string.\n        for (i in 1:proportion_of_0s) {\n          if (proportion_of_0s == 0) {\n            break\n          }\n          tickets_string = paste(tickets_string, \"0,\")\n        } \n        tickets_string <- sub(\",$\", \"\", tickets_string)\n        \n      }\n      \n      # Get other elements for the box model\n      n = sample_size()\n      sample = \"Sample Sum\"\n      if (input$box_sum_or_mean == 2) {\n        sample = \"Sample Mean\"\n      }\n      \n      # Set up graph and box\n      diagram = \"digraph diagram { graph [layout = dot, rankdir = TB] node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12, width = 2.5] box [label = '\"\n      diagram = paste(diagram, tickets_string, \"']\", sep = \"\")\n      \n      # Set up sample circle.\n      diagram = paste(diagram, \" node [shape = oval,width = 1.5,fillcolor = \\\"#f9ffbd\\\", fontsize = 12]sample [label = '\", sample, \"']\", sep = \"\")\n      \n      # Create edge between box and circle.\n      # Annotate edge with n value.\n      diagram = paste(diagram, \" edge [minlen = 2] box->sample [label = '  n = \", n, \"', fontsize = 12, labeldistance = 5]}\", sep = \"\")\n      \n      return (grViz(diagram))\n    })\n    \n    # Histogram with normal curve to shown normal curve approximation.\n    output$empirical_draws_hist <- renderPlot({\n      \n      x_axis_string <- \"Sample Sum Value\"\n      title_string <- \"Empirical Distribution of 10000 Sample Sums with\\nOverlaid Normal Curve\"\n      if (input$box_sum_or_mean == 2) {\n        title_string <- \"Empirical Distribution of 10000 Sample Means with\\nOverlaid Normal Curve\"\n        x_axis_string <- \"Sample Mean Value\"\n      }\n      \n      # Generate data based on whether we're summing or taking mean\n      data <- if (input$box_sum_or_mean == 1) {\n        replicate(10000, sum(sample(c(1, 0), sample_size(), replace = TRUE, prob = c(null_prop(), 1 - null_prop()))))\n      } else {\n        replicate(10000, mean(sample(c(1, 0), sample_size(), replace = TRUE, prob = c(null_prop(), 1 - null_prop()))))\n      }\n      \n      # Compute normal curve parameters\n      mean_ <- null_prop()\n      sd_ <- sqrt(null_prop() * (1 - null_prop()))\n      EV <- if (input$box_sum_or_mean == 1) sample_size() * mean_ else mean_\n      SE <- if (input$box_sum_or_mean == 1) sqrt(sample_size()) * sd_ else sd_ / sqrt(sample_size())\n      \n      # Choose number of bins\n      bins_to_include <- min(length(table(data)), 20)\n      breaks_seq <- seq(min(data), max(data), length.out = bins_to_include + 1)\n      \n      # Plot histogram with density\n      hist_out <- hist(data, breaks = breaks_seq, freq = FALSE,\n                       col = \"lightgreen\", border = \"black\",\n                       xlab = x_axis_string, main = title_string)\n      \n      # Overlay normal density curve\n      x_vals <- seq(min(data), max(data), length.out = 300)\n      y_vals <- dnorm(x_vals, mean = EV, sd = SE)\n      lines(x_vals, y_vals, col = \"red\", lwd = 2)\n    })\n    \n    \n    # Histogram with normal curve to shown normal curve approximation.\n    output$test_stat_normal_plot = renderPlot({\n      return(curve_shaded_test_stat(dnorm, list(mean = 0, sd = 1), as.numeric(test_stat()), input$alternate_hypothesis_choice))\n    })\n    \n    \n    \n    ################################################################\n    \n  })\n  \n}","type":"text"},{"name":"R/ztest_proportion_test_ui.R","content":"proportionTestMainUI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    \n\n    fluidRow(\n      column(8,\n             HTML(\"<h1>Proportion Test (z-test)<\/h1>\"),\n      ),\n      column(4,\n             tags$style(HTML(paste0(\"\n                [id='\", ns(\"learning_text\"), \"'] {\n                  font-size: 20px;\n                  padding: 10px 20px;\n                }\n             \"))),\n             actionButton(ns(\"learning_text\"), \"What is the proportion test?\", class = \"btn btn-primary\", style=\"color: #fff;\", width = \"100%\")\n      ),\n    ),\n    HTML(\"<br>\"),\n    \n    \n    ############ SECTION: The NULL Hypothesis - Setting up the Box ############\n    fluidRow(\n      column(7,\n             tight_card(\n               \"The 'NULL' Hypothesis - Setting up the Box\",\n               p(\"We start by using the box model to represent our null hypothesis.\"),\n               \n               accordion(\n                 \n                 # Step 1: Specify NULL Hypothesis\n                 accordion_panel(\n                   HTML(\"<b>Step 1) Specify NULL Hypotheis (Box Tickets)<\/b>\"),\n                   HTML(\"<p>\n                        <ul>\n                          <li>First, we need to specify the 'null' hypothesis for our proportion test. As it is a proportion, the value must be between <b>0<\/b> and\n                            <b>1<\/b>.<\/li>\n                          <li>This is the proportion we are assuming our null hypothesis is equal to.<\/li>\n                          <li>The null hypothesis changes the tickets in our box that we are drawing from.<\/li>\n                        <\/ul>\n                       <\/p>\"),\n                   withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>Given \\\\( p \\\\), where \\\\( p \\\\) is the proportion of some event:<\/p>\")),\n                   fluidRow(\n                     column(7),\n                     column(2,\n                            withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>\\\\( H_0: \\\\) \\\\( p = \\\\)<\/p>\"))\n                     ),\n                     column(3,\n                            numericInput(\n                              ns(\"null_porportion\"),\n                              NULL,\n                              value = 0.7,\n                              min = 0,\n                              max = 1,\n                            ),\n                     ),\n                   ),\n                   uiOutput(ns('null_prop_warning'))\n                 ),\n                 \n                 # Step 2: Sample Size\n                 accordion_panel(\n                   HTML(\"<b>Step 2) Sample Size (Number of Draws)<\/b>\"),\n                   HTML(\"<p>\n                          <ul>\n                            <li>Specify how large your sample will be in the text box below.<\/li>\n                            <li>You can think of this as how many tickets we are drawing from the box with replacement.<\/li>\n                            <li>You will enter the observed value (i.e. the proportion you saw from the sample) later.<\/li>\n                          <\/ul>\n                         <\/p>\"),\n                   fluidRow(\n                     column(7),\n                     column(2,\n                            withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>\\\\( n =  \\\\)<\/p>\"))\n                     ),\n                     column(3,\n                            numericInput(\n                              ns(\"number_of_draws\"),\n                              label = NULL,\n                              value = 30,\n                              min = 1\n                            ),\n                     ),\n                   ),\n                   uiOutput(ns('n_warning_message'))\n                 ),\n                 \n                 # Step 3: Model Type\n                 accordion_panel(\n                   HTML(\"<b>Step 3) Model Using Sum or Sample<\/b>\"),\n                   HTML(\"<p>Third, we need to specify whether we will be modelling the sample using the mean or sum of the draws:<br><br><\/p>\"),\n                   radioButtons(\n                     ns(\"box_sum_or_mean\"),\n                     label = NULL,\n                     choices = list(\n                       \"Mean\" = 2,\n                       \"Sum\" = 1\n                     )\n                   )\n                 )\n               ),\n               header_colour = \"#3179ae\"\n             )\n      ),\n      column(5,\n             # Box model output.\n             tight_card(\n               NULL,\n               HTML(\"<center>\"),\n               grVizOutput(ns(\"box_model\"), width = \"70%\", height = \"70%\"),\n               HTML(\"<\/center>\")\n             ),\n      )\n    ),\n    \n    HTML(\"<br><br><br>\"),\n    \n    ############ SECTION: The Alternate Hypothesis ############\n    fluidRow(\n      column(7,\n             tight_card(\n               \"The Alternate Hypothesis\",\n               HTML(\"<p>Specify what type of alternate hypothesis you will be using below:<\/p>\"),\n               HTML(\"<br>\"),\n               radioButtons(\n                 inputId = ns(\"alternate_hypothesis_choice\"),\n                 label = NULL,\n                 choices = list(\n                   \"Two Sided\" = 1,\n                   \"One Sided (greater than)\" = 2,\n                   \"One Sided (less than)\" = 3\n                 )\n               ),\n               header_colour = \"#3179ae\"\n             )\n      ),\n      column(5,\n             tight_card(\n               NULL,\n               HTML(\"<p><b>Null Hypothesis<\/b><\/p>\"),\n               uiOutput(ns('null_hypothesis_output')),\n               HTML(\"<p><b>Alternate Hypothesis<\/b><\/p>\"),\n               uiOutput(ns('alternate_hypothesis_output')),\n             )\n      )\n    ),\n\n    HTML(\"<br><br><br>\"),\n\n    ############ SECTION: Assumptions ############\n    fluidRow(\n      column(12,\n             tight_card(\n               \"Assumptions\",\n               HTML(\"<p>For the hypothesis test to be valid, we need to check the following assumptions:<\/p>\"),\n\n               accordion(\n                 open = FALSE,\n                 \n                 # Assumption 1: Independent Samples\n                 accordion_panel(\n                   HTML(\"<b>Assumption 1: Independent Sample<\/b>\"),\n                   HTML(\"<p>The first assumption is that our sample is <b>independent and randomly chosen<\/b>.<\/p>\"),\n                   HTML(\"<p><span style='color: blue;'><b>How do we check?<\/b><\/span> <i>We check by investigating the experimental setup.<\/i><br><br>\n                                For example, consider we were investigating data for a proportion test involving human participants. We could read the accompanying scientific\n                                publication to understand the methodology they used to gather the people in the sample.<\/p>\")\n                 ),\n                 \n                 # Assumption 2: Independent Samples\n                 accordion_panel(\n                   HTML(\"<b>Assumption 2: Constant Proportion<\/b>\"),\n                   HTML(\"<p>The second assumption is that our sample is the <b>constant proportion<\/b> assumption. This assumption states that the probability that each sample\n                      element falls within the event of interest (stipulated in our hypotheses) is unchanging.<\/p>\"),\n                   HTML(\"<p><span style='color: blue;'><b>How do we check?<\/b><\/span> <i>We check by investigating the experimental setup.<\/i><br><br><\/p>\")\n                 ),\n                 \n                 # Assumption 3: Normal Approximation\n                 accordion_panel(\n                   HTML(\"<b>Assumption 3: Normal Approximation<\/b>\"),\n                   fluidRow(\n                     column(6,\n                            uiOutput(ns(\"assumption2_text_output\")),\n                            HTML(\"<br><br>\")\n                     ),\n                     column(6,\n                            plotOutput(ns(\"empirical_draws_hist\"), width = \"100%\", height = \"300px\"),\n                     )\n                   )\n                 )\n               ),\n               header_colour = \"#3179ae\"\n             )\n      )\n    ),\n\n    HTML(\"<br><br><br>\"),\n    \n    ############ SECTION: Test Statistics ############\n    fluidRow(\n      column(12,\n             tight_card(\n               \"Test Statistic\",\n               fluidRow(\n                 column(6,\n                        HTML(\"<p><b>Step 1) Observed Value (OV)<\/b><\/p>\"),\n                        uiOutput(ns(\"observed_value_output\")),\n                        fluidRow(\n                          column(2),\n                          column(2,\n                                 withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>\\\\( OV = \\\\)<\/p>\"))\n                          ),\n                          column(3,\n                                 numericInput(\n                                   ns(\"observed_value\"),\n                                   NULL,\n                                   value = 0.73,\n                                   min = 0,\n                                   max = 1,\n                                   width = \"100%\"\n                                 ),\n                          ),\n                        ),\n                        uiOutput(ns(\"observed_val_warning_message\")),\n                        HTML(\"<p><b>Step 2) Calculate Expected Value (SE) and Standard Error (SE)<\/b><\/p>\"),\n                        uiOutput(ns(\"ev_and_se_text\"))\n                 ),\n                 column(6,\n                        HTML(\"<p><b>Step 3) Test Statistic Calculation<\/b><\/p>\"),\n                        uiOutput(ns(\"test_statistic_calculation\"))\n                 )\n               ),\n               header_colour = \"#3179ae\"\n             ),\n      ),\n    ),\n\n    HTML(\"<br><br><br>\"),\n\n    ############ SECTION: p-value ############\n    fluidRow(\n      column(6,\n             tight_card(\n               \"Conclusion (p-value)\",\n               uiOutput(ns(\"p_value_prelude\")),\n               header_colour = \"#3179ae\"\n             )\n      ),\n      column(6,\n             tight_card(\n               NULL,\n               HTML(\"<center>\"),\n               plotOutput(ns(\"test_stat_normal_plot\"), width = \"100%\", heigh = \"325px\"),\n               HTML(\"<\/center>\"),\n             )\n      )\n    ),\n\n    HTML(\"<br><br><br>\"),\n\n    ############ SECTION: Conclusion (p-value) ############\n    fluidRow(\n      column(12,\n             tight_card(\n               \"Conclusion (p-value)\",\n               HTML(\"<p>One way to tell whether we accept or reject the null hypothesis is to observe whether our p-value is below or above the significance level.<\/p>\"),\n               \n               fluidRow(\n                 # Section to enter significance level.\n                 column(6,\n                        HTML(\"<p><b>Step 1) What is your significance level<\/b>?<\/p>\"),\n\n                        # Space to enter significance value.\n                        fluidRow(\n                          column(1,\n                                 withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>\\\\( \\\\alpha = \\\\)<\/p>\"))\n                          ),\n                          column(3,\n                                 numericInput(\n                                   ns(\"alpha_value\"),\n                                   NULL,\n                                   value = 0.05,\n                                   min = 0,\n                                   max = 1,\n                                   width = \"100%\"\n                                 ),\n                          ),\n                        ),\n                        uiOutput(ns(\"significance_level_warning\")),\n                 ),\n\n                 # Section to provide final result.\n                 column(6,\n                        HTML(\"<p><b>Step 2) Final Conclusion<\/b><\/p>\"),\n                        uiOutput(ns(\"conclusion_output\")),\n                 )\n               ),\n               header_colour = \"#3179ae\"\n             )\n      ),\n    ),\n    \n    HTML(\"<br><br><br>\"),\n    \n    ############ SECTION: Conclusion (Confidence Interval) ############\n    fluidRow(\n      column(12,\n             tight_card(\n               \"Conclusion (Confidence Interval)\",\n               HTML(\"<p>One way to tell whether we accept or reject the null hypothesis is to observe whether our p-value is below or above the significance level.<\/p>\"),\n               \n               fluidRow(\n                 # Section to enter significance level.\n                 column(6,\n                        HTML(\"<p><b>Step 1) What is your confidence level<\/b>?<\/p>\"),\n                        \n                        # Space to enter significance value.\n                        fluidRow(\n                          column(1,\n                                 withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>\\\\( \\\\alpha = \\\\)<\/p>\"))\n                          ),\n                          column(3,\n                                 numericInput(\n                                   ns(\"confidence_level\"),\n                                   NULL,\n                                   value = 0.95,\n                                   min = 0,\n                                   max = 1,\n                                   width = \"100%\"\n                                 ),\n                          ),\n                        ),\n                        uiOutput(ns(\"confidence_level_warning\")),\n                 ),\n               ),\n               fluidRow(\n                 column(12,\n                        HTML(\"<p><b>Step 2) Final Conclusion<\/b><\/p>\"),\n                        uiOutput(ns(\"confidence_level_output\")),\n                 )\n               ),\n               header_colour = \"#3179ae\"\n             )\n      ),\n    ),\n    \n    HTML(\"<br><br><br><br><br><br><br>\"),\n    \n  )\n}","type":"text"}]
