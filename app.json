[{"name":"app.R","content":"source(\"t-test/t_curve_motivation_ui.R\")\nsource(\"t-test/t_curve_motivation_srv.R\")\nsource(\"Utility/helper_functions.R\")\nsource(\"Utility/generic_plotting_functions.R\")\n\nlibrary(shiny)\nlibrary(bslib)\nlibrary(DiagrammeR)\n\n\nui <- page_navbar(\n  title = \"Hypothesis Tests Visualised\",\n  theme = bs_theme(version = 5, bootswatch = \"lumen\"),  # You can switch to \"lumen\", \"materia\", \"sketchy\", \"united\", \"yeti\" etc.\n  \n  nav(\n    title = \"Home\",\n    fluidPage(\n      h2(\"Home Page\"),\n      p(\"This is the home page. I will place some inspirational text here...\")\n    )\n  ),\n  \n  nav_menu(\"T-Tests\",\n           \n           nav(\"T-Curve Motivation\", \n               tCurveMotivationUI(\"t_curve_motivation\")\n           ),\n           \n           \n           nav(\"1-Sample T-Test\", \"This is the details tab.\"),\n           \n           \n           \n           nav(\"Paired T-Test\", \"This is another sub-tab.\")\n  ),\n  \n)\n\n\nserver <- function(input, output, session) {\n  \n  \n  tCurveMotivationServer(id = \"t_curve_motivation\")\n  \n\n}\n\nshinyApp(ui, server)","type":"text"},{"name":"Box-Model/box_model_main_srv.R","content":"# We assume that if mean_or_sample_as_int = 1 then we are talking about sum, and mean_or_sample_as_int = 2 is mean.\nsimulate_box <- function(mean_or_sample_as_int, n, box) {\n  value = sample(box, n, replace = TRUE)\n  if (mean_or_sample_as_int == 2) {\n    value = mean(value)\n  } else {\n    value = sum(value)\n  }\n  return(value)\n}\n\nboxModelMainServer <- function(id) {\n  \n  moduleServer(id, function(input, output, session) {\n    \n    ns <- session$ns\n    \n    ticket_numbers <- reactiveVal(c(1,0,0,0))\n    invalid_tickets_string_bool <- reactiveVal(FALSE)\n    number_of_ticket_draws <- reactiveVal(25)\n    \n    # Process tickets text box strings.\n    observeEvent(input$submit_tickets, {\n      \n      # Extract the values that are separated between the commas.\n      characters <- strsplit(input$box_tickets_text_entry, \"\")[[1]]\n      values = c()\n      current_string = \"\"\n      for (char in characters) {\n        if (char == \",\") {\n          values = c(values, current_string)\n          current_string = \"\"\n        } else {\n          current_string = paste(current_string, char, sep = \"\")\n        }\n      }\n      if (current_string != \"\") {\n        values = c(values, current_string)\n      }\n      \n      # Convert the values to numbers.\n      numeric_vec <- as.numeric(values)\n      \n      # Set the tickets in the box to default (1,0,0,0) if NA's present, or the string is empty.\n      if (any(is.na(numeric_vec))) {\n        invalid_tickets_string_bool(TRUE)\n        ticket_numbers(c(1,0,0,0))\n      } else if (length(numeric_vec) <= 1) {\n        invalid_tickets_string_bool(TRUE)\n        ticket_numbers(c(1,0,0,0))\n      } else {\n        ticket_numbers(numeric_vec)\n        invalid_tickets_string_bool(FALSE)\n      }\n    })\n    \n    # Error message for when the text box for entering the tickets for the box is invalid\n    output$tickets_text_error_message <- renderUI({\n      if (invalid_tickets_string_bool()) {\n        return(\n          HTML(\"<span style='color: red;'><p>Error: One or move values that you added cannot be interpreted. Please carefully\n               check what you entered. You must enter at least 2 valid tickets. Setting contents of the box to 1,0,0,0.<\/p><\/span>\")\n        )\n      }\n    })\n    \n    invalid_number_of_draws_bool = reactiveVal(FALSE)\n    \n    # Process number_of_draws value.\n    observeEvent(input$number_of_draws, {\n      if (!is.na(input$number_of_draws) && input$number_of_draws >= 1) {\n        number_of_ticket_draws(ceiling(input$number_of_draws))\n        invalid_number_of_draws_bool(FALSE)\n      } else {\n        invalid_number_of_draws_bool(TRUE)\n        number_of_ticket_draws(25)\n      }\n    })\n    \n    # Error message for when the number of draws is invalid\n    output$number_of_draws_error_message <- renderUI({\n      if (invalid_number_of_draws_bool()) {\n        return(\n          HTML(\"<span style='color: red;'><p>Error: The value for the 'number of draws' must be an integer greater than or equal to 1.\n               Setting value to 25 until the error is resolved.<\/p><\/span>\")\n        )\n      }\n    })\n    \n    \n    \n    ########## Process empirical sample sums and means ########## \n    empirical_data <- reactiveVal(c())\n    \n    # Event: 1 repeat.\n    observeEvent(input$repeat_1, {\n      value = simulate_box(input$box_sum_or_mean, number_of_ticket_draws(), ticket_numbers())\n      empirical_data(c(empirical_data(), value))\n    })\n    \n    # Event: 10 repeats.\n    observeEvent(input$repeat_10, {\n      value = replicate(10, simulate_box(input$box_sum_or_mean, number_of_ticket_draws(), ticket_numbers()))\n      empirical_data(c(empirical_data(), value))\n    })\n    \n    # Event: 25 repeats.\n    observeEvent(input$repeat_25, {\n      value = replicate(25, simulate_box(input$box_sum_or_mean, number_of_ticket_draws(), ticket_numbers()))\n      empirical_data(c(empirical_data(), value))\n    })\n    \n    # Event: 100 repeats.\n    observeEvent(input$repeat_100, {\n      value = replicate(100, simulate_box(input$box_sum_or_mean, number_of_ticket_draws(), ticket_numbers()))\n      empirical_data(c(empirical_data(), value))\n    })\n    \n    # Event: reset histogram.\n    observeEvent(input$reset_button, {\n      empirical_data(c())\n    })\n    \n    ################################################################\n    \n    ############################ Plots ############################# \n    \n    output$box_model <- renderGrViz({\n      \n      # If there has been a change to the input values (and hence this graph has been re-generated), reset the empirical data.\n      empirical_data(c())\n      \n      # Place the tickets into a string.\n      # If greater than 15 tickets, split tickets onto new line.\n      tickets_string = \"\"\n      count = 0\n      for (val in ticket_numbers()){\n        count = count + 1\n        if (count == 15) {\n          tickets_string = paste(tickets_string, as.character(val), sep = \"\\n\")\n          count = 0\n        } else {\n          tickets_string = paste(tickets_string, as.character(val), sep = \", \")\n        }\n      }\n      tickets_string <- substring(tickets_string,2)\n      \n      # Get other elements for the box model\n      n = number_of_ticket_draws()\n      sample = \"Sample Sum\"\n      if (input$box_sum_or_mean == 2) {\n        sample = \"Sample Mean\"\n      }\n      \n      ##### Specify model ##### \n      \n      ### This is code that creates the box model.\n      # digraph diagram {\n      #   graph [layout = dot, rankdir = TB]\n      #   \n      #   node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12, width = 2.5]\n      #     box [label = '1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0\\n1,0,0,0,0,0,0,0,0,0,0,0,0']\n      #     \n      #     node [shape = oval,width = 1.5,fillcolor = \\\"#f9ffbd\\\", fontsize = 12]  \n      #     sample [label = '?']\n      #     \n      #     edge [minlen = 2]\n      #       box->sample [label = '  n = 10', fontsize = 12, labeldistance = 5]\n      #   }\n      \n      # Set up graph and box\n      diagram = \"digraph diagram { graph [layout = dot, rankdir = TB] node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12, width = 2.5] box [label = '\"\n      diagram = paste(diagram, tickets_string, \"']\", sep = \"\")\n      \n      # Set up sample circle.\n      diagram = paste(diagram, \" node [shape = oval,width = 1.5,fillcolor = \\\"#f9ffbd\\\", fontsize = 12]sample [label = '\", sample, \"']\", sep = \"\")\n      \n      # Create edge between box and circle.\n      # Annotate edge with n value.\n      diagram = paste(diagram, \" edge [minlen = 2] box->sample [label = '  n = \", n, \"', fontsize = 12, labeldistance = 5]}\", sep = \"\")\n      \n      return (grViz(diagram))\n    })\n    \n    # Histogram of mean and sum frequencies.\n    output$histogram_frequencies = renderPlot({\n      \n      num_values = as.character(length(empirical_data())) \n      \n      title_string = paste(\"Empiricial Distribution of Sample Sums (n = \", num_values, \")\", sep = \"\")\n      x_axis_string = \"Sample Sum Value\"\n      if (input$box_sum_or_mean == 2) {\n        title_string = paste(\"Empiricial Distribution of Sample Means (n = \", num_values, \")\", sep = \"\")\n        x_axis_string = \"Sample Mean Value\"\n      }\n      \n      # Default empty plot for when no data has been simulated yet.\n      plot = ggplot()\n      \n      # If data has been generated, create a histogram\n      if (length(empirical_data()) > 0) {\n        bins_to_include = length(table(empirical_data()))\n        if (bins_to_include > 20) {\n          bins_to_include = 20\n        }\n        plot = ggplot(data.frame(values = empirical_data()), aes(x = values)) +\n          geom_histogram(aes(y = after_stat(count / sum(count))), bins = bins_to_include, fill = \"lightgreen\", color = \"black\") +\n          scale_y_continuous(labels = scales::percent) +\n          labs(x = x_axis_string, y = \"Percentage Frequency\", title = title_string) +\n          theme_minimal() +\n          theme(\n            panel.grid = element_blank(),\n            axis.line = element_line(color = \"black\")\n          )\n        \n        # Default empty plot for when no data has been simulated yet.\n      } else {\n        plot = ggplot() +\n          xlim(0, 10) +  # Set x-axis limits\n          ylim(0, 100) +\n          labs(x = x_axis_string, y = \"Percentage Frequency\", title = title_string) +\n          theme_minimal() +\n          theme(\n            panel.grid = element_blank(),\n            axis.line = element_line(color = \"black\")\n          )\n      }\n      \n      return(plot)\n    })\n    \n    # Histogram with normal curve to shown normal curve approximation.\n    output$normal_curve_model = renderPlot({\n      \n      x_axis_string = \"Sample Sum Value\"\n      title_string = \"Empirical Distribution of 10000 Sample Sums with\\nOverlaid Normal Curve\"\n      if (input$box_sum_or_mean == 2) {\n        title_string = \"Empirical Distribution of 10000 Sample Means with\\nOverlaid Normal Curve\"\n        x_axis_string = \"Sample Mean Value\"\n      }\n      \n      # Get 1000 samples for the histogram.\n      data = replicate(10000, simulate_box(input$box_sum_or_mean, number_of_ticket_draws(), ticket_numbers()))\n      data = data.frame(values = data)\n      \n      # Normal curve parameters.\n      EV = number_of_ticket_draws() * mean(ticket_numbers())\n      SE = sqrt(number_of_ticket_draws()) * popsd(ticket_numbers())\n      if (input$box_sum_or_mean == 2) { \n        EV = mean(ticket_numbers())\n        SE = popsd(ticket_numbers())/sqrt(number_of_ticket_draws())\n      }\n      \n      bins_to_include = length(table(data))\n      if (bins_to_include > 20) {\n        bins_to_include = 20\n      }\n      \n      plot = ggplot(data.frame(values = data), aes(x = values)) +\n        geom_histogram(aes(y = after_stat(density)), bins = bins_to_include, fill = \"lightgreen\", color = \"black\") + \n        labs(x = x_axis_string, y = \"Density\", title = title_string) +\n        theme_minimal() +\n        theme(\n          panel.grid = element_blank(),\n          axis.line = element_line(color = \"black\")\n        ) +\n        stat_function(fun = dnorm, args = list(mean = EV, sd = SE), color = \"red\", size = 1)\n      \n      return(plot)\n    })\n    \n    # Histogram with normal curve to shown normal curve approximation.\n    output$shaded_normal_curve = renderPlot({\n      \n      # If the lower threshold is greater than the upper threshold, return early.\n      if (error_message_interval_flag()) {\n        return()\n      }\n      \n      req(EV_string())\n      req(SE_string())\n      EV_val = as.numeric(EV_string())\n      SE_val = as.numeric(SE_string())\n      lower_value = lower_boundary_num_store()\n      upper_value = upper_boundary_num_store()\n      \n      # Define the limits for shading\n      lower_xlimit_plot <- EV_val - SE_val * 4\n      upper_xlimit_plot <- EV_val + SE_val * 4\n      \n      # When we have infinity values, lower and upper_values set to NA. Set to the lower and upper xlimits.\n      if (is.na(lower_value)) {\n        lower_value = lower_xlimit_plot\n      }\n      if (is.na(upper_value)) {\n        upper_value = upper_xlimit_plot\n      }\n      \n      # Reset the upper and lower value when they exceed the xlimits.\n      if (upper_value > upper_xlimit_plot) {\n        upper_value = upper_xlimit_plot\n      } else if (lower_value < lower_xlimit_plot) {\n        lower_value = lower_xlimit_plot\n      }\n      \n      shade_data <- data.frame(x = seq(lower_xlimit_plot, upper_xlimit_plot, length.out = 100))\n      \n      # Create the ggplot\n      ggplot(shade_data, aes(x)) +\n        # Plot the normal distribution curve\n        stat_function(fun = dnorm, args = list(mean = EV_val, sd = SE_val), color = \"black\", size = 1) +\n        # Shade the area between the lower and upper limits\n        geom_area(stat = \"function\", fun = dnorm, \n                  args = list(mean = EV_val, sd = SE_val), \n                  fill = \"red\", alpha = 0.5,\n                  xlim = c(lower_value, upper_value)) +\n        theme_minimal() +\n        theme(\n          panel.grid = element_blank(),\n          axis.line = element_line(color = \"black\"),\n          axis.text.y = element_blank(),\n          axis.ticks.y = element_blank(),\n          axis.title.y = element_blank(),\n          axis.title.x = element_blank(),\n          axis.line.y = element_blank(),\n          panel.border = element_blank()\n        )\n    })\n    \n    ################################################################\n    \n    # Text telling the user the boxes mean and popsd.\n    output$box_statistics <- renderUI({\n      \n      mean_ = mean(ticket_numbers())\n      sd_ = popsd(ticket_numbers())\n      \n      mean_statment = HTML(paste(\"<p><b>Mean of the box:<\/b> $$ \\\\mu =  \", as.character(round(mean_, digits = 5)), \"$$<\/p>\", sep = \"\"))\n      sd_statment = HTML(paste(\"<p><b>Population SD of the box: <\/b> $$ \\\\sigma = \", as.character(round(sd_, digits = 5)), \"$$<\/p>\", sep = \"\"))\n      \n      return(tagList(\n        withMathJax(\n          mean_statment, sd_statment\n        )\n      ))\n    })\n    \n    # Text instructions for the central limit theorem section\n    output$CLT_text_instructions_output <- renderUI({\n      sample = \"sum\"\n      if (input$box_sum_or_mean == 2) {\n        sample = \"mean\"\n      }\n      \n      string = paste(\"<p>Recall that the central limit theorem tells us that if we take a <b>sufficiently large number of draws<\/b> \n                     from the box, then the <b>sample \", sample, \"s will follow an approximately normal distribution<\/b>.<br><br>Now we will empirically\n                     test whether n = \", number_of_ticket_draws(), \" is a sufficient number of draws for the central limit theorem to\n                     apply.<br><br>To do this, press the button below to repeat the process of drawing from the box \", number_of_ticket_draws(),\n                     \" and finding the \", sample, \". These will be added to the histogram. If we have taken enough draws from the box, then the \n                     histogram should look normally distributed.\", sep = \"\")\n      \n      return(HTML(string))\n    })\n    \n    EV_string <- reactiveVal(\"\")\n    SE_string <- reactiveVal(\"\")\n    \n    # Text instructions for whether the CLT applies to this box model.\n    output$CLT_satisfied_text <- renderUI({\n      sample = \"sum\"\n      if (input$box_sum_or_mean == 2) {\n        sample = \"mean\"\n      }\n      \n      string = paste(\"<p>Does the data in the histogram above look normally distributed? Ensure that you have repeated the process of\n                     drawing from the box, and finding the sample \", sample, \"many times. If it does not, scroll back above and update the\n                     number of draws in step 2. If it does, continue below!<\/p>\", sep = \"\")\n      \n      return(HTML(string))\n    })\n    \n    # Text instructions for whether the CLT applies to this box model.\n    output$normal_distribution_text <- renderUI({\n      sample = \"sum\"\n      if (input$box_sum_or_mean == 2) {\n        sample = \"mean\"\n      }\n      \n      instructions = HTML(paste(\"<p>Now that we have confirmed that we are taking a sufficient number of draws for the sample \", sample, \"s to follow a\n                     normal distribution, we now want to specify this general normal curve. We will set the mean to\n                     be equal to the the <b>sample \", sample, \"'s<\/b> expected value, and the standard deviation equal to its standard error:<\/p>\", sep = \"\"))\n      \n      # EV and SE text (changes based upon whether the sample sum or mean is being used).\n      expected_value = \"\"\n      standard_error = \"\"\n      EV = \"\"\n      SE = \"\"\n      \n      # Mean\n      if (input$box_sum_or_mean == 2) { \n        EV = as.character(round(mean(ticket_numbers()), 5))\n        EV_string(EV)\n        expected_value = withMathJax(\n          HTML(\"<p><b>Expected Value:<\/b><\/p>\"),\n          HTML(paste(\"$$\\\\begin{align*} \\\\text{EV} &= \\\\mu \\\\\\\\ &=\", EV, \"\\\\end{align*}$$\", sep = \"\"))\n        )\n        \n        SE = as.character(round(popsd(ticket_numbers())/sqrt(number_of_ticket_draws()),5))\n        SE_string(SE)\n        standard_error = withMathJax(\n          HTML(\"<p><b>Standard Error:<\/b><\/p>\"),\n          HTML(paste(\"$$\\\\begin{align*} \\\\text{SE} &= \\\\frac{\\\\sigma}{\\\\sqrt{n}} \\\\\\\\ &= \\\\frac{\", round(popsd(ticket_numbers()), 5) , \"}{\\\\sqrt{\", \n                     as.character(number_of_ticket_draws()), \"}}\\\\\\\\ &= \", SE, \"\\\\end{align*}$$\", sep = \"\"))\n        )\n        \n        # Sum\n      } else {\n        EV = as.character(round(number_of_ticket_draws() * mean(ticket_numbers()), 5))\n        EV_string(EV)\n        expected_value = withMathJax(\n          HTML(\"<p><b>Expected Value:<\/b><\/p>\"),\n          HTML(paste(\"$$\\\\begin{align*} \\\\text{EV} &= n \\\\times \\\\mu \\\\\\\\ &=\", as.character(number_of_ticket_draws()), \"\\\\times\", round(mean(ticket_numbers()), 5),\n                     \"\\\\\\\\ &= \", EV, \"\\\\end{align*}$$\", sep = \"\"))\n        )\n        \n        SE = as.character(round(sqrt(number_of_ticket_draws()) * popsd(ticket_numbers()),5))\n        SE_string(SE)\n        standard_error = withMathJax(\n          HTML(\"<p><b>Standard Error:<\/b><\/p>\"),\n          HTML(paste(\"$$\\\\begin{align*} \\\\text{SE} &= \\\\sqrt{n} \\\\times \\\\sigma \\\\\\\\ &= \\\\sqrt{\", as.character(number_of_ticket_draws()), \"} \\\\times\", \n                     round(popsd(ticket_numbers()), 5), \"\\\\\\\\ &= \", SE, \"\\\\end{align*}$$\", sep = \"\"))\n        )\n      }\n      \n      \n      normal_curve_text = HTML(paste(\"<p>Having found the expected value and standard error, we can model the distribution of the sample \", sample, \"s using the\n                                following <b>general normal curve:<\/b><\/p>\", sep = \"\"))\n      \n      noraml_curve = withMathJax(\n        paste(\"$$\\\\begin{align*} \\\\text{Sample Sum} &\\\\sim N(\\\\text{EV}, \\\\text{SE}^2) \\\\\\\\ &= N(\", EV, \", \", SE, \"^2) \\\\end{align*}$$\", sep = \"\")\n      )\n      \n      return(\n        tagList(\n          instructions, expected_value, standard_error, normal_curve_text, noraml_curve\n        )\n      )\n    })\n    \n    # Text instructions for the finding probabilities section.\n    output$finding_probabilities_text <- renderUI({\n      \n      sample = \"sum\"\n      if (input$box_sum_or_mean == 2) {\n        sample = \"mean\"\n      }\n      \n      instructions = paste(\"<p>Now that we are modelling the sample \", sample , \"s using a normal curve with mean \", EV_string(), \" and standard deviation \",\n                           SE_string(), \" we can start to ask probability based questions like, <br>\",\n                           \"<ul>\n                              <li>What is the chance that we see a value greater than\", withMathJax(\"\\\\(x\\\\)\"), \"?<\/li>\",\n                           \"<li>What is the chance that we see a value between\", withMathJax(\"\\\\(y\\\\)\"), \" and \", withMathJax(\"\\\\(z\\\\)\"), \"?<\/li>\",\n                           \"<\/ul>\",\n                           \"Use the controls below to find the the probabilities that values lie within the ranges you set.<\/p>\")\n      return(\n        tagList(\n          HTML(instructions)\n        )\n      ) \n    })\n    \n    error_message_interval_flag <- reactiveVal(FALSE)\n    lower_boundary_num_store <- reactiveVal(NA)\n    upper_boundary_num_store <- reactiveVal(NA)\n    \n    # Probability for values within a range text.\n    output$probability_answer_text <- renderUI({\n      \n      lower_boundary_str = \"\"\n      lower_boundary_num = NA \n      if (input$lower_boundary_infinity == TRUE || is.na(input$lower_boundary_numeric)) {\n        lower_boundary_str = \"-\\\\infty\"\n        lower_boundary_num_store(NA)\n      } else {\n        lower_boundary_str = as.character(input$lower_boundary_numeric)\n        lower_boundary_num = input$lower_boundary_numeric\n        lower_boundary_num_store(lower_boundary_num)\n      }\n      \n      upper_boundary_str = \"\"\n      upper_boundary_num = NA \n      if (input$upper_boundary_infinity == TRUE || is.na(input$upper_boundary_numeric)) {\n        upper_boundary_str = \"\\\\infty\"\n        upper_boundary_num_store(NA)\n      } else {\n        upper_boundary_str = as.character(input$upper_boundary_numeric)\n        upper_boundary_num = input$upper_boundary_numeric\n        upper_boundary_num_store(upper_boundary_num)\n      }\n      \n      # Check that the lower boundary num is not higher than the upper boundary num.\n      if (!is.na(lower_boundary_num) && !is.na(upper_boundary_num)) {\n        if (lower_boundary_num > upper_boundary_num) {\n          error_message_interval_flag(TRUE)\n          return()\n        } else {\n          error_message_interval_flag(FALSE)\n        }\n      } else {\n        error_message_interval_flag(FALSE)\n      }\n      \n      # Find area between the lower and upper boundary.\n      area = 1\n      # This is the case where we are finding the area from -infty to +infty. This area is simply 1.\n      EV_num = as.numeric(EV_string())\n      SE_num = as.numeric(SE_string())\n      # [-inf, inf]\n      if (is.na(lower_boundary_num) && is.na(upper_boundary_num)) {\n        area = 1\n        # [-inf, x]\n      } else if (is.na(lower_boundary_num)) {\n        area = pnorm(upper_boundary_num, mean = EV_num, sd = SE_num, lower.tail = TRUE)\n        # [x, inf]\n      } else if (is.na(upper_boundary_num)) {\n        area = pnorm(lower_boundary_num, mean = EV_num, sd = SE_num, lower.tail = FALSE)\n        # [x, y]\n      } else {\n        area  = pnorm(upper_boundary_num, mean = EV_num, sd = SE_num) - pnorm(lower_boundary_num, mean = EV_num, sd = SE_num)\n      }\n      area = as.character(round(area, digits = 5))\n      \n      text = paste(\"<p>The probability that a value lies wthin the range \\\\([\", lower_boundary_str, \",\", upper_boundary_str, \"]\\\\) is \", \n                   area, \".<\/p>\", sep = \"\")\n      \n      return(\n        tagList(\n          withMathJax(HTML(text))\n        )\n      )\n    })\n    \n    # Error message to display if the lower interval is greater than the upper interval.\n    output$interval_error_message <- renderUI({\n      if (error_message_interval_flag() == TRUE) {\n        return(HTML(\"<p style='color: red;'>ERROR: The lower interval cannot be greater than the upper interval.<\/p>\"))\n      }\n    })\n    \n    ############################ Modal Intro ############################# \n    \n    \n    observeEvent(input$learning_text, {\n      showModal(modalDialog(\n        title = \"The 'Box Model'\",\n        \n        HTML(\"<p>\n            Let’s say that you flip a fair coin 50 times. You would expect to get 25 heads and 25 tails. But what if when you did this experiment, \n            you actually found out that you got 27 heads and 23 tails? Would this be considered unusual?<br><br>\n            \n            The box model can help us investigate questions like this. But first, what is the box model?<br><br>\n            \n            \n      <\/p>\"),\n        fluidRow(\n          column(8,\n                 HTML(\"<p>\n               <h5><u>What is the 'box model'?<\/u><\/h5><br>\n            \n                The box model is a construct used in statistics to help understand chance processes. As the name suggests, the main feature of the model\n                is the box component. Inside this box, we place tickets, which represent the possible outcomes that could occur from a single event.<br><br>\n                \n                In the case of flipping a coin, the possible outcomes are “head” or “tail.” Because of this, inside the box, we would place two tickets, \n                one with the word “head” and the other with the word “tail.” Below the box is a flow line connected to an oval. Next to the flow line, we \n                indicate the number of draws we are taking from the box (with replacement). In our example, we are flipping the coin 50 times, so we write \n                n = 50. The oval represents the sample. For our example, we can think of this as a store of how many tails and heads we observed when drawing \n                from the box.<br><br>\n          <\/p>\")\n          ),\n          column(4,\n                 HTML(\"<br>\"),\n                 grVizOutput(ns(\"example_coin_flip_1\"), width = \"80%\", height = \"80%\"),\n          )\n        ),\n        fluidRow(\n          \n          column(8,\n                 HTML(\"<p>\n               <h5><u>Representing the Sample – Sum or Mean<\/u><\/h5><br>\n            \n                  For our coin-flipping example, let’s imagine that we flipped the coin 50 times. Using our box model analogy, this means that we randomly \n                  went to the box, picked out a ticket, recorded the value of the ticket, replaced the ticket back into the box, and repeated this process \n                  another 49 times.<br><br>\n                  \n                  Let’s consider that at the end of doing this, we had 27 “head”s and 23 “tail”s. Under the box model, this represents our sample, which \n                  we represent by the oval.An issue that we will run into is that the words “head” and “tail” are not numbers. Ideally, we would like to \n                  summarise our sample using a <b>single number<\/b>, without having to specify the number of heads and tails individually.<br><br>\n                  \n                  Because of this, let’s instead change the tickets of our box to the numbers “1” and “0”. We can say that the number “1” represents drawing\n                  a head, and the number “0” represents drawing a tail. Under the same example as before, this means that we drew 27 x “1” tickets and 23 x “0”\n                  tickets. Now that the tickets are numeric, we can <b>model the sample<\/b> using the <b>sum<\/b> or the <b>mean<\/b>:\n                  \n                  <ul>\n                    <li>Sum: 27 x 1 tickets + 23 x 0 tickets = 27 + 0 = 27<\/li>\n                    <li>Mean: (27 x 1 tickets + 23 x 0 tickets)/50 = (27 + 0)/50 = 0.54<\/li>\n                  <\/ul>\n                  \n                  In practice, it doesn’t matter whether we model the sample using the sum or mean, as long as we are consistent throughout. For the rest of \n                  the discussion here about this coin-flipping example, we will assume that we are modelling the sample using the sum.<br><br>\n                <\/p>\")\n          ),\n          column(4,\n                 HTML(\"<br><br><br><br><br><br>\"),\n                 grVizOutput(ns(\"example_coin_flip_2\"), width = \"80%\", height = \"80%\"),\n          ),\n        ),\n        HTML(\"<p>\n            <h5><u>Modelling Using a Normal Distribution<\/u><\/h5><br>\n            \n            The central limit theorem tells us that if we take a sufficiently large number of draws from a box, then the sample sums (or means) will\n            follow a normal distribution. The key word here is “sufficiently larger”. This means that our number of draws (n) must be a relatively high\n            number.<br><br>\n            \n            How high? This depends on the tickets in the box, with emphasis placed on how symmetric they are. Some textbooks will say that if you have \n            greater than 35 draws, then the central limit theorem will hold, but this is not always the case. One way that we can empirically verify \n            whether the central limit theorem holds or not is to simulate taking many samples from the box.<br><br>\n            \n            For the coin-flipping example, this means that we do the process of drawing 50 times from the box and calculating the sample sum many, many\n            times. As we are taking a sufficient number of draws in this example, you would see that the histograms of the sample sums will look normally \n            distributed. You will have an opportunity to do that in this app (for this box model, or another of your choosing), and to see whether the \n            histogram of the sample sums looks normally distributed or not.<br><br>\n            \n            If the distribution appears to be normally distributed, then we can model the sample sums (or means) using a normal distribution. To do this, \n            we will calculate the expected value (EV) and standard error (SE) which both depend on whether we are modelling using the sample sum or mean, \n            as well as the number of draws and the contents of the box.<br><br>\n            \n            The normal curve will be defined to have a mean equal to EV, and a standard deviation equal to SE. Using these values, you can start to ask\n            probability-style questions. Under our coin-flipping example, we could ask - what is the probability of observing a sample sum of 30 or greater\n            (that is, seeing 30 or more heads from 50 flips)?<br><br><br>\n            \n            <i>Now it’s your turn to experiment with the app below. This was a very brief introduction, but hopefully, by playing and experimenting below, \n            you’ll gain a deeper conceptual understanding of the box model.<\/i>\n      <\/p>\"),\n        easyClose = TRUE,\n        footer = modalButton(\"Close\"),\n      ))\n    })\n    \n    output$example_coin_flip_1 <- renderGrViz({\n      string = \"digraph diagram {\n        graph [layout = dot, rankdir = TB]\n      \n        node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12, width = 2.5]\n        box [label = 'Head, Tail']\n      \n        node [shape = oval,width = 1.5,fillcolor = \\\"#f9ffbd\\\", fontsize = 12]\n        sample [label = 'Sample']\n      \n        edge [minlen = 2]\n          box->sample [label = '  n = 50', fontsize = 12, labeldistance = 5]\n        }\"\n      return(grViz(string))\n    })\n    \n    output$example_coin_flip_2 <- renderGrViz({\n      string = \"digraph diagram {\n        graph [layout = dot, rankdir = TB]\n      \n        node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12, width = 2.5]\n        box [label = '1, 0']\n      \n        node [shape = oval,width = 1.5,fillcolor = \\\"#f9ffbd\\\", fontsize = 12]\n        sample [label = 'Sample Sum']\n      \n        edge [minlen = 2]\n          box->sample [label = '  n = 50', fontsize = 12, labeldistance = 5]\n        }\"\n      return(grViz(string))\n    })\n    \n    ################################################################\n    \n  })\n  \n}","type":"text"},{"name":"Box-Model/box_model_main_ui.R","content":"boxModelMainUI <- function(id) {\n  ns <- NS(id)\n  tagList(\n\n    ############ TITLE ############ \n    fluidRow(\n      column(8,\n             HTML(\"<h1>Box Model<\/h1><br>\"),\n      ),\n      column(4,\n             HTML(\"<br>\"),\n             tags$style(HTML(paste0(\"\n                [id='\", ns(\"learning_text\"), \"'] {\n                  font-size: 20px;\n                  padding: 10px 20px;\n                }\n             \"))),\n             actionButton(ns(\"learning_text\"), \"What is the box model?\", class = \"btn btn-primary\", style=\"color: #fff;\", width = \"100%\")\n      ),\n    ),\n    HTML(\"<br>\"),\n    \n    ############ SECTION: Setting up the Box Model ############ \n    fluidRow(\n      column(7,\n             box(\n               title = HTML(\"<u><b>Box Parameters<\/b><\/u>\"),\n               status = \"primary\", \n               width = \"100%\",\n               solidHeader = FALSE,\n               \n               HTML(\"<p>First we need to create the box. Follow steps 1, 2, and 3 to configure the box to be whatever you wish to model.\n                       The box will output on the right according to the settings that you pick.<\/p><br>\"),\n               \n               # Step 1: Enter Tickets\n               box(\n                 title = \"Step 1) Tickets\",\n                 width = \"100%\",\n                 collapsible = TRUE,\n                 collapsed = TRUE,\n                 status = \"info\",\n                 solidHeader = FALSE,\n                 HTML(\"<p>First, we need to specify the tickets that we will be adding to the box.<\/p>\"),\n                 HTML(\"<p>In the text box below, enter the tickets that you wish to place into the box. Only <i>numbers<\/i> can be\n                               added, and <i>each ticket should be seperated by a comma<\/i>. For example, if you want to have 1x1 ticket\n                               and 3x0 tickets in the box, enter <i>1,0,0,0<\/i>.\"),\n                 textAreaInput( \n                   ns(\"box_tickets_text_entry\"),\n                   NULL,\n                   value = \"1,0,0,0\",\n                   width = \"100%\"\n                 ),\n                 fluidRow(\n                   column(8),\n                   column(4,\n                     actionButton(ns(\"submit_tickets\"), \"Set Tickets\", class = \"btn btn-success\", style=\"color: #fff;\", width = \"100%\")\n                   )\n                 ),\n                 uiOutput(ns(\"tickets_text_error_message\"))\n               ),\n               \n               # Step 2: Set n\n               box(\n                 title = \"Step 2) Number of Draws\",\n                 width = \"100%\",\n                 collapsible = TRUE,\n                 collapsed = TRUE,\n                 status = \"info\",\n                 solidHeader = FALSE,\n                 HTML(\"<p>Second, we need to specify the number of draws (with replacement) that we will be taking from the box:<\/p>\"),\n                 numericInput( \n                   ns(\"number_of_draws\"),\n                   label = NULL,\n                   value = 25, \n                   min = 1\n                 ),\n                 uiOutput(ns(\"number_of_draws_error_message\"))\n               ),\n               \n               # Step 3: Model Using Sum or Mean\n               box(\n                 title = \"Step 3) Model Using Sum or Mean\",\n                 width = \"100%\",\n                 collapsible = TRUE,\n                 collapsed = TRUE,\n                 status = \"info\",\n                 solidHeader = FALSE,\n                 HTML(\"<p>Third, we need to specify whether we will be modelling the sample using the mean or sum of the draws:<br><br><\/p>\"),\n                 radioButtons( \n                   ns(\"box_sum_or_mean\"),\n                   label = NULL,\n                   choices = list( \n                     \"Sum\" = 1, \n                     \"Mean\" = 2\n                   ) \n                 ),\n                 \n               )\n             )\n      ),\n      \n      column(5,\n             # Box model output.\n             box(\n               solidHeader = TRUE,\n               width = \"100%\",\n               HTML(\"<center>\"),\n               grVizOutput(ns(\"box_model\"), width = \"70%\", height = \"70%\"),\n               HTML(\"<\/center>\")\n             ),\n             \n             # Mean and SD of the box output.\n             box(\n               solidHeader = TRUE,\n               width = \"100%\",\n               uiOutput(outputId = ns(\"box_statistics\"))\n             )\n      )\n    ),\n    \n    HTML(\"<br><br><br>\"),\n    \n    ############ SECTION: Checking Central Limit Theorem ############ \n    fluidRow(\n      column(5,\n             box(\n               title = HTML(\"<u><b>Central Limit Theorem<\/b><\/u>\"),\n               status = \"primary\",\n               solidHeader = FALSE,\n               width = \"100%\",\n               uiOutput(outputId = ns(\"CLT_text_instructions_output\")),\n               HTML(\"<br>\"),\n               fluidRow(\n                 column(1),\n                 \n                 # Button for repeating adding the mean or sample sum to the histogram.\n                 column(5,\n                        actionButton(\n                          inputId = ns(\"repeat_1\"), label = HTML('<i class=\"fa fa-plus\"><\/i> Repeat 1'),\n                          class = \"btn btn-primary\", style=\"color: #fff;\", width = \"100%\"\n                        ),\n                        HTML(\"<br><br>\"),\n                        actionButton(\n                          inputId = ns(\"repeat_25\"), label = HTML('<i class=\"fa fa-plus\"><\/i> Repeat 25'),\n                          class = \"btn btn-primary\", style=\"color: #fff;\", width = \"100%\"\n                        ),\n                 ),\n                 column(5,\n                        actionButton(\n                          inputId = ns(\"repeat_10\"), label = HTML('<i class=\"fa fa-plus\"><\/i> Repeat 10'),\n                          class = \"btn btn-primary\", style=\"color: #fff;\", width = \"100%\"\n                        ),\n                        HTML(\"<br><br>\"),\n                        actionButton(\n                          inputId = ns(\"repeat_100\"), label = HTML('<i class=\"fa fa-plus\"><\/i> Repeat 100'),\n                          class = \"btn btn-primary\", style=\"color: #fff;\", width = \"100%\"\n                        ),\n                 ),\n               ),\n               HTML(\"<br><center>\"),\n               \n               # On click, resets the histogram\n               actionButton(\n                 inputId = ns(\"reset_button\"), label = HTML('<i class=\"fa fa-redo\"><\/i> Reset'),\n                 class = \"btn btn-danger\", style=\"color: #fff;\"\n               ),\n               HTML(\"<\/center><br>\"),\n             ),\n             \n      ),\n      \n      # Histogram Distribution\n      column(7,\n             plotOutput(ns(\"histogram_frequencies\"), width = \"80%\", height = \"300px\"),\n             HTML(\"<br><br><br><br>\"),\n             box(\n               solidHeader = TRUE,\n               width = \"100%\",\n               uiOutput(outputId = ns(\"CLT_satisfied_text\")),\n             ),\n      )\n      \n    ),\n    \n    HTML(\"<br><br><br>\"),\n    \n    ############ SECTION: Modelling Using the Normal Curve ############\n    fluidRow(\n      column(5,\n             box(title = HTML(\"<u><b>Modelling Using a Normal Distribution<\/b><\/u>\"),\n                 status = \"primary\",\n                 solidHeader = FALSE,\n                 width = \"100%\",\n                 uiOutput(ns(\"normal_distribution_text\"))\n              )\n      ),\n      column(7,\n             plotOutput(ns(\"normal_curve_model\"), width = \"80%\"),\n      )\n    ),\n    \n    HTML(\"<br><br><br>\"),\n    \n    # ############ SECTION: Finding Probabilities ############ \n    fluidRow(\n      \n      # Only display this section if continue button is pressed.\n      column(6,\n             box(title = HTML(\"<u><b>Finding Probabilities<\/b><\/u>\"),\n                 status = \"primary\",\n                 solidHeader = FALSE,\n                 width = \"100%\",\n                 uiOutput(ns(\"finding_probabilities_text\")),\n                 fluidRow(\n                   column(1),\n                   column(4,\n                      HTML(\"<center><h5><b>Lower Boundary<\/b><\/h5><\/center>\"),\n                      checkboxInput(ns(\"lower_boundary_infinity\"), HTML(paste(\"<p>\", withMathJax(\"\\\\(-\\\\infty\\\\)\"),\"<\/p>\")), FALSE),\n                      conditionalPanel(\n                        condition = paste0('input[\\'', ns('lower_boundary_infinity'), \"\\'] == false\"),\n                        #condition = \"input.lower_boundary_infinity == false\",\n                        numericInput(\n                          ns(\"lower_boundary_numeric\"),\n                          label = NULL,\n                          value = 0\n                        ),\n                      ),\n                   ),\n                   column(2),\n                   column(4,\n                      HTML(\"<center><h5><b>Upper Boundary<\/b><\/h5><\/center>\"),\n                      checkboxInput(ns(\"upper_boundary_infinity\"), HTML(paste(\"<p>\", withMathJax(\"\\\\(\\\\infty\\\\)\"),\"<\/p>\")), FALSE),\n                      conditionalPanel(\n                        condition = paste0('input[\\'', ns('upper_boundary_infinity'), \"\\'] == false\"),\n                        \n                        #condition = \"input.upper_boundary_infinity == false\",\n                        numericInput(\n                          ns(\"upper_boundary_numeric\"),\n                          label = NULL,\n                          value = 1\n                        ),\n                      ),\n                   ),\n                   column(1)\n                 ),\n                 uiOutput(ns('interval_error_message'))\n             )\n      ),\n      column(6,\n             plotOutput(ns(\"shaded_normal_curve\"), width = \"80%\", height = \"250px\"),\n             HTML(\"<br><br>\"),\n             box(\n               solidHeader = TRUE,\n               width = \"100%\",\n               uiOutput(ns(\"probability_answer_text\"))\n             ),\n             \n      )\n\n    ),\n\n\n\n    \n    \n  )\n}","type":"text"},{"name":"Utility/generic_plotting_functions.R","content":"# Function to create a curve and shade the region corresponding to the test statistic and tail.\n# Arguments:\n#   function_stat: the function to plot (e.g. dnorm is normal density curve, dt is t-curve).\n#   stat_function_args: list with the arguments needed to plot the stat function (e.g. for a standard normal curve, list(mean = 0, sd = 1)).\n#   test_stat: test statistic as a number.\n#   alternate_hypothesis_choice: 1 denotes both upper and lower tail, 2 denotes lower tail, 3 denotes upper tail\ncurve_shaded_test_stat <- function(function_stat, stat_function_args, test_stat, alternate_hypothesis_choice) {\n  \n  # Define the plots lowest and highest x-value.\n  lower_xlimit_plot = -3.5\n  upper_xlimit_plot = 3.5\n  if (alternate_hypothesis_choice == 1 && abs(test_stat) > upper_xlimit_plot) {\n    lower_xlimit_plot = -abs(test_stat) - 1\n    upper_xlimit_plot = abs(test_stat) + 1\n  } else if (test_stat < lower_xlimit_plot) {\n    lower_xlimit_plot = test_stat - 1\n  } else if (test_stat > upper_xlimit_plot) {\n    upper_xlimit_plot = test_stat + 1\n  }\n  \n  # Generate x and y values for the curve\n  x_vals <- seq(lower_xlimit_plot, upper_xlimit_plot, length.out = 1000)\n  y_vals <- do.call(function_stat, c(list(x_vals), stat_function_args))\n  \n  # Plot the curve\n  par(mar = c(4, 0.5, 0.5, 0.5))\n  plot(x_vals, y_vals, type = \"l\", lwd = 2, col = \"black\",\n       xlab = \"\", ylab = \"\", yaxt = \"n\", bty = \"n\", axes = TRUE)\n  axis(1)\n  \n  # Shade areas depending on hypothesis\n  \n  # Two-tailed test: shade both sides\n  if (alternate_hypothesis_choice == 1) {\n    x_shade1 <- x_vals[x_vals <= -abs(test_stat)]\n    y_shade1 <- do.call(function_stat, c(list(x_shade1), stat_function_args))\n    polygon(c(x_shade1, rev(x_shade1)),\n            c(y_shade1, rep(0, length(y_shade1))),\n            col = rgb(1, 0, 0, 0.5), border = NA)\n    \n    x_shade2 <- x_vals[x_vals >= abs(test_stat)]\n    y_shade2 <- do.call(function_stat, c(list(x_shade2), stat_function_args))\n    polygon(c(x_shade2, rev(x_shade2)),\n            c(y_shade2, rep(0, length(y_shade2))),\n            col = rgb(1, 0, 0, 0.5), border = NA)\n    \n    abline(v = c(-abs(test_stat), abs(test_stat)), col = \"blue\", lty = 2)\n    text(-abs(test_stat) - 0.8, 0.3, round(-abs(test_stat), 2), col = \"blue\", adj = 0)\n    text(abs(test_stat) + 0.25, 0.3, round(abs(test_stat), 2), col = \"blue\", adj = 0)\n    \n  # Right-tailed test\n  } else if (alternate_hypothesis_choice == 2) {\n    x_shade <- x_vals[x_vals >= test_stat]\n    y_shade <- do.call(function_stat, c(list(x_shade), stat_function_args))\n    polygon(c(x_shade, rev(x_shade)),\n            c(y_shade, rep(0, length(y_shade))),\n            col = rgb(1, 0, 0, 0.5), border = NA)\n    \n    abline(v = test_stat, col = \"blue\", lty = 2)\n    text(test_stat + 0.25, 0.3, round(test_stat, 2), col = \"blue\", adj = 0)\n    \n  # Left-tailed test\n  } else if (alternate_hypothesis_choice == 3) {\n    x_shade <- x_vals[x_vals <= test_stat]\n    y_shade <- do.call(function_stat, c(list(x_shade), stat_function_args))\n    polygon(c(x_shade, rev(x_shade)),\n            c(y_shade, rep(0, length(y_shade))),\n            col = rgb(1, 0, 0, 0.5), border = NA)\n    \n    abline(v = test_stat, col = \"blue\", lty = 2)\n    text(test_stat - 0.8, 0.3, round(test_stat, 2), col = \"blue\", adj = 0)\n  }\n  \n}","type":"text"},{"name":"Utility/helper_functions.R","content":"tight_card <- function(title, ..., content_style = NULL) {\n  card(\n    full_screen = FALSE,\n    style = \"width: 100%; border-top: 4px solid #3179ae; padding: 0; margin: 0;\",\n    tags$div(\n      style = \"margin: 0; padding: 0;\",\n      # Title area\n      tags$div(\n        title,\n        style = \"\n          font-size: 1.25rem;\n          font-weight: bold;\n          padding: 0 0.25rem 0 0.25rem;\n          margin: -2px 0 0 0;\n          line-height: 1.2;\n          text-decoration: underline;\n        \"\n      ),\n      # Flexible content area.\n      tags$div(\n        tagList(...),\n        style = paste(\n          \"padding: 0.5rem 0.25rem 0 0.25rem; margin: 0;\",\n          content_style\n        )\n      )\n    )\n  )\n}\n\nprimary_card <- function(title, ..., content_style = NULL, header_color = \"#3179ae\") {\n  card(\n    full_screen = FALSE,\n    style = \"width: 100%; padding: 0; margin: 0;\",\n    \n    # Header with background color and white text,\n    # but no horizontal padding here:\n    card_header(\n      tags$div(\n        title,\n        style = \"padding-left: 0.25rem; padding-right: 0.25rem;\"\n      ),\n      style = paste(\n        \"background-color:\", header_color, \";\",\n        \"color: white;\",\n        \"font-size: 1.25rem;\",\n        \"padding-top: 0.8rem; padding-bottom: 0.8rem;\",  # vertical padding only here\n        \"line-height: 1.2;\",\n        \"margin: 0;\"\n      )\n    ),\n    \n    # Body with inner div padding:\n    card_body(\n      tags$div(\n        tagList(...),\n        style = \"padding-left: 0.25rem; padding-right: 0.25rem;\"\n      ),\n      class = \"primary-card-content\",\n      style = paste(\n        \"padding-top: 0.5rem;\",\n        \"padding-bottom: 0.5rem;\",\n        \"margin: 0;\",\n        content_style\n      )\n    )\n  )\n}\n","type":"text"},{"name":"Utility/load_data_1_sample_srv.R","content":"# Generate data for the Mr Han's Math Class example guiding the 1-sample z and t-test exercises.\nset.seed(1)\nHan_math_numbers <- rnorm(25, mean = 142, sd = 5)\nHan_math_numbers = data.frame(Scores = Han_math_numbers)\n\nload_1_sample_data_Server <- function(id) {\n  moduleServer(\n    id,\n    function(input, output, session) {\n      ns <- session$ns\n      \n      # Store the sample data.\n      data <- reactiveVal(NULL)\n      \n      # To trigger the pre_uploaded functions to re-run so data is re-updated.\n      re_run_flag <- reactiveVal(FALSE)\n      \n      # Mechanism to allow the user to specify the data sample they will be using.\n      output$data_upload <- renderUI({\n        \n        # Ensure some radio button option has been selected.\n        req(input$data_upload_choice)\n        \n        data(NULL)\n        \n        # Pre-uploaded data\n        if (input$data_upload_choice == \"pre_uploaded\") {\n          \n          isolate({\n            re_run_flag(!re_run_flag())\n          })\n          \n          return(\n            tagList(\n              HTML(\"<br>\"),\n              selectInput( \n                ns(\"data_set_pre_uploaded\"), \n                \"Which data set would you like to analyse?\", \n                list(\"Mr. Han's Math Class\", \"iris\", \"Orange\", \"PlantGrowth\", \"ToothGrowth\", \"chickwts\", \"ChickWeight\") \n              ),\n              HTML(\"<p><i>Note: These are common data sets. If you want to learn more about them, feel free to look on Google!<i><\/p>\")\n            )\n          )\n        }\n        \n        # Manual upload data.\n        if (input$data_upload_choice == \"manually_specified\") {\n          return(\n            tagList(\n              HTML(\"<br>\"),\n              HTML(\"<p><b>Enter data into the text box below.<\/b>\n            <ul>\n              <li>All values must be numeric, and numbers should contain no spaces or any characters other than a '.' for a decimal place.<\/li>\n              <li>Each value must be on it's own line, or comma seperated.<\/li>\n              <li>Don't forget to press 'Upload' once you are finished!<\/li>\n            <\/ul><\/p>\"),\n              \n              # Textbox\n              textAreaInput( \n                ns(\"manual_data_upload_textbox\"), \n                NULL, \n                value = \"\"\n              ),\n              \n              # Upload action button. Wrapped in a fluid row to make it right-aligned.\n              fluidRow(\n                column(8),\n                column(4,\n                       actionButton(\n                         inputId = ns(\"load_manual_data\"),\n                         label = \"Upload\",\n                         class = \"btn-success text-white\",\n                         style = \"color: #fff;\",\n                         width = \"100%\"\n                       ),\n                )\n              )\n              \n            )\n          )\n        }\n        \n      })\n      \n      # When the user chooses a pre uploaded data set, prompt them to choose the numeric column they wish to analyse.\n      output$numeric_column_seleciton_pre_uploaded_data <- renderUI({\n        req(input$data_set_pre_uploaded)\n        \n        # Only display if the pre_uploaded radio button option is selected.\n        if (input$data_upload_choice != \"pre_uploaded\") {\n          return()\n        }\n        \n        # Get numeric columns\n        #   Mr. Han Math Class example\n        if (input$data_set_pre_uploaded == \"Mr. Han's Math Class\") {\n          data = Han_math_numbers\n          \n        #   Using inbuilt R data sets.  \n        } else {\n          data = get(input$data_set_pre_uploaded)\n        }\n        numeric_cols <- names(data)[sapply(data, is.numeric)]\n        \n\n        # Select button for the identified numeric columns.\n        return(\n          tagList(\n            selectInput( \n              ns(\"column_select_pre_uploaded\"), \n              \"Which column containing numeric deata would you like to analyse?\", \n              numeric_cols\n            )\n          )\n        )\n      })\n      \n      # Update the data store once the column has been selected.\n      observeEvent(input$column_select_pre_uploaded, {\n        if (input$data_set_pre_uploaded == \"Mr. Han's Math Class\") {\n          data_to_store = Han_math_numbers[[input$column_select_pre_uploaded]]\n      \n        # Otherwise, use inbuilt R data sets.  \n        } else {\n          data_to_store = get(input$data_set_pre_uploaded)[[input$column_select_pre_uploaded]]\n          \n        }\n        data(data_to_store)\n      })\n      \n      # Optional button for if the user want to separate their data by a categorical variable.\n      output$separate_categorical_variable_pre_uploaded_data <- renderUI({\n        req(input$column_select_pre_uploaded)\n        \n        # Only display if the pre_uploaded radio button option is selected.\n        if (input$data_upload_choice != \"pre_uploaded\") {\n          return()\n        }\n        \n        # Get factor columns.\n        if (input$data_set_pre_uploaded == \"Mr. Han's Math Class\") {\n          data = Han_math_numbers\n        \n        #   Otherwise, we are using a pre-built data set in R.\n        } else {\n          data = get(input$data_set_pre_uploaded)\n        }\n        \n        factor_cols <- names(data)[sapply(data, is.factor)]\n        \n        # If no factor columns, return nothing.\n        if (length(factor_cols) == 0) {\n          return(NULL)\n        }\n        \n        factor_cols = append(\"(None)\", factor_cols)\n\n        # Select button for the identified factor columns to optionally separate on.\n        return(\n          tagList(\n            selectInput( \n              ns(\"factor_filtering_select_pre_uploaded\"), \n              \"(OPTIONAL) Below, you can optionally indicate if you want to separate your identified numeric variable by a categorical variable.\", \n              factor_cols\n            )\n          )\n        )\n        \n      })\n      \n      # If the user takes up the option to separate by a categorical variable, get the category they wish to filter with.\n      output$category_choice_pre_uploaded_data <- renderUI({\n        \n        req(input$factor_filtering_select_pre_uploaded)\n        \n        # Only display if the pre_uploaded radio button option is selected and \"(None)\" is not selected for the category.\n        if (input$data_upload_choice != \"pre_uploaded\" || input$factor_filtering_select_pre_uploaded == \"(None)\") {\n          return()\n        }\n        \n        different_categories = levels(get(input$data_set_pre_uploaded)[[input$factor_filtering_select_pre_uploaded]])\n        \n        # Select button for the different categories of the identified column.\n        return(\n          tagList(\n            selectInput( \n              ns(\"specific_category_select_pre_uploaded\"), \n              \"(OPTIONAL) Select which column to filter on.\", \n              different_categories\n            )\n          )\n        )\n      })\n      \n      # Re-update the data store if a filter is selected.\n      observeEvent(input$specific_category_select_pre_uploaded, {\n        if (input$factor_filtering_select_pre_uploaded == \"(None)\") {\n          return()\n        }\n        data_to_store = get(input$data_set_pre_uploaded)\n        data_to_store = data_to_store %>%\n          filter(data_to_store[[input$factor_filtering_select_pre_uploaded]] == input$specific_category_select_pre_uploaded)\n        data(data_to_store[[input$column_select_pre_uploaded]])\n      })\n      \n      # Used to update the data when returning to the \"pre-uploaded data\" state.\n      observe({\n        re_run_flag()\n        req(input$data_set_pre_uploaded)\n        req(input$column_select_pre_uploaded)\n        \n        if (input$data_set_pre_uploaded == \"Mr. Han's Math Class\") {\n          data_to_store = Han_math_numbers[[input$column_select_pre_uploaded]]\n          \n        #   Otherwise, user has selected data prebuilt into R.\n        } else {\n          data_to_store = get(input$data_set_pre_uploaded)[[input$column_select_pre_uploaded]]\n        }\n        data(data_to_store)\n      })\n      \n      num_missing_values_manual_upload <- reactiveVal(0)\n      error_message_insufficient_unique_values_manual_upload <- reactiveVal(FALSE)\n      \n      # Observe if the \"Upload\" button is clicked. This will involve checking the data, and triggering a warning if the data is not in the correct form.\n      observeEvent(input$load_manual_data, {\n        \n        req(input$manual_data_upload_textbox)\n        \n        input_string = input$manual_data_upload_textbox\n        \n        # Split string at commas and newline characters.\n        splits <- strsplit(input_string, \"[,\\n]\")[[1]]\n        \n        # Remove any instances of empty strings.\n        splits <- trimws(splits)\n        splits = splits[splits != \"\"]\n        \n        # Convert the values to numbers.\n        numeric_vec <- as.numeric(splits)\n        \n        # Check that there are more than one unique value (table length will be greater than 1). Otherwise, sd = 0, and the test will break.\n        adequate_unique <- length(table(numeric_vec)) > 1\n        \n        # In the case that there are not unique values, raise an error with the user.\n        if (adequate_unique == FALSE) {\n          num_missing_values_manual_upload(0)\n          error_message_insufficient_unique_values_manual_upload(TRUE)\n          data(NULL)\n          return()\n        }\n        \n        error_message_insufficient_unique_values_manual_upload(FALSE)\n        \n        # Count number of NA values (NA values mean that there was an issue with the data upload).\n        na_count <- sum(sapply(numeric_vec, function(x) is.na(x)))\n        num_missing_values_manual_upload(na_count)\n        \n        # Updata the data store with manual data\n        data(numeric_vec)\n      })\n      \n      # Warning message notifying that there were some NA values found when manually updating the values.\n      output$manual_entry_missing_values_warning <- renderUI({\n        req(input$data_upload_choice)\n        \n        # Only display if the pre_uploaded radio button option is selected.\n        if (input$data_upload_choice != \"manually_specified\") {\n          return()\n        }\n        \n        if (num_missing_values_manual_upload() > 0) {\n          string = paste(\"<span style='color: red;'><p>Warning: From the data that you uploaded, \", as.character(num_missing_values_manual_upload()), \" of the values\n                     could not be interpreted. This could be becuase these values were not numeric, or because you did not specify the data into the required format.<\/p><\/span>\")\n          return(\n            tagList(\n              HTML(\"<br>\"),\n              HTML(string)\n            )\n          )\n        } else {\n          return()\n        }\n      })\n      \n      # Error message for when not enogh unique values.\n      output$manual_entry_insufficient_unique_values <- renderUI({\n        req(input$data_upload_choice)\n        \n        # Only display if the pre_uploaded radio button option is selected.\n        if (input$data_upload_choice != \"manually_specified\") {\n          return()\n        }\n        \n        if (error_message_insufficient_unique_values_manual_upload()) {\n          string = \"<span style='color: red;'><p>Warning: You must have at least two unique values in your manually specified data.<\/p><\/span>\"\n          return(\n            tagList(\n              HTML(\"<br>\"),\n              HTML(string)\n            )\n          )\n        } else {\n          return()\n        }\n      })\n      \n      # Plot of data\n      output$initial_data_plots = renderPlot({\n        \n        # If data has not been uploaded, don't display anything.\n        if (is.null(data())) {\n          return()\n        }\n        \n        data_plotting = data.frame(data())\n        \n        # Boxplot of data\n        boxplot = data_plotting %>%\n          ggplot() +\n          aes(x = `data..`) +\n          geom_boxplot(fill = \"blue\") +\n          labs(title = \"Boxplot\", x = \"Values\") +\n          theme_minimal() + \n          theme(\n            axis.ticks.y = element_blank(),\n            axis.text.y = element_blank()\n          )\n        \n        # Histogram of data\n        histogram = data_plotting %>%\n          ggplot() +\n          aes(x = `data..`) +\n          geom_histogram(bins = 30, fill = \"blue\", color = \"black\") +\n          labs(title = \"Histogram\", x = \"Values\", y = \"Frequency\") +\n          theme_minimal()\n        \n        # Place plots on top of each other using cowplot.\n        combined = plot_grid(\n          boxplot,\n          histogram,\n          ncol = 1,\n          rel_heights = c(1,2)\n        )\n        \n        return(combined)\n      })\n      \n      # Plot UI or warning message output.\n      output$data_upload_plot_section_output <- renderUI({\n        \n        # Text to render alerting the user that they can't proceed until they make a data choice.\n        # This is when no data has been set.\n        if (is.null(data())) {\n          string = \"<span style='color: blue;'><p>In order to proceed, you must select some data to act as your sample.<\/p><\/span>\"\n          return(\n            tagList(\n              box(\n                solidHeader = TRUE,\n                width = \"100%\",\n                HTML(string)\n              )\n            )\n          )\n        }\n        \n        # If data has been set, display the plots.\n        return(\n          tagList(\n            plotOutput(ns(\"initial_data_plots\"),  width = \"80%\")\n          )\n        )\n      })\n      \n      # To make the data accessible outside of the module.\n      list(data = data)\n      \n    }\n\n  )\n}\n","type":"text"},{"name":"Utility/load_data_1_sample_ui.R","content":"load_1_sample_data_UI <- function(id, test_name = \"1-sample z-test\") {\n  ns <- NS(id)\n  tagList(\n    \n    ############ SECTION: Input Data ############\n    fluidRow(\n      column(7,\n             box(\n               title = HTML(\"<u><b>Input Sample Data<\/b><\/u>\"),\n               status = \"primary\",\n               width = \"100%\",\n               solidHeader = FALSE,\n               HTML(paste(\"<p>In order to do a \",  test_name, \" we first need to proivde our ONE sample that we will be analysing. Below you can\n                        choose pre-uploaded data to analysis, or you can manually enter data.<\/p>\"), sep = \"\"),\n               HTML(\"<br>\"),\n               \n               # User specifies whether they will use inbuilt data or manually specify data.\n               radioButtons( \n                 inputId = ns(\"data_upload_choice\"), \n                 label = HTML(\"<p><b>What data source will you be using?<\/b><\/p>\"), \n                 choices = list( \n                   \"Pre-uploaded Data\" = \"pre_uploaded\", \n                   \"Manually Specified Data\" = \"manually_specified\" \n                 ),\n                 selected = NA\n               ),\n               \n               # Mechanism for user to specify data depending on radio button option.\n               uiOutput(ns(\"data_upload\")),\n               \n               # These will output only for the case that the \"pre_uploaded\" option is selected.\n               uiOutput(ns(\"numeric_column_seleciton_pre_uploaded_data\")),\n               uiOutput(ns(\"separate_categorical_variable_pre_uploaded_data\")),\n               uiOutput(ns(\"category_choice_pre_uploaded_data\")),\n               \n               # These will output only for the case that the \"manually_specified\" option is selected.\n               uiOutput(ns(\"manual_entry_insufficient_unique_values\")),\n               uiOutput(ns(\"manual_entry_missing_values_warning\"))\n             )\n      ),\n      column(5,\n             uiOutput(ns(\"data_upload_plot_section_output\"))\n      )\n    ),\n  \n  )\n}\n","type":"text"},{"name":"Utility/load_data_paired_sample_srv.R","content":"load_data_paired_sample_Server <- function(id) {\n  moduleServer(\n    id,\n    function(input, output, session) {\n      ns <- session$ns\n      \n      # Store the sample data.\n      data_condition_1 <- reactiveVal(NULL)\n      data_condition_2 <- reactiveVal(NULL)\n      data_paired_difference <- reactiveVal(NULL)\n      \n      # To trigger the pre_uploaded functions to re-run so data is re-updated.\n      re_run_flag <- reactiveVal(FALSE)\n      \n      # Mechanism to allow the user to specify the data sample they will be using.\n      output$data_upload <- renderUI({\n        \n        # Ensure some radio button option has been selected.\n        req(input$data_upload_choice)\n        \n        # Reset data to be null.\n        data_condition_1(NULL)\n        data_condition_2(NULL)\n        data_paired_difference(NULL)\n        \n        # Pre-uploaded data\n        # The pre-uploaded data set comes from the 'PairedData' package: https://cran.r-project.org/web/packages/PairedData/PairedData.pdf\n        if (input$data_upload_choice == \"pre_uploaded\") {\n          \n          isolate({\n            re_run_flag(!re_run_flag())\n          })\n          \n          return(\n            tagList(\n              HTML(\"<br>\"),\n              selectInput( \n                ns(\"data_set_pre_uploaded\"), \n                \"Which data set would you like to analyse?\", \n                list(\"Blink\", \"BloodLead\", \"GDO\", \"GrapeFruit\", \"HorseBeginners\", \"Iron\", \"Meat\", \"PrisonStress\") \n              ),\n              HTML(\"<p><i>Warning: Some of these data sets are not truly paired. However, they are still included here to have more data for experimentation.<\/i><\/p>\"),\n              HTML(\"<p>Now we need to select what data we want to be in condition 1, and what to be in condition 2. The paired difference will be condition 2 - condition 1.<\/p>\")\n            )\n          )\n        }\n        \n        # Manual upload data.\n        if (input$data_upload_choice == \"manually_specified\") {\n          return(\n            tagList(\n              HTML(\"<br>\"),\n              HTML(\"<p><b>Enter data into the text box below for each sample.<\/b>\n            <ul>\n              <li>All values must be numeric, and numbers should contain no spaces or any characters other than a '.' for a decimal place.<\/li>\n              <li>Each value must be on it's own line, or comma seperated.<\/li>\n              <li>As this is paired data, there must be the same number of values in each textbox.<\/li>\n              <li>Don't forget to press 'Upload' once you are finished!<\/li>\n            <\/ul><\/p>\"),\n              \n              # Textbox -> condition 1 data entry.\n              HTML(\"<b>Condition 1:<\/b>\"),\n              textAreaInput( \n                ns(\"manual_data_upload_textbox_condition_1\"), \n                NULL, \n                value = \"\"\n              ),\n              \n              # Textbox -> condition 2 data entry.\n              HTML(\"<b>Condition 2:<\/b>\"),\n              textAreaInput( \n                ns(\"manual_data_upload_textbox_condition_2\"), \n                NULL, \n                value = \"\"\n              ),\n              \n              # Upload action button. Wrapped in a fluid row to make it right-aligned.\n              fluidRow(\n                column(8),\n                column(4,\n                       actionButton(\n                         inputId = ns(\"load_manual_data\"),\n                         label = \"Upload\",\n                         class = \"btn-success text-white\",\n                         style = \"color: #fff;\",\n                         width = \"100%\"\n                       ),\n                )\n              )\n              \n            )\n          )\n        }\n        \n      })\n      \n      # When the user chooses a pre uploaded data set, prompt them to choose the numeric column for condition 1 and 2.\n      output$numeric_column_selection_pre_uploaded_data <- renderUI({\n        req(input$data_set_pre_uploaded)\n        \n        # Only display if the pre_uploaded radio button option is selected.\n        if (input$data_upload_choice != \"pre_uploaded\") {\n          return()\n        }\n        \n        # Get numeric column names.\n        data = get(input$data_set_pre_uploaded) \n        numeric_cols <- names(data)[sapply(data, is.numeric)]\n        \n        return(\n          tagList(\n            fluidRow(\n              column(6,\n                     selectInput(\n                       ns(\"condition_1_pre_uploaded\"),\n                       \"Condition 1\",\n                       numeric_cols,\n                       selected = numeric_cols[1]\n                     )\n              ),\n              column(6,\n                     selectInput(\n                       ns(\"condition_2_pre_uploaded\"),\n                       \"Condition 2\",\n                       numeric_cols,\n                       selected = numeric_cols[2]\n                     )\n              )\n            )\n          )\n        )\n      })\n      \n      # Warning message when for the pre-uploaded option, conditions 1 and 2 are the same.\n      output$pre_uploaded_warning_and_save_data <- renderUI({\n        req(input$data_set_pre_uploaded)\n        req(input$condition_1_pre_uploaded)\n        \n        # Only display if the pre_uploaded radio button option is selected.\n        if (input$data_upload_choice != \"pre_uploaded\") {\n          return()\n        }\n        \n        # Warning message when the conditions are the same.\n        if (input$condition_1_pre_uploaded == input$condition_2_pre_uploaded) {\n          data_condition_1(NULL)\n          data_condition_2(NULL)\n          data_paired_difference(NULL)\n          return(\n            tagList(\n              HTML(\"<span style='color: red;'><p>Warning: Condition 1 and condition 2 should be different.<\/p><\/span>\"),\n            )\n          )\n          \n          # Otherwise, set the data.\n        } else {\n          data_condition_1(get(input$data_set_pre_uploaded)[[input$condition_1_pre_uploaded]])\n          data_condition_2(get(input$data_set_pre_uploaded)[[input$condition_2_pre_uploaded]])\n          data_paired_difference(data_condition_2() - data_condition_1())\n          return()\n        }\n      })\n      \n      # Reactive variables to keep track of the number of values entered for each condition.\n      num_values_cond_1 = reactiveVal(NULL)\n      num_values_cond_2 = reactiveVal(NULL)\n      error_message_unequal_paired_samples = reactiveVal(FALSE)\n      error_message_insufficient_unique_values_manual_upload = reactiveVal(FALSE)\n      \n      # Observe if the \"Upload\" button is clicked. This will involve checking the data, and triggering a warning if the data is not in the correct form.\n      observeEvent(input$load_manual_data, {\n        \n        req(input$manual_data_upload_textbox_condition_1)\n        req(input$manual_data_upload_textbox_condition_2)\n        \n        # Re-set warning messages\n        error_message_unequal_paired_samples(FALSE)\n        error_message_insufficient_unique_values_manual_upload(FALSE)\n        \n        data_condition_1(NULL)\n        data_condition_2(NULL)\n        data_paired_difference(NULL)\n        \n        condition_1 = input$manual_data_upload_textbox_condition_1\n        condition_2 = input$manual_data_upload_textbox_condition_2\n        \n        # Process condition 1 data.\n        splits_cond_1 <- strsplit(condition_1, \"[,\\n]\")[[1]]\n        splits_cond_1 <- trimws(splits_cond_1)\n        splits_cond_1 = splits_cond_1[splits_cond_1 != \"\"]\n        numeric_cond_1 = as.numeric(splits_cond_1)\n        numeric_cond_1 = numeric_cond_1[!is.na(numeric_cond_1)]\n        \n        # Process condition 2 data.\n        splits_cond_2 <- strsplit(condition_2, \"[,\\n]\")[[1]]\n        splits_cond_2 <- trimws(splits_cond_2)\n        splits_cond_2 = splits_cond_2[splits_cond_2 != \"\"]\n        numeric_cond_2 = as.numeric(splits_cond_2)\n        numeric_cond_2 = numeric_cond_2[!is.na(numeric_cond_2)]\n        \n        # Check if the data is really paired -> otherwise, trigger a warning message.\n        if (length(numeric_cond_1) != length(numeric_cond_2)) {\n          num_values_cond_1(length(numeric_cond_1))\n          num_values_cond_2(length(numeric_cond_2))\n          error_message_unequal_paired_samples(TRUE)\n          return()\n        }\n        \n        # Find paired difference between the groups.\n        paired_difference = numeric_cond_2 - numeric_cond_1\n        \n        # Check that there are more than one unique value (table length will be greater than 1). Otherwise, sd = 0, and the test will break.\n        adequate_unique <- length(table(paired_difference)) > 1\n        \n        # In the case that there are not unique values, raise an error with the user.\n        if (adequate_unique == FALSE) {\n          error_message_insufficient_unique_values_manual_upload(TRUE)\n          return()\n        }\n        \n        data_condition_1(numeric_cond_1)\n        data_condition_2(numeric_cond_2)\n        data_paired_difference(paired_difference)\n        \n      })\n      \n      # Error message for when not enogh unique values.\n      output$manual_entry_unequal_samples <- renderUI({\n        req(input$data_upload_choice)\n        \n        # Only display if the manually_specified radio button option is selected.\n        if (input$data_upload_choice != \"manually_specified\") {\n          return()\n        }\n        \n        if (error_message_unequal_paired_samples()) {\n          string = paste(\"<span style='color: red;'><p>Warning: The number of values in each condition is unequal. Condition 1 has \", \n                         as.character(num_values_cond_1()), \" values, and condition 2 has \", as.character(num_values_cond_2()), \" values.<\/p><\/span>\", sep = \"\")\n          return(\n            tagList(\n              HTML(\"<br>\"),\n              HTML(string)\n            )\n          )\n        } else {\n          return()\n        }\n      })\n      \n      # Error message for when not enogh unique values.\n      output$manual_entry_insufficient_unique_values <- renderUI({\n        req(input$data_upload_choice)\n        \n        # Only display if the pre_uploaded radio button option is selected.\n        if (input$data_upload_choice != \"manually_specified\") {\n          return()\n        }\n        \n        if (error_message_insufficient_unique_values_manual_upload()) {\n          string = \"<span style='color: red;'><p>Warning: You must have at least two unique values in your manually specified data.<\/p><\/span>\"\n          return(\n            tagList(\n              HTML(\"<br>\"),\n              HTML(string)\n            )\n          )\n        } else {\n          return()\n        }\n      })\n      \n      # Radio button allowing user to choose which data they want to plot.\n      output$radio_buttons_data_to_plot <- renderUI({\n        \n        # If data has not been uploaded, don't display anything.\n        if (is.null(data_paired_difference())) {\n          return()\n        }\n        \n        return(\n          box(\n            solidHeader = TRUE,\n            width = \"100%\",\n            radioButtons(ns(\"data_to_plot\"), NULL, c(\n                                                 \"Paired Difference\" = \"Paired_Difference\",\n                                                 \"Condition 1\" = \"Condition_1\", \n                                                 \"Condition 2\" = \"Condition_2\"\n                                                  ), inline=T)\n          )\n        )\n      })\n      \n      # Plot UI or warning message output.\n      output$data_upload_plot_section_output <- renderUI({\n        \n        # Text to render alerting the user that they can't proceed until they make a data choice.\n        # This is when no data has been set.\n        if (is.null(data_paired_difference())) {\n          string = \"<span style='color: blue;'><p>In order to proceed, you must select some data to act as your sample.<\/p><\/span>\"\n          return(\n            tagList(\n              box(\n                solidHeader = TRUE,\n                width = \"100%\",\n                HTML(string)\n              )\n            )\n          )\n        }\n        \n        # If data has been set, display the plots.\n        return(\n          tagList(\n            plotOutput(ns(\"initial_data_plots\"),  width = \"80%\")\n          )\n        )\n      })\n      \n      # Display input data.\n      output$initial_data_plots <- renderPlot({\n        \n        req(input$data_to_plot)\n        \n        # If data has not been uploaded, don't display anything.\n        if (is.null(data_paired_difference())) {\n          return()\n        }\n        \n        data_plotting = data_condition_1()\n        if (input$data_to_plot == \"Condition_2\") {\n          data_plotting = data_condition_2()\n        } else if (input$data_to_plot == \"Paired_Difference\") {\n          data_plotting = data_paired_difference()\n        }\n        \n        data_plotting = data.frame(data_plotting)\n        \n        # Boxplot of data\n        boxplot = data_plotting %>%\n          ggplot() +\n          aes(x = data_plotting) +\n          geom_boxplot(fill = \"blue\") +\n          labs(title = \"Boxplot\", x = \"Values\") +\n          theme_minimal() + \n          theme(\n            axis.ticks.y = element_blank(),\n            axis.text.y = element_blank()\n          )\n        \n        # Histogram of data\n        histogram = data_plotting %>%\n          ggplot() +\n          aes(x = data_plotting) +\n          geom_histogram(bins = 30, fill = \"blue\", color = \"black\") +\n          labs(title = \"Histogram\", x = \"Values\", y = \"Frequency\") +\n          theme_minimal()\n        \n        # Place plots on top of each other using cowplot.\n        combined = plot_grid(\n          boxplot,\n          histogram,\n          ncol = 1,\n          rel_heights = c(1,2)\n        )\n        \n        return(combined)\n        \n      })\n      \n      # To make the data accessible outside of the module.\n      list(data_condition_1 = data_condition_1, \n           data_condition_2 = data_condition_2, \n           data_paired_difference = data_paired_difference)\n      \n    }\n    \n  )\n}\n","type":"text"},{"name":"Utility/load_data_paired_sample_ui.R","content":"load_data_paired_sample_UI <- function(id, test_name = \"1-sample z-test\") {\n  ns <- NS(id)\n  tagList(\n    \n    ############ SECTION: Input Data ############\n    fluidRow(\n      column(7,\n             box(\n               title = HTML(\"<u><b>Input Sample Data<\/b><\/u>\"),\n               status = \"primary\",\n               width = \"100%\",\n               solidHeader = FALSE,\n               HTML(paste(\"<p>Information placed here about choosing data...<\/p>\"), sep = \"\"),\n               HTML(\"<br>\"),\n               \n               # User specifies whether they will use inbuilt data or manually specify data.\n               radioButtons( \n                 inputId = ns(\"data_upload_choice\"), \n                 label = HTML(\"<p><b>What data source will you be using?<\/b><\/p>\"), \n                 choices = list( \n                   \"Pre-uploaded Data\" = \"pre_uploaded\", \n                   \"Manually Specified Data\" = \"manually_specified\" \n                 ),\n                 selected = NA\n               ),\n               \n               # Mechanism for user to specify data depending on radio button option.\n               uiOutput(ns(\"data_upload\")),\n               \n               # These will output only for the case that the \"pre_uploaded\" option is selected.\n               uiOutput(ns(\"numeric_column_selection_pre_uploaded_data\")),\n               uiOutput(ns(\"pre_uploaded_warning_and_save_data\")),\n               \n               # # These will output only for the case that the \"manually_specified\" option is selected.\n               uiOutput(ns(\"manual_entry_unequal_samples\")),\n               uiOutput(ns(\"manual_entry_insufficient_unique_values\"))\n             )\n      ),\n      column(5,\n             uiOutput(ns(\"radio_buttons_data_to_plot\")),\n             uiOutput(ns(\"data_upload_plot_section_output\"))\n      )\n    )\n    \n  )\n}\n","type":"text"},{"name":"libraries.R","content":"library(shiny)\nlibrary(readxl)\nlibrary(tidyverse)\nlibrary(DT)\nlibrary(shinydashboard)\nlibrary(bslib)\nlibrary(DiagrammeR)\nlibrary(rafalib)\nlibrary(gmp)","type":"text"},{"name":"linking_source_files.R","content":"source(\"Box-Model/box_model_main_srv.R\")\nsource(\"Box-Model/box_model_main_ui.R\")\nsource(\"z-test/proportion_test_srv.R\")\nsource(\"z-test/proportion_test_ui.R\")\nsource(\"z-test/1_sample_z_test_ui.R\")\nsource(\"z-test/1_sample_z_test_srv.R\")\nsource(\"t-test/t_curve_motivation_ui.R\")\nsource(\"t-test/t_curve_motivation_srv.R\")\nsource(\"t-test/1_sample_t_test_ui.R\")\nsource(\"t-test/1_sample_t_test_srv.R\")\nsource(\"t-test/1_sample_t_test_generic_modules/alternate_hypothesis_ui.R\")\nsource(\"t-test/1_sample_t_test_generic_modules/alternate_hypothesis_srv.R\")\nsource(\"t-test/1_sample_t_test_generic_modules/assumptions_ui.R\")\nsource(\"t-test/1_sample_t_test_generic_modules/test_statistic_ui.R\")\nsource(\"t-test/1_sample_t_test_generic_modules/test_statistic_srv.R\")\nsource(\"t-test/1_sample_t_test_generic_modules/p_value_ui.R\")\nsource(\"t-test/1_sample_t_test_generic_modules/p_value_srv.R\")\nsource(\"t-test/1_sample_t_test_generic_modules/conclusion_ui.R\")\nsource(\"t-test/1_sample_t_test_generic_modules/conclusion_srv.R\")\nsource(\"Utility/load_data_1_sample_srv.R\")\nsource(\"Utility/load_data_1_sample_ui.R\")\nsource(\"Utility/generic_plotting_functions.R\")\nsource(\"Utility/load_data_paired_sample_ui.R\")\nsource(\"Utility/load_data_paired_sample_srv.R\")","type":"text"},{"name":"t-test/1_sample_t_test_generic_modules/alternate_hypothesis_srv.R","content":"# Requirements:\n#     - null_mean_string: the string representation of the null value.\nalternate_hypotheses_1_sample_t_test_Server <- function(id, null_mean_string) {\n  moduleServer(\n    id,\n    function(input, output, session) {\n      ns <- session$ns\n      \n      # Null hypothesis (rendered) output.\n      output$null_hypothesis_output <- renderUI({\n        hypothesis = paste(\"<p style='font-size: 16px;'>\\\\( H_0: \\\\) \\\\( \\\\mu\", \"=\", null_mean_string(), \"\\\\)<\/p>\")\n        return (\n          tagList(\n            HTML(\"<center>\"),\n            withMathJax(HTML(hypothesis)),\n            HTML(\"<\/center>\")\n          )\n        )\n      })\n      \n      # Alternate hypothesis (rendered) output.\n      output$alternate_hypothesis_output <- renderUI({\n        \n        # Specify alternate hypothesis in reference to whether the user chooses to do a one-sided or two-sided test.\n        hypothesis = paste(\"<p style='font-size: 16px;'>\\\\( H_1: \\\\) \\\\(\\\\mu\", \"\\\\neq\", null_mean_string(), \"\\\\)<\/p>\")\n        if (input$alternate_hypothesis_choice == 2) {\n          hypothesis = paste(\"<p style='font-size: 16px;'>\\\\( H_1: \\\\) \\\\(\\\\mu\", \">\", null_mean_string(), \"\\\\)<\/p>\")\n        } else if (input$alternate_hypothesis_choice == 3) {\n          hypothesis = paste(\"<p style='font-size: 16px;'>\\\\( H_1: \\\\) \\\\(\\\\mu\", \"<\", null_mean_string(), \"\\\\)<\/p>\")\n          \n        }\n        return (\n          tagList(\n            HTML(\"<center>\"),\n            withMathJax(HTML(hypothesis)),\n            HTML(\"<\/center>\")\n          )\n        )\n      })\n      \n      # To make the alternate hypothesis choice accessible outside of the module.\n      alternate_hypothesis_choice_reactive = reactive(input$alternate_hypothesis_choice)\n      list(alternate_hypothesis_choice = alternate_hypothesis_choice_reactive)\n    }\n  )\n}\n","type":"text"},{"name":"t-test/1_sample_t_test_generic_modules/alternate_hypothesis_ui.R","content":"alternate_hypotheses_1_sample_t_test_UI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    \n    ############ SECTION: The Alternate Hypothesis ############\n    fluidRow(\n      column(7,\n             box(\n               title = HTML(\"<u><b>The Alternate Hypothesis<\/b><\/u>\"),\n               status = \"primary\",\n               width = \"100%\",\n               solidHeader = FALSE,\n               HTML(\"<p>Specify what type of alternate hypothesis you will be using below:<\/p>\"),\n               HTML(\"<br>\"),\n               radioButtons(\n                 inputId = ns(\"alternate_hypothesis_choice\"),\n                 label = NULL,\n                 choices = list(\n                   \"Two Sided\" = 1,\n                   \"One Sided (greater than)\" = 2,\n                   \"One Sided (less than)\" = 3\n                 )\n               ),\n\n             )\n      ),\n      column(5,\n             box(\n               solidHeader = TRUE,\n               width = \"100%\",\n               HTML(\"<p><b>Null Hypothesis<\/b><\/p>\"),\n               uiOutput(ns('null_hypothesis_output')),\n               HTML(\"<p><b>Alternate Hypothesis<\/b><\/p>\"),\n               uiOutput(ns('alternate_hypothesis_output')),\n             )\n      )\n    ),\n  \n  )\n}\n","type":"text"},{"name":"t-test/1_sample_t_test_generic_modules/assumptions_ui.R","content":"assumptions_1_sample_t_test_UI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    \n    ############ SECTION: Assumptions ############\n    fluidRow(\n      column(12,\n             box(\n               title = HTML(\"<u><b>Assumptions<\/b><\/u>\"),\n               status = \"primary\",\n               width = \"100%\",\n               solidHeader = FALSE,\n               HTML(\"<p>For the hypothesis test to be valid, we need to check the following assumptions:<\/p>\"),\n\n               # Assumption 1: Independent Samples\n               box(\n                 title = \"Assumption 1: Independent and Randomly Chosen Sample\",\n                 width = \"100%\",\n                 collapsible = TRUE,\n                 collapsed = TRUE,\n                 status = \"info\",\n                 solidHeader = FALSE,\n                 HTML(\"<p>The first assumption is that our sample is <b>independent and randomly chosen<\/b>.<\/p>\"),\n                 HTML(\"<p><span style='color: blue;'><b>How do we check?<\/b><\/span> <i>We check by investigating the experimental setup.<\/i><br><br>\n                    For example, consider we were investigating data for a proportion test involving human participants. We could read the accompanying scientific\n                    publication to understand the methodology they used to gather the people in the sample.<\/p>\")\n               ),\n\n               # Assumption 2: Normality\n               box(\n                 title = \"Assumption 2: Normality\",\n                 width = \"100%\",\n                 collapsible = TRUE,\n                 collapsed = TRUE,\n                 status = \"info\",\n                 solidHeader = FALSE,\n                 HTML(\"<p>The second assumption is that the sample means follow a normal distribution.\"),\n                 HTML(\"<p><span style='color: blue;'><b>How do we check?<\/b><\/span><br>\n                    <ul>\n                      <li>Recall that the central limit theorem tells us that if we take a sufficiently large number of draws from the box, then the sample\n                      means will approximately follow a normal distribution. If confused, please see the box model exercise.<\/li>\n                      <li>One way to gauge whether the central limit theorem holds or not is to see how large our sample is (this is indicated by the \\\"n\\\" in\n                      the box model above).<\/li>\n                      <li>Many textbooks will say that you can say that you can use the rule of thumb that the central limit theorem will apply if we have 30\n                      or more draws. BEWARE - this is not always true! If the distribution of the values is very skewed, you will need much more than 30 draws!<\/li>\n                      <li>You should use a combination of the size of \\\"n\\\" and a histogram and boxplot of the sample distributions to help you determine whether\n                      the central limit theorem means we can resonably approximate the sample means using a normal distribution.<\/li>\n                    <\/ul>\n               <\/p>\")\n               )\n             )\n      )\n    ),\n  )\n}\n","type":"text"},{"name":"t-test/1_sample_t_test_generic_modules/conclusion_srv.R","content":"# Requirements:\n#     - p_val (int): P-value.\nconclusion_1_sample_t_test_Server <- function(id, p_val) {\n  moduleServer(\n    id,\n    function(input, output, session) {\n      ns <- session$ns\n      \n      alpha = reactiveVal(0.05)\n      alpha_warning = reactiveVal(FALSE)\n      observeEvent(input$alpha_value, {\n        if (is.na(input$alpha_value) || input$alpha_value < 0 || input$alpha_value > 1) {\n          alpha(0.05)\n          alpha_warning(TRUE)\n        } else {\n          alpha(input$alpha_value)\n          alpha_warning(FALSE)\n        }\n      })\n      \n      # Error message for when the value for alpha is invalid.\n      output$significance_level_warning <- renderUI({\n        if (alpha_warning()) {\n          return(\n            HTML(\"<span style='color: red;'><p>Error: The value for α must be between 0 and 1.<\/p><\/span>\")\n          )\n        }\n      })\n      \n      # Hypothesis test output\n      output$final_conclusion_output <- renderUI({\n        \n        # Change > or < sign depending on whether the p-value is less than or greater than alpha.\n        math_line = withMathJax(\n          HTML(paste(\"$$\\\\begin{align*} \\\\alpha &> p \\\\\\\\\", as.character(alpha()), \" &> \", as.character(round(p_val(), 4)), \"\\\\end{align*}$$\", sep = \"\"))\n        )\n        conclusion_line = HTML(\"<span style='color: blue;'><p>As the p value is less than our significance level, we <b>reject the null hypothesis<\/b>.<\/p><\/span>\")\n        if (p_val() > alpha()) {\n          math_line = withMathJax(\n            HTML(paste(\"$$\\\\begin{align*} \\\\alpha &< p \\\\\\\\\", as.character(alpha()), \" &< \", as.character(round(p_val(), 4)), \"\\\\end{align*}$$\", sep = \"\"))\n          )\n          conclusion_line = HTML(\"<span style='color: blue;'><p>As the p value is greater than our significance level, we <b>accept the null hypothesis<\/b>.<\/p><\/span>\")\n        }\n        \n        return(\n          tagList(\n            math_line,\n            conclusion_line\n          )\n        )\n      })\n    }\n  )\n}\n","type":"text"},{"name":"t-test/1_sample_t_test_generic_modules/conclusion_ui.R","content":"conclusion_1_sample_t_test_UI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    \n    ############ SECTION: Conclusion ############\n    fluidRow(\n      column(12,\n             box(\n               title = HTML(\"<u><b>Conclusion<\/b><\/u>\"),\n               status = \"primary\",\n               width = \"100%\",\n               solidHeader = FALSE,\n\n               fluidRow(\n\n                 # Section to enter significance level.\n                 column(6,\n                        HTML(\"<p><b>Step 1) What is your significance level<\/b>?<\/p>\"),\n\n                        # Space to enter significance value.\n                        fluidRow(\n                          column(1,\n                                 withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>\\\\( \\\\alpha = \\\\)<\/p>\"))\n                          ),\n                          column(3,\n                                 numericInput(\n                                   ns(\"alpha_value\"),\n                                   NULL,\n                                   value = 0.05,\n                                   min = 0,\n                                   max = 1,\n                                   width = \"100%\"\n                                 ),\n                          ),\n                        ),\n                        uiOutput(ns(\"significance_level_warning\")),\n                 ),\n\n                 # Section to provide final result.\n                 column(6,\n                        HTML(\"<p><b>Step 2) Final Conclusion<\/b><\/p>\"),\n                        uiOutput(ns(\"final_conclusion_output\"))\n                 )\n               )\n             )\n      ),\n    )\n  \n  )\n}\n","type":"text"},{"name":"t-test/1_sample_t_test_generic_modules/p_value_srv.R","content":"# Requirements:\n#     - test_stat (str): test statistic stored as string.\n#     - sample_data (df): data frame for the sample data.\n#     - alternate_hypothesis_choice (int): integer representation of which alternate hypothesis we are using.\np_value_1_sample_t_test_Server <- function(id, test_stat, sample_data, alternate_hypothesis_choice) {\n  moduleServer(\n    id,\n    function(input, output, session) {\n      ns <- session$ns\n      \n      p_val = reactiveVal(0)\n      \n      # P-value text output and calculation.\n      output$p_value_prelude <- renderUI({\n        # General prelude text about what the p-value is.\n        first_string = HTML(paste(\"<p>The p-value is the probability of observing a test-statistic <b>more extreme that our test statistic of \",\n                                  test_stat(), \n                                  \".<\/b><\/p>\", \n                                  sep = \"\"))\n        \n        second_string = withMathJax(HTML(paste(\"<p>\n                            Unlike in a z-test where the test statistics fall on a standard normal curve, in a t-test, the test statistics fall on a t-curve/distribution. \n                            If you recall from the \\\"T-Curve Motivation\\\" exercise, to specify a t-distribution, you need to specify the degree of freedom, which adjusts\n                            the 'fatness' of the t-curve's tails.<\/p>\n                            \n                            <p><b>For a 1-sample t-test, we set the degree of freedom equal to the sample size - 1 (that is, \\\\(n - 1\\\\)).<\/b><\/p>\n                            \n                            <\/p>In this case, the degree of freedom is equal to \\\\(\", length(sample_data()), \" - 1 = \",length(sample_data()) - 1 ,\"\\\\).<\/p>\")))\n        \n        # Specifically how to find the p-value (based upon alternate hypothesis).\n        third_string = \"<p>The test statistics fall on a standard normal curve. \"\n        if (alternate_hypothesis_choice() == 1) {\n          negative_test_stat = as.character(-abs(as.numeric(test_stat())))\n          positive_test_stat = as.character(abs(as.numeric(test_stat())))\n          third_string = paste(third_string, \"As we are doing a two-sided alternate hypothesis, we are interested in finding the <b>area below \", negative_test_stat,\n                               \" and above \", positive_test_stat, \".<\/p><\/b>\", sep = \"\")\n        } else if (alternate_hypothesis_choice() == 2){\n          third_string = paste(third_string, \"As we are doing a one-sided greater than alternate hypothesis, we are interested in finding the <b>area above \", test_stat(),\n                               \".<\/p><\/b>\", sep = \"\")\n        } else if (alternate_hypothesis_choice() == 3){\n          third_string = paste(third_string, \"As we are doing a one-sided less than alternate hypothesis, we are interested in finding the <b>area below \", test_stat(),\n                               \".<\/p><\/b>\", sep = \"\")\n        }\n        third_string = HTML(third_string)\n        \n        # Calculate p-value.\n        p_val_local = 0\n        if (alternate_hypothesis_choice() == 1) {\n          p_val_local = 2 * (1 - pnorm(abs(as.numeric(test_stat()))))\n        } else if (alternate_hypothesis_choice() == 2) {\n          p_val_local = 1 - pnorm(as.numeric(test_stat()))\n        } else if (alternate_hypothesis_choice() == 3) {\n          p_val_local = pnorm(as.numeric(test_stat()))\n        }\n        p_val(p_val_local)\n        \n        # String to output the p-value.\n        p_value = withMathJax(HTML(\"<p style='font-size: 16px; text-align: center;'>\\\\( p =\", as.character(round(p_val_local,5)) ,\"\\\\)<\/p>\"))\n        \n        return(\n          tagList(\n            first_string,\n            second_string,\n            third_string,\n            p_value\n          )\n        )\n        \n      })\n      \n      # Histogram with t curve to show p-value calculation.\n      output$test_stat_t_plot = renderPlot({\n        return(curve_shaded_test_stat(dt, list(df = length(sample_data()) - 1), as.numeric(test_stat()), alternate_hypothesis_choice()))\n      })\n      \n      # To make the alternate hypothesis choice accessible outside of the module.\n      list(p_val = p_val)\n    }\n  )\n}\n","type":"text"},{"name":"t-test/1_sample_t_test_generic_modules/p_value_ui.R","content":"p_value_1_sample_t_test_UI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    \n    ############ SECTION: Test p-value ############\n    fluidRow(\n      column(6,\n             box(\n               title = HTML(\"<u><b>p-value<\/b><\/u>\"),\n               status = \"primary\",\n               width = \"100%\",\n               solidHeader = FALSE,\n               uiOutput(ns(\"p_value_prelude\"))\n             )\n      ),\n      column(6,\n             plotOutput(ns(\"test_stat_t_plot\"), width = \"80%\", heigh = \"275px\"),\n      )\n    )\n  \n  )\n}\n","type":"text"},{"name":"t-test/1_sample_t_test_generic_modules/rationale.md","content":"The 1 sample t-test and the paired t-test lessons are essentially identical in substance.\n\nThis is because the paired t-test is essentially just a 1-sample t-test on the difference between the paired observations.\n\nHence, to avoid duplication, we have extracted the different sub-sections common to both the 1 sample t-test and paired t-test.\n","type":"text"},{"name":"t-test/1_sample_t_test_generic_modules/test_statistic_srv.R","content":"# Requirements:\n#     - sample_data: the data frame containing the datat that is being analysed.\n#     - null_mean_string: the string representation of the null value.\ntest_statistic_1_sample_t_test_Server <- function(id, sample_data, null_mean_string) {\n  moduleServer(\n    id,\n    function(input, output, session) {\n      ns <- session$ns\n      \n      EV_string = reactiveVal(\"\")\n      SE_string = reactiveVal(\"\")\n\n      # Expected value and standard error output.\n      output$ev_and_se_text <- renderUI({\n\n        sample_size = length(sample_data())\n\n        # Find EV and SE.\n        mean_ = as.numeric(null_mean_string())\n        sd_ = sd(sample_data())\n        EV = mean_\n        SE = sd_ / sqrt(sample_size)\n\n        EV_string(as.character(round(EV, 5)))\n        SE_string(as.character(round(SE, 5)))\n\n        expected_value = withMathJax(\n          HTML(\"<p>Expected Value:<\/p>\"),\n          HTML(paste(\"$$\\\\begin{align*} \\\\text{EV} &= \\\\mu \\\\\\\\ &=\", EV_string(), \"\\\\end{align*}$$\", sep = \"\"))\n        )\n\n        standard_error = withMathJax(\n          HTML(\"<p>Standard Error:<\/p>\"),\n          HTML(paste(\"$$\\\\begin{align*} \\\\text{SE} &= \\\\frac{\\\\sigma}{\\\\sqrt{n}} \\\\\\\\ &= \\\\frac{\", round(sd_, 5) , \"}{\\\\sqrt{\",\n                     as.character(sample_size), \"}}\\\\\\\\ &= \", SE_string(), \"\\\\end{align*}$$\", sep = \"\")),\n          HTML(\"(Note that we use the sample standard deviation [\\\\(s \\\\)] rather than the population standard deviation [\\\\(\\\\sigma \\\\)])\")\n        )\n\n        return(\n          tagList(\n            expected_value, standard_error\n          )\n        )\n      })\n\n      test_stat = reactiveVal(\"\")\n\n      # Test statistic output.\n      output$test_statistic_calculation <- renderUI({\n\n        observed_val = mean(sample_data(), na.rm = TRUE)\n\n        # Calculate test statistic.\n        temp = (observed_val - as.numeric(EV_string()))/as.numeric(SE_string())\n        temp = as.character(round(temp, 4))\n        test_stat(temp)\n\n        t_stat = withMathJax(\n          HTML(paste(\"$$\\\\begin{align*} \\\\text{TS} &= \\\\frac{\\\\text{OV} - \\\\text{EV}}{\\\\text{SE}} \\\\\\\\ &= \\\\frac{\", as.character(round(observed_val,5)), \" - \",\n                     EV_string(), \"}{\", SE_string(), \"} \\\\\\\\ &= \", test_stat(), \"\\\\end{align*}$$\", sep = \"\"))\n        )\n        additional_line = HTML(paste(\"<p style = 'text-align: left;'><span style='color: blue;'><i>The value for the test-statistic is \", test_stat(), \". <\/i><\/span><\/p>\", sep = \"\"))\n        return(\n          tagList(\n            t_stat,\n            additional_line\n          )\n        )\n      })\n      \n      # To make the alternate hypothesis choice accessible outside of the module.\n      #alternate_hypothesis_choice_reactive = reactive(input$alternate_hypothesis_choice)\n      list(test_stat = test_stat)\n    }\n  )\n}\n","type":"text"},{"name":"t-test/1_sample_t_test_generic_modules/test_statistic_ui.R","content":"test_statistic_1_sample_t_test_UI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    \n    ############ SECTION: Test Statistic ############\n    fluidRow(\n      column(12,\n             box(\n               title = HTML(\"<u><b>Test Statistic<\/b><\/u>\"),\n               status = \"primary\",\n               width = \"100%\",\n               solidHeader = FALSE,\n\n               fluidRow(\n                 column(6,\n                        HTML(\"<p><b>Step 1) Calculate Expected Value (SE) and Standard Error (SE)<\/b><\/p>\"),\n                        uiOutput(ns(\"ev_and_se_text\"))\n                 ),\n                 column(6,\n                        HTML(\"<p><b>Step 2) Test Statistic Calculation<\/b><\/p>\"),\n                        uiOutput(ns(\"test_statistic_calculation\"))\n                 )\n               ),\n             ),\n      ),\n    ),\n  \n  )\n}\n","type":"text"},{"name":"t-test/1_sample_t_test_srv.R","content":"oneSampleTTestServer <- function(id) {\n  \n  moduleServer(id, function(input, output, session) {\n    \n    ns <- session$ns\n    \n    ############################ Modal Intro ############################# \n    \n    observeEvent(input$learning_text, {\n      showModal(modalDialog(\n        title = \"The '1-sample s-test'\",\n        \n        withMathJax(HTML(\"<p>\n              <u><i>If you have not read the ‘t-curve motivation’ exercise, it is highly recommended to read it before continuing.<\/i><\/u><br><br>\n\n              Recall that we were guided by the following scenario in the ‘1-sample z-test’ exercise.<br><br>\n          <\/p>\")),\n        fluidRow(\n          column(1),\n          column(10,\n                 withMathJax(HTML(\"<p>\n                  <i>\\\"Suppose that in a made-up country, there is a statistics exam that all high school students take. If a student received a mark in the exam of 140 or over, \n                  it means that they are demonstrating a satisfactory level of statistical knowledge as deemed by the education board. <span style='color: red;'>Based on data from\n                  multiple years, it’s known the population standard deviation in test scores is 7.5.<\/span><br><br>\n                  \n                  Mr. Han is a statistics teacher who has been testing some new innovative teaching methods. In particular, he wants to test whether the average exam grade for the\n                  25 students in his class is statistically greater than a mark of 140.\\\"<\/i><br><br>\n              <\/p>\"))\n          ),\n          column(1)\n        ),\n        withMathJax(HTML(\"<p>\n              What if we were to remove the information in red, meaning that we no longer know the population standard deviation? The ‘1-sample z-test’ previously discussed\n              no longer works, as the box model we have been studying requires that the population standard deviation is known (one of our key assumptions has been violated).<br><br> \n              \n              As mentioned in the ‘t-curve motivation’ exercise, we can address this issue by approximating the population standard deviation using the sample standard deviation.\n              We can easily get the sample standard deviation by using the sample data!<br><br>\n              \n              With this in mind, the remainder of this hypothesis test should be familiar! Firstly, Mr. Han's hypotheses are the same as in the ‘1-sample z-test’ exercise. As a \n              reminder, Mr. Han uses the symbol \\\\(\\\\mu \\\\) to represent the average mark of his class. He sets up the null hypothesis that his class’s average grade is 140. \n              Mathematically, this is written as:<br>\n\n              <center><p style='font-size: 16px'>\\\\( H_{0} : \\\\mu = 140 \\\\)<\/p><\/center><br>\n\n              When setting up the alternate hypothesis, because Mr. Han is interested in seeing if his innovative teaching approach leads to marks greater than 140, we set up a\n              one-sided alternate hypothesis, written mathematically as:<br>\n\n              <center><p style='font-size: 16px'>\\\\( H_{1} : \\\\mu > 140 \\\\)<\/p><\/center><br>\n\n              Once again, the main idea is that Mr. Han will use his sample of 25 students to determine whether there is evidence to support or reject the null hypothesis.\n          <\/p>\")),\n        fluidRow(\n          column(8,\n                 withMathJax(HTML(\"<p>\n                   <h5><u>How does Mr. Han go about doing this?<\/u><\/h5><br>\n                   \n                   Similar to before, we can use the box model to model the hypothesis test. This time, let’s first turn our attention to the test scores that Mr. Han’s students \n                   achieved in the class. Let’s say that the 25 students had an average score of 142.843 As there were 25 students, we specify \\\\(n = 25 \\\\). The average score of \n                   142.843 is called the observed value (OV). Also, using the scores, Mr. Han found that the sample standard deviation equals 4.751 (\\\\(s = 4.751\\\\)).<br><br>\n\n                   Using these values and \\\\(\\\\mu = 140\\\\) from the null hypothesis, we have all the information needed to create the box model, which is shown on the right.\n                   <\/p>\"))\n          ),\n          column(4,\n                 HTML(\"<br>\"),\n                 grVizOutput(ns(\"intro_example_box_model\"), width = \"80%\", height = \"70%\"),\n          )\n        ),\n        HTML(\"<p><br>\n                With the box made, Mr. Han can now calculate the test statistic. In the formula below, note that we use the notation SE estimate (the reason for this is \n                explained in the ‘t-curve motivation’ exercise).<br>\n                <\/p>\"),\n        withMathJax(\n          HTML(paste(\"$$\\\\begin{align*} \\\\text{Test-Statistic (TS)} &= \\\\frac{\\\\text{OV} - \\\\text{EV}}{\\\\hat{\\\\text{SE}}}\n                              \\\\\\\\ &= \\\\frac{\\\\text{OV} - \\\\text{EV}}{\\\\frac{s}{\\\\sqrt{n}}}\n                              \\\\\\\\ &= \\\\frac{142.843 - 140}{\\\\frac{4.751}{\\\\sqrt{25}}}\n                              \\\\\\\\ &= 2.992 \\\\text{ (3 decimal places)} \\\\end{align*}$$\", sep = \"\"))\n        ),\n        HTML(\"<p><br>\n            With the test statistic found, Mr. Han is ready to find the p-value. However, this represents a big difference between the ‘1-sample  \n            <span style='color: red;'>z<\/span>-test’ and the ‘1-sample  <span style='color: red;'>t<\/span>-test’. These hypothesis tests get the last part of their names from\n            the type of curve used to find the p-values. The ‘z-test’ gets its name because the p-value is found from the standard normal distribution (also called the \n             <span style='color: red;'>z<\/span>-distribution). The ‘t-test’ gets its name because the p-value is found from the  <span style='color: red;'>t<\/span>-distribution.<br><br>\n             \n             As we are doing a t-test in this exercise, we will be using the t-distribution. Please continue following the exercise to see how this is done!\n             <\/p>\"),\n        easyClose = TRUE,\n        footer = modalButton(\"Close\"),\n      ))\n    })\n    \n    # Example box model\n    output$intro_example_box_model <- renderGrViz({\n      string = \"digraph diagram {\n          graph [layout = dot, rankdir = TB]\n\n          node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12, width = 2.5]\n          box [label = '&mu; = 140; s = 4.751']\n\n          node [shape = oval,width = 1.5,fillcolor = \\\"#f9ffbd\\\", fontsize = 12]\n          sample [label = 'OV = 142.843']\n\n          edge [minlen = 2]\n            box->sample [label = '  n = 25', fontsize = 12, labeldistance = 5]\n          }\"\n      return(grViz(string))\n    })\n    \n    ############################ Uploading Data Mechanism ############################# \n    \n    sample_data_session <- load_1_sample_data_Server(id = \"loading_data\")\n    \n    # Store the sample data.\n    sample_data <- reactiveVal(NULL)\n    \n    # Variable that is true when the data has been specified, meaning the rest of the exercise can commence\n    # This variable can be accessed by the ui conditional panel.\n    output$render_rest_of_exercise <- reactive({\n      !is.null(sample_data_session$data())\n      sample_data(sample_data_session$data())\n    })\n    outputOptions(output, \"render_rest_of_exercise\", suspendWhenHidden = FALSE)\n    \n    ################################################################\n    \n    # Box model plot\n    output$box_model <- renderGrViz({\n\n      if (is.null(input$null_mu)) {\n        return()\n      }\n\n      # String with mu and sigma.\n      pop_details = paste(\"&mu; = \", as.character(round(input$null_mu, digits = 3)), \"; s = \", as.character(round(sd(sample_data()), digits = 3)))\n\n      # Set up graph and box\n      diagram = \"digraph diagram { graph [layout = dot, rankdir = TB] node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12, width = 2.5] box [label = '\"\n      diagram = paste(diagram, pop_details, \"']\", sep = \"\")\n\n      # Set up sample circle.\n      diagram = paste(diagram, \" node [shape = oval,width = 1.5,fillcolor = \\\"#f9ffbd\\\", fontsize = 12] sample [label = '\", \"OV = \",\n                      as.character(round(mean(sample_data(), na.rm = TRUE), digits = 3)), \"']\", sep = \"\")\n\n      # Create edge between box and circle.\n      # Annotate edge with n value.\n      n = length(sample_data())\n      diagram = paste(diagram, \" edge [minlen = 2] box->sample [label = '  n = \", n, \"', fontsize = 12, labeldistance = 5]}\", sep = \"\")\n\n      return (grViz(diagram))\n    })\n    \n    null_mean_string = reactive({as.character(round(input$null_mu, digits = 3))})\n    alt_hypothesis_session <- alternate_hypotheses_1_sample_t_test_Server(id = \"alternate_hypothesis\", null_mean_string)\n    \n    test_stat_session <- test_statistic_1_sample_t_test_Server(id = \"test_stat\", sample_data, null_mean_string)\n   \n    p_value_session <- p_value_1_sample_t_test_Server(id = \"p_val\", test_stat_session$test_stat, sample_data, alt_hypothesis_session$alternate_hypothesis_choice)\n\n    conclusion_1_sample_t_test_Server(id = \"conclusion\", p_value_session$p_val)\n    \n  })\n    \n}","type":"text"},{"name":"t-test/1_sample_t_test_ui.R","content":"oneSampleTTestUI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    \n    # Title Strip\n    fluidRow(\n      column(8,\n             HTML(\"<h1>1-Sample t-Test<\/h1><br>\"),\n      ),\n      column(4,\n             HTML(\"<br>\"),\n             tags$style(HTML(paste0(\"\n              [id='\", ns(\"learning_text\"), \"'] {\n                font-size: 20px;\n                padding: 10px 20px;\n              }\n              \"))),\n             actionButton(ns(\"learning_text\"), \"What is a 1-sample t-test?\", class = \"btn btn-primary\", style=\"color: #fff;\", width = \"100%\")\n      ),\n    ),\n    HTML(\"<br>\"),\n    \n    ############ SECTION: Input Data ############\n    load_1_sample_data_UI(ns(\"loading_data\"), test_name = \"1-sample t-test\"),\n\n    HTML(\"<br><br><br>\"),\n    \n    # Conditional panel ensures that the rest of the exercise is displayed only if the data has been uploaded.\n    conditionalPanel(\n      condition = sprintf('output[\"%s\"]', ns(\"render_rest_of_exercise\")),\n\n      ############ SECTION: The NULL Hypothesis - Setting up the Box ############\n      fluidRow(\n        column(7,\n               box(\n                 title = HTML(\"<u><b>The 'NULL' Hypothesis - Setting up the Box<\/b><\/u>\"),\n                 status = \"primary\",\n                 width = \"100%\",\n                 solidHeader = FALSE,\n\n                 p(\"We start by using the box model to represent our null hypothesis.\"),\n\n                 # Step 1: Specify NULL Hypothesis\n                 box(\n                   title = \"Step 1) Specify NULL Hypothesis\",\n                   width = \"100%\",\n                   collapsible = TRUE,\n                   collapsed = TRUE,\n                   status = \"info\",\n                   solidHeader = FALSE,\n                   HTML(\"<p>\n                            The only thing we need to do to set up the box in this test is specify the sample data (which we have already done) and specify the null\n                            hypothesis. In this test we are focusing on the mean, so the null hypothesis is that the population mean is equal to some value which\n                            we set below.\n                        <\/p>\"),\n                   withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>Given \\\\(\\\\mu \\\\), where \\\\(\\\\mu \\\\) is the mean of some variable:<\/p>\")),\n                   fluidRow(\n                     column(7),\n                     column(2,\n                            withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>\\\\( H_0: \\\\) \\\\(\\\\mu = \\\\)<\/p>\"))\n                     ),\n                     column(3,\n                            numericInput(\n                              ns(\"null_mu\"),\n                              NULL,\n                              value = 140\n                            ),\n                     ),\n                   ),\n                 ),\n\n\n                 # Extra notes\n                 box(\n                   title = \"Extra Points\",\n                   width = \"100%\",\n                   collapsible = TRUE,\n                   collapsed = TRUE,\n                   status = \"info\",\n                   solidHeader = FALSE,\n                   withMathJax(HTML(\"<p>In case you are confused about where all the values in the diagram have come from, these comes from the sample data that you previously\n                            specified. In particular:\n                           <ul>\n                              <li>\\\\(s \\\\) represents the sample standard deviation. Unlike the 1-sample z-test which requires that the population standard\n                                deviation is known, the 1-sample t-test removes this assumption, instead, using the standard deviation of the sample and then later\n                                the t-distribution to determine the p-value.<\/li>\n                              <li>The value for \\\\(n \\\\) comes from the number of values in the sample chosen above.<\/li>\n                              <li>The observed value (\\\\(\\\\text{OV} \\\\)) comes from the mean of the sample chosen above.<\/li>\n                           <\/ul>\n                        <\/p>\"))\n                 )\n               )\n        ),\n        column(5,\n               # Box model output.\n               box(\n                 solidHeader = TRUE,\n                 width = \"100%\",\n                 HTML(\"<center>\"),\n                 grVizOutput(ns(\"box_model\"), width = \"70%\", height = \"70%\"),\n                 HTML(\"<\/center>\")\n               ),\n        )\n      ),\n\n      HTML(\"<br><br><br>\"),\n      \n      ########### SECTION: The Alternate Hypothesis ############\n      alternate_hypotheses_1_sample_t_test_UI(ns(\"alternate_hypothesis\")),\n      HTML(\"<br><br><br>\"),\n      \n      ############ SECTION: Assumptions ############\n      assumptions_1_sample_t_test_UI(ns(\"assumptions\")),\n      HTML(\"<br><br><br>\"),\n\n      ############ SECTION: Test Statistic ############\n      test_statistic_1_sample_t_test_UI(ns(\"test_stat\")),\n      HTML(\"<br><br><br>\"),\n      \n      ############ SECTION: p-value ############\n      p_value_1_sample_t_test_UI(ns(\"p_val\")),\n      HTML(\"<br><br><br><br><br>\"),\n      \n      ############ SECTION:Conclusion ############\n      conclusion_1_sample_t_test_UI(ns(\"conclusion\"))\n      \n    )\n\n  )\n}","type":"text"},{"name":"t-test/t_curve_motivation_srv.R","content":"tCurveMotivationServer <- function(id) {\n  \n  moduleServer(id, function(input, output, session) {\n    \n    ns <- session$ns\n    \n    output$changing_df_graph <- renderPlot({\n      par(mar = c(4,0,0,0)) # no margins\n      \n      x <- seq(-4, 4, length.out = 100)\n      y_t <- dt(x, df = input$df_slider)\n      y_norm <- dnorm(x, mean = 0, sd = 1)\n      \n      # Determine y-axis limits so t curve fits fully\n      ylim <- range(y_t, y_norm)\n      \n      # Plot t-distribution curve in black solid line\n      plot(x, y_t, type = \"l\", col = \"black\", lwd = 1,\n           ylab = \"\", xlab = \"\", axes = FALSE, ylim = ylim)\n      \n      # Add x-axis with labels\n      axis(1, col = \"black\")\n      \n      # Add normal curve if requested - red dashed line\n      if (input$display_normal_curve) {\n        lines(x, y_norm, col = \"red\", lwd = 1, lty = \"dashed\")\n      }\n    })\n    \n    output$test_stat_normal_plot = renderPlot({\n      return(curve_shaded_test_stat(dnorm, list(mean = 0, sd = 1), as.numeric(input$test_statistic_input), 1))\n    })\n\n    output$test_stat_t_plot = renderPlot({\n      return(curve_shaded_test_stat(dt, list(df=input$df_slider_demo_2), as.numeric(input$test_statistic_input), 1))\n    })\n\n    output$p_value_normal_curve = renderUI({\n      p_val = 2 * (1 - pnorm(abs(as.numeric(input$test_statistic_input))))\n      p_value = withMathJax(HTML(\"<p style='font-size: 16px; text-align: center;'>\\\\( p =\", as.character(round(p_val,5)) ,\"\\\\)<\/p>\"))\n      return(p_value)\n    })\n\n    output$p_value_t_curve = renderUI({\n      p_val = 2 * (1 - pt(abs(as.numeric(input$test_statistic_input)), df = input$df_slider_demo_2))\n      p_value = withMathJax(HTML(\"<p style='font-size: 16px; text-align: center;'>\\\\( p =\", as.character(round(p_val,5)) ,\"\\\\)<\/p>\"))\n      return(p_value)\n    })\n    \n  \n    \n\n  })\n    \n}","type":"text"},{"name":"t-test/t_curve_motivation_ui.R","content":"tCurveMotivationUI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    \n    HTML(\"<h1>Introducing the t-Distribution (Motivation)<\/h1>\"),\n    \n    ############ SECTION: When we don't know the population sd! ############\n    fluidRow(\n        column(12,\n               tight_card(\n                   \"When we don't know the population sd!\",\n                   withMathJax(\n                     HTML(\"\n                        <p style='margin-top: 0.75rem; margin-bottom: 0.75rem; line-height: 1.5;'>\n                          When determining the standard error (SE) in the 1-sample z-test section, \n                          we assumed that the <b>population standard deviation (denoted by \\\\(\\\\sigma\\\\)) is known<\/b>:\n                        <\/p>\n                      \"),\n                     HTML(\"$$\\\\begin{align*} \\\\text{SE} &= \\\\frac{\\\\color{red}{\\\\sigma}}{\\\\sqrt{n}} \\\\end{align*}$$\"),\n                     HTML(\"\n                        <p style='margin-top: 0.75rem; margin-bottom: 0.75rem; line-height: 1.5;'>\n                          However, in practice, the population standard deviation is usually unknown. \n                          Hence, we often use the <b>sample standard deviation (denoted by \\\\(s\\\\)) instead<\/b>:\n                        <\/p>\n                      \"),\n                     HTML(\"$$\\\\begin{align*} \\\\hat{\\\\text{SE}} &= \\\\frac{\\\\color{red}{s}}{\\\\sqrt{n}} \\\\end{align*}$$\"),\n                     HTML(\"\n                        <p style='margin: 0; line-height: 1.5;'>\n                          One observation is that when we substitute the population standard deviation for the sample standard deviation, \n                          we now write \\\\(\\\\text{SE}\\\\) instead of \\\\(\\\\hat{\\\\text{SE}}\\\\). \n                          The \\\\(\\\\hat{}\\\\) represents that this standard error is an estimate. \n                          We don’t have the true \\\\(\\\\text{SE}\\\\) anymore, as we are using the sample, \n                          which is a subset of the population.<br><br>\n                  \n                          As the sample size increases, the estimated standard error (\\\\(\\\\hat{\\\\text{SE}}\\\\)) \n                          will converge to the population standard error (\\\\(\\\\text{SE}\\\\)). \n                          Conceptually, this is because as the sample becomes larger, \n                          it is more representative of the population. \n                          Also, the above is only true if we are doing unbiased sampling!\n                        <\/p>\n                      \")\n                   )\n               )\n        )\n    ),\n    \n\n    HTML(\"<br><br>\"),\n\n    ############ SECTION: Introducing the t-curve. ############\n    fluidRow(\n\n      column(6,\n             tight_card(\n                \"Introducing the t-curve\",\n                withMathJax(\n                  HTML(\n                    \"<p>\n                        Firstly, let’s remind ourselves of the test statistic (\\\\(\\\\text{TS}\\\\)) calculation for a 1-sample z-test:\n                    <\/p>\"\n                  ),\n                  HTML(\"$$\\\\begin{align*} \\\\text{Test Statistic (TS)} &= \\\\frac{\\\\text{OV} - \\\\text{EV}}{\\\\color{red}{\\\\text{SE}}} \\\\end{align*}$$\"),\n                  HTML(\n                    \"<p>\n                        As a reminder, \\\\(\\\\text{OV}\\\\) stands for observed value and \\\\(\\\\text{EV}\\\\) stands for expected value. As mentioned in the above seection,\n                        the \\\\(\\\\text{SE}\\\\) (indicated in red) requires that the population standard deviation is known. When this is not known, we can instead use\n                        the estimate standard error (using the sample’s standard deviation):\n                    <\/p>\"\n                  ),\n                  HTML(\"$$\\\\begin{align*} \\\\text{Test Statistic (TS)} &= \\\\frac{\\\\text{OV} - \\\\text{EV}}{\\\\color{red}{\\\\hat{\\\\text{SE}}}} \\\\end{align*}$$\"),\n                  HTML(\"\n                    <p>\n                       In both cases above, the test statistic formulas look the same. The only difference is that the latter one has an estimate for \\\\(\\\\text{SE}\\\\)\n                       (i.e. \\\\(\\\\hat{\\\\text{SE}}\\\\)). Hence, we  claim that the second test statistic has extra variability because of the uncertainty surrounding\n                       \\\\(\\\\hat{\\\\text{SE}}\\\\).<br><br>\n\n                       How do we account for this extra variability? We adjust the method in which the p-value is found. Hence, to account for this extra variability,\n                       like the 1-sample z-test, which uses a normal curve to find the p-value, we use the t-curve. The t-curve (or t-distribution) is similar in\n                       appearance to the normal curve, except it contains an extra parameter called degrees of freedom, which adjusts the ‘fatness’ of the curve’s tails.\n                       This is evident when playing with the app to the right. When degrees of freedom increases, the tail fatness decreases. You can also see that\n                       as the degrees of freedom value increases, the curve approaches the normal distribution.\n                    <\/p>\n                  \")\n                )\n             ),\n      ),\n      column(6,\n             primary_card(\n                \"Demonstration\",\n                HTML(\"<p>The slider below changes the degrees of freedom of the red t-curve in the graph below.<\/p>\"),\n                fluidRow(\n                  column(8,\n                         sliderInput(\n                           ns(\"df_slider\"),\n                           NULL,\n                           min = 1,\n                           max = 25,\n                           value = 1),\n                  ),\n                  column(4,\n                         checkboxInput(ns(\"display_normal_curve\"), \"Display normal curve\", TRUE),\n                  )\n                ),\n                plotOutput(ns(\"changing_df_graph\"), width = \"100%\", height = \"300px\"),\n             )\n      )\n    ),\n\n    HTML(\"<br><br><br>\"),\n\n    ############ SECTION: Introducing the t-curve. ############\n    fluidRow(\n\n      column(6,\n             tight_card(\n               \"T-Distribution and P-Values\",\n               withMathJax(\n                 HTML(\n                   \"<p>\n                        Previously, it was mentioned that the parameter called “degrees of freedom” adjusts the ‘fatness’ of the curve’s tails. This can be easily\n                        verified in the app above when setting the slider to 1 and then 10. At 1 degree of freedom, the red t-curve has its tails well and truly above\n                        the dashed normal curve. However, when looking at 10 degrees of freedom, the red t-curve’s tails have shrunk to be closer to that of the dashed\n                        normal curve.<br><br>\n\n                        There is a very logical reason for this! Recall from the ‘1-sample z-test’ exercise that when it comes to finding the p-value, we plot our test\n                        statistic and find the area under the curve covering the shaded region. If we have a p-value below our significance level (which is typically\n                        \\\\(\\\\alpha = 0.05\\\\)), we reject the null hypothesis.<br><br>\n\n                        As mentioned previously, if we do not have the population standard deviation, we need to account for the extra variability introduced by using\n                        the sample standard deviation. Degrees of freedom allow us to do just that! The value of degrees of freedom is directly linked to sample size,\n                        meaning larger degrees of freedom are associated with larger sample sizes. When degrees of freedom are equal to 1, this indicates that our sample\n                        is tiny (likely contains only 2 points), meaning there is lots of variability/uncertainty and that is why the tails of the t-curve are so fat.\n                        The result of this is that the area under the curve will be much larger, meaning that a more extreme test statistic is needed to reject the null\n                        hypothesis.<br><br>\n\n                        On the other hand, when degrees of freedom are equal to a larger value (such as 25), the t-curve tails appear much more closely aligned with the\n                        normal curve’s tails. This is because we are now taking a much larger sample, and there is less variability to account for.<br><br>\n\n                        The demo to the right allows you to compare the p-values from a normal and t-distribution. You can see that for low values for degrees of freedom,\n                        the p-value is much larger than that of the normal distribution. However, as you increase degrees of freedom, the p-values become more similar.\n                    <\/p>\"\n                 )\n               )\n             )\n      ),\n      column(6,\n             primary_card(\n               title = \"Demonstration\",\n               HTML(\"<p>Comparison of the p-values for a two-sided alternate hypothesis test using a normal and t-curve.<\/p>\"),\n               fluidRow(\n                 column(4,\n                        numericInput(\n                          ns(\"test_statistic_input\"),\n                          \"Enter Test Statistic:\",\n                          value = 1\n                        )\n                 ),\n                 column(8,\n                        sliderInput(\n                          ns(\"df_slider_demo_2\"),\n                          \"Change Degree of Freedom (T-Curve):\",\n                          min = 1,\n                          max = 50,\n                          value = 1),\n                 )\n               ),\n               fluidRow(\n                 column(6,\n                    HTML(\"<h5><center><b>Normal Curve (z-tests)<\/b><\/center><\/h5>\"),\n                    plotOutput(ns(\"test_stat_normal_plot\"), width = \"100%\", heigh = \"250px\"),\n                    uiOutput(ns(\"p_value_normal_curve\"))\n                 ),\n                 column(6,\n                    HTML(\"<h5><center><b>T-Curve (t-tests)<\/b><\/center><\/h5>\"),\n                    plotOutput(ns(\"test_stat_t_plot\"), width = \"100%\", heigh = \"250px\"),\n                    uiOutput(ns(\"p_value_t_curve\"))\n                 )\n               )\n             )\n      )\n    ),\n\n    HTML(\"<br><br><br>\"),\n\n    ############ SECTION: Conclusion ############\n    fluidRow(\n      column(12,\n             tight_card(\n               \"Conclusion\",\n               HTML(\"<p>\n                  The purpose of this exercise was to develop a conceptual understanding of what the t-distribution is, and why we need it. We did this through discussing\n                  the 1-sample z-test, and specifically, how things change when we don't know the population standard deviation. I have left some things vague (such as\n                  how do we know which value to set degrees of freedom to), but we will go into greater detail in further exercises.\n              <\/p>\")\n             )\n      )\n    ),\n    \n    HTML(\"<br><br><br>\"),\n  )\n}","type":"text"},{"name":"z-test/1_sample_z_test_srv.R","content":"oneSampleZTestServer <- function(id) {\n  \n  moduleServer(id, function(input, output, session) {\n    \n    ns <- session$ns\n    \n    \n    ############################ Modal Intro ############################# \n    \n    # Text\n    observeEvent(input$learning_text, {\n      showModal(modalDialog(\n        title = \"The '1-Sample z-test'\",\n        \n        withMathJax(HTML(\"<p>\n              Suppose that in a made-up country, there is a statistics exam that all high school students take. If a student received a mark in the exam of 140 or over,\n              it means that they are demonstrating a satisfactory level of statistical knowledge as deemed by the education board. Based on data from multiple years, it’s\n              known that the population standard deviation in test scores is 7.5.<br><br>\n\n              Mr. Han is a statistics teacher who has been testing some new innovative teaching methods. In particular, he wants to test whether the average exam grade for\n              the 25 students in his class is statistically greater than a mark of 140.<br><br>\n\n              To do this, Mr. Han sets up a hypothesis test. He lets the symbol \\\\(\\\\mu \\\\) represent the average of his class. He sets up the null hypothesis that his class’s\n              average grade is 140. Mathematically, this is written as:<br>\n\n              <center><p style='font-size: 16px'>\\\\( H_{0} : \\\\mu = 140 \\\\)<\/p><\/center><br>\n\n              When setting up the alternate hypothesis, because Mr. Han is interested in seeing if his innovative teaching approach leads to marks greater than 140, we set up a\n              one-sided alternate hypothesis, written mathematically as:\n\n              <center><p style='font-size: 16px'>\\\\( H_{1} : \\\\mu > 140 \\\\)<\/p><\/center><br>\n\n              Mr. Han’s main idea is that we will use our sample of 25 students to determine whether there is evidence to support or reject the null hypothesis.\n          <\/p>\")),\n        fluidRow(\n          column(8,\n                 withMathJax(HTML(\"<p>\n                   <h5><u>How does Mr. Han go about doing this?<\/u><\/h5><br>\n\n                    We can use the box model to model the hypothesis test. However, there is a caveat: We do not know all the specific tickets to place in the box. Instead, we\n                    will specify the mean and standard deviation to summarise the tickets in the box. From the null hypothesis, we are claiming that the mean of the box is 140.\n                    We also know that the population standard deviation (denoted by \\\\(\\\\mu \\\\)) is equal to 7.5. Hence, we place these values into the box.<br><br>\n\n                    Next, we want to turn our attention to the test scores that Mr. Han’s students achieved in the class. Let’s say that the 25 students had an average score of\n                    142.843 As there were 25 students, we specify: \\\\(n = 25 \\\\). The average score of 155 142.843 referred to as the observed value (OV). With these details drawn, \n                    we have completed the box model representation.<br><br>\n                   <\/p>\"))\n          ),\n          column(4,\n                 HTML(\"<br>\"),\n                 grVizOutput(ns(\"intro_example_box_model\"), width = \"80%\", height = \"70%\"),\n          )\n        ),\n        HTML(\"<p><br>\n                With the box made, Mr. Han can now calculate the test statistic. The calculation is as follows:<br>\n                <\/p>\"),\n        withMathJax(\n          HTML(paste(\"$$\\\\begin{align*} \\\\text{Test-Statistic (TS)} &= \\\\frac{\\\\text{OV} - \\\\text{EV}}{\\\\text{SE}}\n                              \\\\\\\\ &= \\\\frac{\\\\text{OV} - \\\\text{EV}}{\\\\frac{\\\\sigma}{\\\\sqrt{n}}}\n                              \\\\\\\\ &= \\\\frac{142.843 - 140}{\\\\frac{7.5}{\\\\sqrt{25}}}\n                              \\\\\\\\ &= 1.895 \\\\text{ (3 decimal places)} \\\\end{align*}$$\", sep = \"\"))\n        ),\n        HTML(\"<p>\n            With the test statistic found, Mr. Han is ready to find the p-value. Play around with the remainder of this exercise to help Mr. Han find the p-value, and test whether\n            null hypothesis is supported or rejected.\n             <\/p>\"),\n        easyClose = TRUE,\n        footer = modalButton(\"Close\"),\n      ))\n    })\n    \n    # Example box model\n    output$intro_example_box_model <- renderGrViz({\n      string = \"digraph diagram {\n          graph [layout = dot, rankdir = TB]\n\n          node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12, width = 2.5]\n          box [label = '&mu; = 140; &sigma; = 7.5']\n\n          node [shape = oval,width = 1.5,fillcolor = \\\"#f9ffbd\\\", fontsize = 12]\n          sample [label = 'OV = 142.843']\n\n          edge [minlen = 2]\n            box->sample [label = '  n = 25', fontsize = 12, labeldistance = 5]\n          }\"\n      return(grViz(string))\n    })\n    \n    ############################ Uploading Data Mechanism ############################# \n    \n    sample_data_session <- load_1_sample_data_Server(id = \"loading_data\")\n\n    # Store the sample data.\n    sample_data <- reactiveVal(NULL)\n\n    # Variable that is true when the data has been specified, meaning the rest of the exercise can commence\n    # This variable can be accessed by the ui conditional panel.\n    output$render_rest_of_exercise <- reactive({\n      !is.null(sample_data_session$data())\n      sample_data(sample_data_session$data())\n    })\n    outputOptions(output, \"render_rest_of_exercise\", suspendWhenHidden = FALSE)\n    \n    ################################################################\n    \n    # Numeric text field to enter the population sd.\n    output$pop_sd_numeric_input <- renderUI({\n      sample_sd = sd(sample_data() ,na.rm = TRUE)\n      numericInput(\n        ns(\"population_standard_deviation_numeric\"),\n        NULL,\n        value = sample_sd,\n        min = 0\n      )\n    })\n\n    # Button logic to set the pop sd to the sample sd.\n    observeEvent(input$set_pop_sd_to_sample, {\n      req(input$population_standard_deviation_numeric)\n      sample_sd = sd(sample_data() ,na.rm = TRUE)\n      updateNumericInput(\n        session,\n        inputId = ns(\"population_standard_deviation_numeric\"),\n        value = sample_sd\n      )\n    })\n\n    # Override the sd value to be equal to the sample sd if it is less than or equal to 0.\n    observeEvent(input$population_standard_deviation_numeric, {\n      if (is.na(input$population_standard_deviation_numeric) || input$population_standard_deviation_numeric <= 0) {\n        sample_sd = sd(sample_data() ,na.rm = TRUE)\n        updateNumericInput(\n          session,\n          inputId = ns(\"population_standard_deviation_numeric\"),\n          value = sample_sd\n        )\n      }\n    })\n\n    # Box model plot\n    output$box_model <- renderGrViz({\n      \n      if (is.null(input$null_mu) || is.null(input$population_standard_deviation_numeric)) {\n        return()\n      }\n\n      # String with mu and sigma.\n      pop_details = paste(\"&mu; = \", as.character(round(input$null_mu, digits = 3)), \"; &sigma; = \", as.character(round(input$population_standard_deviation_numeric, digits = 3)))\n\n      # Set up graph and box\n      diagram = \"digraph diagram { graph [layout = dot, rankdir = TB] node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12, width = 2.5] box [label = '\"\n      diagram = paste(diagram, pop_details, \"']\", sep = \"\")\n\n      # Set up sample circle.\n      diagram = paste(diagram, \" node [shape = oval,width = 1.5,fillcolor = \\\"#f9ffbd\\\", fontsize = 12] sample [label = '\", \"OV = \",\n                      as.character(round(mean(sample_data(), na.rm = TRUE), digits = 3)), \"']\", sep = \"\")\n\n      # Create edge between box and circle.\n      # Annotate edge with n value.\n      n = length(sample_data())\n      diagram = paste(diagram, \" edge [minlen = 2] box->sample [label = '  n = \", n, \"', fontsize = 12, labeldistance = 5]}\", sep = \"\")\n\n      return (grViz(diagram))\n    })\n    \n    # Null hypothesis (rendered) output.\n    output$null_hypothesis_output <- renderUI({\n      hypothesis = paste(\"<p style='font-size: 16px;'>\\\\( H_0: \\\\) \\\\( \\\\mu\", \"=\", as.character(round(input$null_mu, digits = 3)), \"\\\\)<\/p>\")\n      return (\n        tagList(\n          HTML(\"<center>\"),\n          withMathJax(HTML(hypothesis)),\n          HTML(\"<\/center>\")\n        )\n      )\n    })\n\n    # Alternate hypothesis (rendered) output.\n    output$alternate_hypothesis_output <- renderUI({\n\n      null_mean_string = as.character(round(input$null_mu, digits = 3))\n\n      # Specify alternate hypothesis in reference to whether the user chooses to do a one-sided or two-sided test.\n      hypothesis = paste(\"<p style='font-size: 16px;'>\\\\( H_1: \\\\) \\\\(\\\\mu\", \"\\\\neq\", null_mean_string, \"\\\\)<\/p>\")\n      if (input$alternate_hypothesis_choice == 2) {\n        hypothesis = paste(\"<p style='font-size: 16px;'>\\\\( H_1: \\\\) \\\\(\\\\mu\", \">\", null_mean_string, \"\\\\)<\/p>\")\n      } else if (input$alternate_hypothesis_choice == 3) {\n        hypothesis = paste(\"<p style='font-size: 16px;'>\\\\( H_1: \\\\) \\\\(\\\\mu\", \"<\", null_mean_string, \"\\\\)<\/p>\")\n\n      }\n      return (\n        tagList(\n          HTML(\"<center>\"),\n          withMathJax(HTML(hypothesis)),\n          HTML(\"<\/center>\")\n        )\n      )\n    })\n    \n    EV_string = reactiveVal(\"\")\n    SE_string = reactiveVal(\"\")\n\n    # Expected value and standard error output.\n    output$ev_and_se_text <- renderUI({\n\n      sample_size = length(sample_data())\n\n      # Find EV and SE.\n      mean_ = input$null_mu\n      sd_ = input$population_standard_deviation_numeric\n      EV = mean_\n      SE = sd_ / sqrt(sample_size)\n\n      EV_string(as.character(round(EV, 5)))\n      SE_string(as.character(round(SE, 5)))\n\n      expected_value = withMathJax(\n        HTML(\"<p>Expected Value:<\/p>\"),\n        HTML(paste(\"$$\\\\begin{align*} \\\\text{EV} &= \\\\mu \\\\\\\\ &=\", EV_string(), \"\\\\end{align*}$$\", sep = \"\"))\n      )\n\n      standard_error = withMathJax(\n        HTML(\"<p>Standard Error:<\/p>\"),\n        HTML(paste(\"$$\\\\begin{align*} \\\\text{SE} &= \\\\frac{\\\\sigma}{\\\\sqrt{n}} \\\\\\\\ &= \\\\frac{\", round(sd_, 5) , \"}{\\\\sqrt{\",\n                   as.character(sample_size), \"}}\\\\\\\\ &= \", SE_string(), \"\\\\end{align*}$$\", sep = \"\"))\n      )\n\n      return(\n        tagList(\n          expected_value, standard_error\n        )\n      )\n    })\n\n    test_stat = reactiveVal(\"\")\n\n    # Test statistic output.\n    output$test_statistic_calculation <- renderUI({\n\n      observed_val = mean(sample_data(), na.rm = TRUE)\n\n      # Calculate test statistic.\n      temp = (observed_val - as.numeric(EV_string()))/as.numeric(SE_string())\n      temp = as.character(round(temp, 4))\n      test_stat(temp)\n\n      t_stat = withMathJax(\n        HTML(paste(\"$$\\\\begin{align*} \\\\text{TS} &= \\\\frac{\\\\text{OV} - \\\\text{EV}}{\\\\text{SE}} \\\\\\\\ &= \\\\frac{\", as.character(round(observed_val,5)), \" - \",\n                   EV_string(), \"}{\", SE_string(), \"} \\\\\\\\ &= \", test_stat(), \"\\\\end{align*}$$\", sep = \"\"))\n      )\n      additional_line = HTML(paste(\"<p style = 'text-align: left;'><span style='color: blue;'><i>The value for the test-statistic is \", test_stat(), \". <\/i><\/span><\/p>\", sep = \"\"))\n      return(\n        tagList(\n          t_stat,\n          additional_line\n        )\n      )\n    })\n\n    p_val = reactiveVal(0)\n\n    # P-value text output and calculation.\n    output$p_value_prelude <- renderUI({\n\n      # General prelude text about what the p-value is.\n      first_string = HTML(paste(\"<p>The p-value is the probability of observing a test-statistic <b>more extreme that our test statistic of \", test_stat(), \".<\/b><\/p>\", sep = \"\"))\n\n      # Specifically how to find the p-value (based upon alternate hypothesis).\n      second_string = \"<p>The test statistics fall on a standard normal curve. \"\n      if (input$alternate_hypothesis_choice == 1) {\n        negative_test_stat = as.character(-abs(as.numeric(test_stat())))\n        positive_test_stat = as.character(abs(as.numeric(test_stat())))\n        second_string = paste(second_string, \"As we are doing a two-sided alternate hypothesis, we are interested in finding the <b>area below \", negative_test_stat,\n                              \" and above \", positive_test_stat, \".<\/p><\/b>\", sep = \"\")\n      } else if (input$alternate_hypothesis_choice == 2){\n        second_string = paste(second_string, \"As we are doing a one-sided greater than alternate hypothesis, we are interested in finding the <b>area above \", test_stat(),\n                              \".<\/p><\/b>\", sep = \"\")\n      } else if (input$alternate_hypothesis_choice == 3){\n        second_string = paste(second_string, \"As we are doing a one-sided less than alternate hypothesis, we are interested in finding the <b>area below \", test_stat(),\n                              \".<\/p><\/b>\", sep = \"\")\n      }\n      second_string = HTML(second_string)\n\n      # Calculate p-value.\n      p_val_local = 0\n      if (input$alternate_hypothesis_choice == 1) {\n        p_val_local = 2 * (1 - pnorm(abs(as.numeric(test_stat()))))\n      } else if (input$alternate_hypothesis_choice == 2) {\n        p_val_local = 1 - pnorm(as.numeric(test_stat()))\n      } else if (input$alternate_hypothesis_choice == 3) {\n        p_val_local = pnorm(as.numeric(test_stat()))\n      }\n      p_val(p_val_local)\n\n      # String to output the p-value.\n      p_value = withMathJax(HTML(\"<p style='font-size: 16px; text-align: center;'>\\\\( p =\", as.character(round(p_val_local,5)) ,\"\\\\)<\/p>\"))\n\n      return(\n        tagList(\n          first_string,\n          second_string,\n          p_value\n        )\n      )\n\n    })\n\n    # Histogram with normal curve to shown normal curve approximation.\n    output$test_stat_normal_plot = renderPlot({\n      return(curve_shaded_test_stat(dnorm, list(mean = 0, sd = 1), as.numeric(test_stat()), input$alternate_hypothesis_choice))\n    })\n    \n    # Process significance level text input.\n    alpha = reactiveVal(0.05)\n    alpha_warning = reactiveVal(FALSE)\n    observeEvent(input$alpha_value, {\n      if (is.na(input$alpha_value) || input$alpha_value < 0 || input$alpha_value > 1) {\n        alpha(0.05)\n        alpha_warning(TRUE)\n      } else {\n        alpha(input$alpha_value)\n        alpha_warning(FALSE)\n      }\n    })\n    \n    # Error message for when the value for alpha is invalid.\n    output$significance_level_warning <- renderUI({\n      if (alpha_warning()) {\n        return(\n          HTML(\"<span style='color: red;'><p>Error: The value for α must be between 0 and 1.<\/p><\/span>\")\n        )\n      }\n    })\n    \n    # Hypothesis test output\n    output$conclusion_output <- renderUI({\n      \n      # Change > or < sign depending on whether the p-value is less than or greater than alpha.\n      math_line = withMathJax(\n        HTML(paste(\"$$\\\\begin{align*} \\\\alpha &> p \\\\\\\\\", as.character(alpha()), \" &> \", as.character(round(p_val(), 4)), \"\\\\end{align*}$$\", sep = \"\"))\n      )\n      conclusion_line = HTML(\"<span style='color: blue;'><p>As the p value is less than our significance level, we <b>reject the null hypothesis<\/b>.<\/p><\/span>\")\n      if (p_val() > alpha()) {\n        math_line = withMathJax(\n          HTML(paste(\"$$\\\\begin{align*} \\\\alpha &< p \\\\\\\\\", as.character(alpha()), \" &< \", as.character(round(p_val(), 4)), \"\\\\end{align*}$$\", sep = \"\"))\n        )\n        conclusion_line = HTML(\"<span style='color: blue;'><p>As the p value is greater than our significance level, we <b>accept the null hypothesis<\/b>.<\/p><\/span>\")\n      }\n      \n      return(\n        tagList(\n          math_line,\n          conclusion_line\n        )\n      )\n    })\n  \n    \n\n  })\n    \n}","type":"text"},{"name":"z-test/1_sample_z_test_ui.R","content":"oneSampleZTestUI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    \n    # Title Strip\n    fluidRow(\n      column(8,\n             HTML(\"<h1>1-Sample z-test<\/h1><br>\"),\n      ),\n      column(4,\n             HTML(\"<br>\"),\n             tags$style(HTML(paste0(\"\n              [id='\", ns(\"learning_text\"), \"'] {\n                font-size: 20px;\n                padding: 10px 20px;\n              }\n              \"))),\n             actionButton(ns(\"learning_text\"), \"What is a 1-sample z-test?\", class = \"btn btn-primary\", style=\"color: #fff;\", width = \"100%\")\n      ),\n    ),\n    HTML(\"<br>\"),\n    \n    ############ SECTION: Input Data ############\n    load_1_sample_data_UI(ns(\"loading_data\"), test_name = \"1-sample z-test\"),\n\n    HTML(\"<br><br><br>\"),\n\n    # Conditional panel ensures that the rest of the exercise is displayed only if the data has been uploaded.\n    conditionalPanel(\n      condition = sprintf('output[\"%s\"]', ns(\"render_rest_of_exercise\")),\n\n          ############ SECTION: The NULL Hypothesis - Setting up the Box ############\n          fluidRow(\n            column(7,\n                   box(\n                     title = HTML(\"<u><b>The 'NULL' Hypothesis - Setting up the Box<\/b><\/u>\"),\n                     status = \"primary\",\n                     width = \"100%\",\n                     solidHeader = FALSE,\n\n                     p(\"We start by using the box model to represent our null hypothesis.\"),\n\n                     # Step 1: Specify Population Standard Deviation\n                     box(\n                       title = \"Step 1) Specify Population Standard Deviation (σ)\",\n                       width = \"100%\",\n                       collapsible = TRUE,\n                       collapsed = FALSE,\n                       status = \"info\",\n                       solidHeader = FALSE,\n                       withMathJax(HTML(\"<p>\n                            An assumption for the 1-sample z-test is that the standard deviation of the population (denoted \\\\(\\\\sigma\\\\)) in which our sample is drawn is\n                            known. For example, a prior research paper may have estimated the population standard deviation, and you could use the value they discovered.<br><br>\n\n                            For this exercise, you can manually set the population standard deviation. However, for the most part, it is likely that the population standard\n                            deviation is unknown. Hence, for the purposes of this exercise, you can set the population standard deviation to be equal to the sample standard\n                            deviation (this has been automatically done below, but you are free to change the value). In practice, this is far from ideal, and in a future\n                            exercise, we will use the 1-sample t-test when the population standard deviation is unknown.<\/p>\")),\n                       HTML(\"<br>\"),\n                       fluidRow(\n                         column(7,\n                                actionButton(\n                                  inputId = ns(\"set_pop_sd_to_sample\"),\n                                  label = \"Set Population SD to be Sample SD\",\n                                  class = \"btn-primary\",\n                                  style = \"color: #fff;\",\n                                  width = \"100%\"\n                                )\n                         ),\n                         column(2,\n                                withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>\\\\(\\\\sigma = \\\\)<\/p>\"))\n                         ),\n                         column(3,\n                                uiOutput(ns(\"pop_sd_numeric_input\"))\n                         ),\n                       ),\n                     ),\n\n                     # Step 2: Specify NULL Hypothesis\n                     box(\n                       title = \"Step 2) Specify NULL Hypothesis\",\n                       width = \"100%\",\n                       collapsible = TRUE,\n                       collapsed = TRUE,\n                       status = \"info\",\n                       solidHeader = FALSE,\n                       HTML(\"<p>Next we need to specify the 'null' hypothesis. In this test we are focusing on the mean, so the null hypothesis is that the population mean\n                              is equal to some value which we set below.<\/p>\"),\n\n                       withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>Given \\\\(\\\\mu \\\\), where \\\\(\\\\mu \\\\) is the mean of some variable:<\/p>\")),\n                       fluidRow(\n                         column(7),\n                         column(2,\n                                withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>\\\\( H_0: \\\\) \\\\(\\\\mu = \\\\)<\/p>\"))\n                         ),\n                         column(3,\n                                numericInput(\n                                  ns(\"null_mu\"),\n                                  NULL,\n                                  value = 140\n                                ),\n                         ),\n                       ),\n                     ),\n\n\n                     # Other\n                     box(\n                       title = \"Other\",\n                       width = \"100%\",\n                       collapsible = TRUE,\n                       collapsed = TRUE,\n                       status = \"info\",\n                       solidHeader = FALSE,\n                       HTML(\"<p>\n                       <ul>\n                          <li>The value for <b>n<\/b> comes from the number of values in the sample chosen above.<\/li>\n                          <li>The <b>observed value (OV)<\/b> comes from the mean of the sample chosen above.<\/li>\n                       <\/ul><\/p>\")\n                     )\n                   )\n            ),\n            column(5,\n                   # Box model output.\n                   box(\n                     solidHeader = TRUE,\n                     width = \"100%\",\n                     HTML(\"<center>\"),\n                     grVizOutput(ns(\"box_model\"), width = \"70%\", height = \"70%\"),\n                     HTML(\"<\/center>\")\n                   ),\n            )\n          ),\n\n          HTML(\"<br><br><br>\"),\n      \n          ########### SECTION: The Alternate Hypothesis ############\n          fluidRow(\n            column(7,\n                   box(\n                     title = HTML(\"<u><b>The Alternate Hypothesis<\/b><\/u>\"),\n                     status = \"primary\",\n                     width = \"100%\",\n                     solidHeader = FALSE,\n                     HTML(\"<p>Specify what type of alternate hypothesis you will be using below:<\/p>\"),\n                     HTML(\"<br>\"),\n                     radioButtons(\n                       inputId = ns(\"alternate_hypothesis_choice\"),\n                       label = NULL,\n                       choices = list(\n                         \"Two Sided\" = 1,\n                         \"One Sided (greater than)\" = 2,\n                         \"One Sided (less than)\" = 3\n                       )\n                     ),\n\n                   )\n            ),\n            column(5,\n                   box(\n                     solidHeader = TRUE,\n                     width = \"100%\",\n                     HTML(\"<p><b>Null Hypothesis<\/b><\/p>\"),\n                     uiOutput(ns('null_hypothesis_output')),\n                     HTML(\"<p><b>Alternate Hypothesis<\/b><\/p>\"),\n                     uiOutput(ns('alternate_hypothesis_output')),\n                   )\n            )\n          ),\n\n          HTML(\"<br><br><br>\"),\n      \n          ############ SECTION: Assumptions ############\n          fluidRow(\n            column(12,\n                   box(\n                     title = HTML(\"<u><b>Assumptions<\/b><\/u>\"),\n                     status = \"primary\",\n                     width = \"100%\",\n                     solidHeader = FALSE,\n                     HTML(\"<p>For the hypothesis test to be valid, we need to check the following assumptions:<\/p>\"),\n\n                     # Assumption 1: Independent Samples\n                     box(\n                       title = \"Assumption 1: Independent Sample\",\n                       width = \"100%\",\n                       collapsible = TRUE,\n                       collapsed = TRUE,\n                       status = \"info\",\n                       solidHeader = FALSE,\n                       HTML(\"<p>The first assumption is that our sample is <b>independent and randomly chosen<\/b>.<\/p>\"),\n                       HTML(\"<p><span style='color: blue;'><b>How do we check?<\/b><\/span> <i>We check by investigating the experimental setup.<\/i><br><br>\n                                For example, consider we were investigating data for a proportion test involving human participants. We could read the accompanying scientific\n                                publication to understand the methodology they used to gather the people in the sample.<\/p>\")\n                     ),\n\n                     # Assumption 2: Independent Samples\n                     box(\n                       title = \"Assumption 2: Normality\",\n                       width = \"100%\",\n                       collapsible = TRUE,\n                       collapsed = TRUE,\n                       status = \"info\",\n                       solidHeader = FALSE,\n                       HTML(\"<p>The second assumption is that the sample means follow a normal distribution.\"),\n                       HTML(\"<p><span style='color: blue;'><b>How do we check?<\/b><\/span><br>\n                                <ul>\n                                  <li>Recall that the central limit theorem tells us that if we take a sufficiently large number of draws from the box, then the sample\n                                  means will approximately follow a normal distribution. If confused, please see the box model exercise.<\/li>\n                                  <li>One way to gauge whether the central limit theorem holds or not is to see how large our sample is (this is indicated by the \\\"n\\\" in\n                                  the box model above).<\/li>\n                                  <li>Many textbooks will say that you can say that you can use the rule of thumb that the central limit theorem will apply if we have 30\n                                  or more draws. BEWARE - this is not always true! If the distribution of the values is very skewed, you will need much more than 30 draws!<\/li>\n                                  <li>You should use a combination of the size of \\\"n\\\" and a histogram and boxplot of the sample distributions to help you determine whether\n                                  the central limit theorem means we can resonably approximate the sample means using a normal distribution.<\/li>\n                                <\/ul>\n                           <\/p>\")\n                     ),\n\n                     # Assumption 3: Normal Approximation\n                     box(\n                       title = \"Assumption 3: Known Population Standard Deviation\",\n                       width = \"100%\",\n                       collapsible = TRUE,\n                       collapsed = TRUE,\n                       status = \"info\",\n                       solidHeader = FALSE,\n                       HTML(\"<p>As mentioned previously in \\\"The NULL Hypothesis - Setting up the Box\\\" section, it is assumed that the population standard deviation is known.<\/p>\")\n                     )\n                  )\n            )\n          ),\n\n          HTML(\"<br><br><br>\"),\n      \n          ############ SECTION: Test Statistics ############\n          fluidRow(\n            column(12,\n                   box(\n                     title = HTML(\"<u><b>Test Statistic<\/b><\/u>\"),\n                     status = \"primary\",\n                     width = \"100%\",\n                     solidHeader = FALSE,\n\n                     fluidRow(\n                       column(6,\n                              HTML(\"<p><b>Step 1) Calculate Expected Value (SE) and Standard Error (SE)<\/b><\/p>\"),\n                              uiOutput(ns(\"ev_and_se_text\"))\n                       ),\n                       column(6,\n                              HTML(\"<p><b>Step 2) Test Statistic Calculation<\/b><\/p>\"),\n                              uiOutput(ns(\"test_statistic_calculation\"))\n                       )\n                     ),\n                   ),\n            ),\n          ),\n\n          HTML(\"<br><br><br>\"),\n\n          ############ SECTION: p-value ############\n          fluidRow(\n            column(6,\n                   box(\n                     title = HTML(\"<u><b>p-value<\/b><\/u>\"),\n                     status = \"primary\",\n                     width = \"100%\",\n                     solidHeader = FALSE,\n                     uiOutput(ns(\"p_value_prelude\"))\n                   )\n            ),\n            column(6,\n                   plotOutput(ns(\"test_stat_normal_plot\"), width = \"80%\", heigh = \"275px\"),\n            )\n          ),\n\n          HTML(\"<br><br><br><br><br><br><br>\"),\n      \n          ############ SECTION:Conclusion ############\n          fluidRow(\n            column(12,\n                   box(\n                     title = HTML(\"<u><b>Conclusion<\/b><\/u>\"),\n                     status = \"primary\",\n                     width = \"100%\",\n                     solidHeader = FALSE,\n                     \n                     fluidRow(\n                       \n                       # Section to enter significance level.\n                       column(6,\n                              HTML(\"<p><b>Step 1) What is your significance level<\/b>?<\/p>\"),\n                              \n                              # Space to enter significance value.\n                              fluidRow(\n                                column(1,\n                                       withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>\\\\( \\\\alpha = \\\\)<\/p>\"))\n                                ),\n                                column(3,\n                                       numericInput(\n                                         ns(\"alpha_value\"),\n                                         NULL,\n                                         value = 0.05,\n                                         min = 0,\n                                         max = 1,\n                                         width = \"100%\"\n                                       ),\n                                ),\n                              ),\n                              uiOutput(ns(\"significance_level_warning\")),\n                       ),\n                       \n                       # Section to provide final result.\n                       column(6,\n                              HTML(\"<p><b>Step 2) Final Conclusion<\/b><\/p>\"),\n                              uiOutput(ns(\"conclusion_output\")),\n                       )\n                     )\n                   )\n            ),\n          )\n      \n      \n    )\n    \n  )\n}","type":"text"},{"name":"z-test/proportion_test_srv.R","content":"proportionTestMainServer <- function(id) {\n  \n  moduleServer(id, function(input, output, session) {\n    \n    ns <- session$ns\n    \n    # Process the null hypothesis proportion input.\n    null_prop = reactiveVal(0.7)\n    null_proportion_warning = reactiveVal(FALSE)\n    observeEvent(input$null_porportion, {\n      if (is.na(input$null_porportion) || input$null_porportion < 0 || input$null_porportion > 1) {\n        null_prop(0.7)\n        null_proportion_warning(TRUE)\n      } else {\n        null_prop(input$null_porportion)\n        null_proportion_warning(FALSE)\n      }\n    })\n    \n    # Error message for when the value for n is invalid.\n    output$null_prop_warning <- renderUI({\n      if (null_proportion_warning()) {\n        return(\n          HTML(\"<span style='color: red;'><p>Error: The value must be between 0 and 1.<\/p><\/span>\")\n        )\n      }\n    })\n    \n    # Process the number of draws text input.\n    sample_size = reactiveVal(5)\n    number_of_draws_warning = reactiveVal(FALSE)\n    observeEvent(input$number_of_draws, {\n      if (is.na(input$number_of_draws) || input$number_of_draws < 0) {\n        sample_size(25)\n        number_of_draws_warning(TRUE)\n      } else {\n        sample_size(ceiling(input$number_of_draws))\n        number_of_draws_warning(FALSE)\n      }\n    })\n    \n    # Error message for when the value for n is invalid.\n    output$n_warning_message <- renderUI({\n      if (number_of_draws_warning()) {\n        return(\n          HTML(\"<span style='color: red;'><p>Error: The value for n must be a whole number greater than 0.<\/p><\/span>\")\n        )\n      }\n    })\n    \n    # Alternate hypothesis (rendered) output.\n    output$alternate_hypothesis_output <- renderUI({\n      \n      # Specify alternate hypothesis in reference to whether the user chooses to do a one-sided or two-sided test.\n      hypothesis = paste(\"<p style='font-size: 16px;'>\\\\( H_1: \\\\) \\\\( p\", \"\\\\neq\", as.character(null_prop()), \"\\\\)<\/p>\")\n      if (input$alternate_hypothesis_choice == 2) {\n        hypothesis = paste(\"<p style='font-size: 16px;'>\\\\( H_1: \\\\) \\\\( p\", \">\", as.character(null_prop()), \"\\\\)<\/p>\")\n      } else if (input$alternate_hypothesis_choice == 3) {\n        hypothesis = paste(\"<p style='font-size: 16px;'>\\\\( H_1: \\\\) \\\\( p\", \"<\", as.character(null_prop()), \"\\\\)<\/p>\")\n        \n      }\n      return (\n        tagList(\n          HTML(\"<center>\"),\n          withMathJax(HTML(hypothesis)),\n          HTML(\"<\/center>\")\n        )\n      )\n    })\n    \n    # Null hypothesis (rendered) output.\n    output$null_hypothesis_output <- renderUI({\n      hypothesis = paste(\"<p style='font-size: 16px;'>\\\\( H_0: \\\\) \\\\( p\", \"=\", as.character(null_prop()), \"\\\\)<\/p>\")\n      return (\n        tagList(\n          HTML(\"<center>\"),\n          withMathJax(HTML(hypothesis)),\n          HTML(\"<\/center>\")\n        )\n      )\n    })\n    \n    # Text output for assumption 2 (normal distribution).\n    output$assumption2_text_output <- renderUI({\n      \n      # Get whether we are are modelling the sample using the sum or mean.\n      sample = \"sum\"\n      if (input$box_sum_or_mean == 2) {\n        sample = \"mean\"\n      }\n      \n      string_1 = paste(\"<p>The third assumption is that the sample \", sample, \"s follow an approximate normal distribution.<\/p>\", sep = \"\")\n      string_2 = paste(\"<p><span style='color: blue;'><b>How do we check?<\/b><\/span><br>\n                     <ul>\n                        <li>Recall that the central limit theorem tells us that if we take a sufficiently large number of draws from the box,\n                             then the sample \", sample, \"s will approximately follow a normal distribution. <i>If confused, please see the box model exercise<\/i><\/li>\n                        <li>One way we can easily tell if the central limit theorem applies is to sample taking many draws from the box, and seeing whether the\n                            values appear normally distributed<\/li>\n                        <li>The plot to the left shows the distribution of 10000 simulated samples.<\/li>\n                      <ul>\n                      <\/p>\")\n      return(\n        tagList(\n          HTML(string_1),\n          HTML(string_2)\n        )\n      )\n    })\n    \n    # Text asking user what their observed value is.\n    output$observed_value_output <- renderUI({\n      sample = \"sum\"\n      if (input$box_sum_or_mean == 2) {\n        sample = \"mean\"\n      }\n      string = paste(\"<p><i>What is the observed \", sample, \" that you saw from your sample?<\/i><\/p>\")\n      return(\n        tagList(\n          HTML(string)\n        )\n      )\n      \n    })\n    \n    # Process the number of draws text input.\n    observed_val = reactiveVal(0.73)\n    observed_val_warning = reactiveVal(FALSE)\n    observeEvent(input$observed_value, {\n      if (is.na(input$observed_value) || input$observed_value < 0 || input$observed_value > 1) {\n        observed_val(0.73)\n        observed_val_warning(TRUE)\n      } else {\n        observed_val(input$observed_value)\n        observed_val_warning(FALSE)\n      }\n    })\n    \n    # Error message for when the value for n is invalid.\n    output$observed_val_warning_message <- renderUI({\n      if (observed_val_warning()) {\n        return(\n          HTML(\"<span style='color: red;'><p>Error: The observed value must be between 0 and 1.<\/p><\/span>\")\n        )\n      }\n    })\n    \n    EV_string = reactiveVal(\"\")\n    SE_string = reactiveVal(\"\")\n    \n    # Expected value and standard error output.\n    output$ev_and_se_text <- renderUI({\n      \n      # Find EV and SE.\n      mean_ = null_prop()\n      sd_ = sqrt(null_prop() * (1-null_prop()))\n      EV = sample_size() * mean_\n      SE = sqrt(sample_size()) *sd_\n      if (input$box_sum_or_mean == 2) { \n        EV = mean_\n        SE = sd_/sqrt(sample_size())\n      }\n      \n      # EV and SE text (changes based upon whether the sample sum or mean is being used).\n      expected_value = \"\"\n      standard_error = \"\"\n      \n      EV_string(as.character(round(EV, 5)))\n      SE_string(as.character(round(SE, 5)))\n      \n      # Mean\n      if (input$box_sum_or_mean == 2) { \n        expected_value = withMathJax(\n          HTML(\"<p>Expected Value:<\/p>\"),\n          HTML(paste(\"$$\\\\begin{align*} \\\\text{EV} &= \\\\mu \\\\\\\\ &=\", EV_string(), \"\\\\end{align*}$$\", sep = \"\"))\n        )\n        \n        standard_error = withMathJax(\n          HTML(\"<p>Standard Error:<\/p>\"),\n          HTML(paste(\"$$\\\\begin{align*} \\\\text{SE} &= \\\\frac{\\\\sigma}{\\\\sqrt{n}} \\\\\\\\ &= \\\\frac{\", round(sd_, 5) , \"}{\\\\sqrt{\", \n                     as.character(sample_size()), \"}}\\\\\\\\ &= \", SE_string(), \"\\\\end{align*}$$\", sep = \"\"))\n        )\n        \n      # Sum\n      } else {\n        expected_value = withMathJax(\n          HTML(\"<p>Expected Value:<\/p>\"),\n          HTML(paste(\"$$\\\\begin{align*} \\\\text{EV} &= n \\\\times \\\\mu \\\\\\\\ &=\", as.character(sample_size()), \"\\\\times\", round(mean_, 5),\n                     \"\\\\\\\\ &= \", EV_string(), \"\\\\end{align*}$$\", sep = \"\"))\n        )\n        \n        standard_error = withMathJax(\n          HTML(\"<p>Standard Error:<\/p>\"),\n          HTML(paste(\"$$\\\\begin{align*} \\\\text{SE} &= \\\\sqrt{n} \\\\times \\\\sigma \\\\\\\\ &= \\\\sqrt{\", as.character(sample_size()), \"} \\\\times\", \n                     round(sd_, 5), \"\\\\\\\\ &= \", SE_string(), \"\\\\end{align*}$$\", sep = \"\"))\n        )\n      }\n      \n      return(\n        tagList(\n          expected_value, standard_error\n        )\n      )\n    })\n    \n    test_stat = reactiveVal(\"\")\n    \n    # Test statistic output.\n    output$test_statistic_calculation <- renderUI({\n      temp = (observed_val() - as.numeric(EV_string()))/as.numeric(SE_string())\n      temp = as.character(round(temp, 4))\n      test_stat(temp)\n      t_stat = withMathJax(\n        HTML(paste(\"$$\\\\begin{align*} \\\\text{TS} &= \\\\frac{\\\\text{OV} - \\\\text{EV}}{\\\\text{SE}} \\\\\\\\ &= \\\\frac{\", as.character(round(observed_val(),5)), \" - \", \n                   EV_string(), \"}{\", SE_string(), \"} \\\\\\\\ &= \", test_stat(), \"\\\\end{align*}$$\", sep = \"\"))\n      )\n      additional_line = HTML(paste(\"<p style = 'text-align: left;'><span style='color: blue;'><i>The value for the test-statistic is \", test_stat(), \". <\/i><\/span><\/p>\", sep = \"\"))\n      return(\n        tagList(\n          t_stat,\n          additional_line\n        )\n      )\n    })\n    \n    p_val = reactiveVal(0)\n    \n    # P-value text output and calculation.\n    output$p_value_prelude <- renderUI({\n      \n      # General prelude text about what the p-value is.\n      first_string = HTML(paste(\"<p>The p-value is the probability of observing a test-statistic <b>more extreme that our test statistic of \", test_stat(), \".<\/b><\/p>\", sep = \"\"))\n      \n      # Specifically how to find the p-value (based upon alternate hypothesis).\n      second_string = \"<p>The test statistics fall on a standard normal curve. \"\n      if (input$alternate_hypothesis_choice == 1) {\n        negative_test_stat = as.character(-abs(as.numeric(test_stat())))\n        positive_test_stat = as.character(abs(as.numeric(test_stat())))\n        second_string = paste(second_string, \"As we are doing a two-sided alternate hypothesis, we are interested in finding the <b>area below \", negative_test_stat, \n                              \" and above \", positive_test_stat, \".<\/p><\/b>\", sep = \"\")\n      } else if (input$alternate_hypothesis_choice == 2){\n        second_string = paste(second_string, \"As we are doing a one-sided greater than alternate hypothesis, we are interested in finding the <b>area above \", test_stat(), \n                              \".<\/p><\/b>\", sep = \"\")\n      } else if (input$alternate_hypothesis_choice == 3){\n        second_string = paste(second_string, \"As we are doing a one-sided less than alternate hypothesis, we are interested in finding the <b>area below \", test_stat(), \n                              \".<\/p><\/b>\", sep = \"\")\n      }\n      second_string = HTML(second_string)\n      \n      # Calculate p-value.\n      p_val_local = 0\n      if (input$alternate_hypothesis_choice == 1) {\n        p_val_local = 2 * (1 - pnorm(abs(as.numeric(test_stat()))))\n      } else if (input$alternate_hypothesis_choice == 2) {\n        p_val_local = 1 - pnorm(as.numeric(test_stat()))\n      } else if (input$alternate_hypothesis_choice == 3) {\n        p_val_local = pnorm(as.numeric(test_stat()))\n      }\n      p_val(p_val_local)\n      \n      # String to output the p-value.\n      p_value = withMathJax(HTML(\"<p style='font-size: 16px; text-align: center;'>\\\\( p =\", as.character(round(p_val_local,5)) ,\"\\\\)<\/p>\"))\n      \n      return(\n        tagList(\n          first_string,\n          second_string,\n          p_value\n        )\n      )\n      \n    })\n    \n    # Process significance level text input.\n    alpha = reactiveVal(0.05)\n    alpha_warning = reactiveVal(FALSE)\n    observeEvent(input$alpha_value, {\n      if (is.na(input$alpha_value) || input$alpha_value < 0 || input$alpha_value > 1) {\n        alpha(0.05)\n        alpha_warning(TRUE)\n      } else {\n        alpha(input$alpha_value)\n        alpha_warning(FALSE)\n      }\n    })\n    \n    # Error message for when the value for alpha is invalid.\n    output$significance_level_warning <- renderUI({\n      if (alpha_warning()) {\n        return(\n          HTML(\"<span style='color: red;'><p>Error: The value for α must be between 0 and 1.<\/p><\/span>\")\n        )\n      }\n    })\n    \n    # Hypothesis test output\n    output$conclusion_output <- renderUI({\n      \n      # Change > or < sign depending on whether the p-value is less than or greater than alpha.\n      math_line = withMathJax(\n        HTML(paste(\"$$\\\\begin{align*} \\\\alpha &> p \\\\\\\\\", as.character(alpha()), \" &> \", as.character(round(p_val(), 4)), \"\\\\end{align*}$$\", sep = \"\"))\n      )\n      conclusion_line = HTML(\"<span style='color: blue;'><p>As the p value is less than our significance level, we <b>reject the null hypothesis<\/b>.<\/p><\/span>\")\n      if (p_val() > alpha()) {\n        math_line = withMathJax(\n          HTML(paste(\"$$\\\\begin{align*} \\\\alpha &< p \\\\\\\\\", as.character(alpha()), \" &< \", as.character(round(p_val(), 4)), \"\\\\end{align*}$$\", sep = \"\"))\n        )\n        conclusion_line = HTML(\"<span style='color: blue;'><p>As the p value is greater than our significance level, we <b>accept the null hypothesis<\/b>.<\/p><\/span>\")\n      }\n      \n      return(\n        tagList(\n          math_line,\n          conclusion_line\n        )\n      )\n    })\n    \n    ############################ Modal Intro ############################# \n    \n    # Text\n    observeEvent(input$learning_text, {\n      showModal(modalDialog(\n        title = \"The 'Proportion Test'\",\n        \n        HTML(\"<p>\n            When you walk into a room, you can be assured that lots of epople will be Taylor Swift fans (you could say that people are cray-cray for Tay-Tay).<br><br>\n            \n            Let's say that we <b>'hypothesise' that 70% of people are Taylor Swift fans<\/b>. Now, to test our hypothesis, we go to our data science class of <b>30 students<\/b>\n            and ask <b>how many students are Taylor Swift fans<\/b>. The main goal here is to see if our <b>sample<\/b> is consistent with our 70% hypothesis.<br><br>\n            \n            In this regard, we set up a <b>null hypothesis<\/b> that the <b>proportion of Taylor Swift fans is 0.7<\/b> (70%). We mathematically write this as:<br>\n        <\/p>\"),\n        withMathJax(HTML(\"<center><p style='font-size: 16px'>\\\\( H_{0} : p = 0.7 \\\\)<\/p><\/center>\")),\n        HTML(\"<p><br>\n           We set up our alternate hypothesis to be that the proportion of Taylor Swift fans is <b>NOT 0.7<\/b>. We mathematically write this as:\n        <\/p>\"),\n        withMathJax(HTML(\"<center><p style='font-size: 16px'>\\\\( H_{1} : p \\\\neq 0.7 \\\\)<\/p><\/center>\")),\n        HTML(\"<p><br>\n           The main idea is that from our sample of 30 students, we want to see if there is <b>evidence to support or reject<\/b> the null hypothesis.\n        <\/p>\"),\n        fluidRow(\n          column(8,\n                 HTML(\"<p>\n                 <h5><u>How do we go about doing this?<\/u><\/h5><br>\n              \n                  We set up our box assuming that the <b>null hypothesis is true<\/b>. We add ticketgs valued <b>\\\"1\\\" to represent our target<\/b> (in this example, that someone \n                  likes Taylor Swift), and <b>\\\"0\\\" to represent the complement<\/b>. The tickets are arranged such that the proportion of \\\"1\\\" tickets is the same as the null \n                  hypothesis. As seen in the box model to the right, there are seven \\\"1\\\" tickets and three \\\"0\\\" tickets, meaning the proportion of \\\"1\\\"'s is correctly 70%.<br><br>\n                  \n                  After setting up our box model, we want to see if what we observe from the class is consistent with the null hypothesis. We call what we observe the <b>observed\n                  value (OV)<\/b>.<br><br>\n                  \n                  Let's say that in the class, 22 people like Taylor Swift, and 8 do not. We can represent the observed value derived from this observation using the <b>mean<\/b>\n                  or <b>sum<\/b>.<br><br>\n                  \n                  <u>Mean:<\/u>\n                  \n                 <\/p>\"),\n                 withMathJax(\n                   HTML(paste(\"$$\\\\begin{align*} \\\\text{OV} &= \\\\frac{1 \\\\times \\\\text{Number of TS Fans} + 0 \\\\times \\\\text{Number of Non-TS Fans}}{\\\\text{Data Science Class Size}} \n                            \\\\\\\\ &= \\\\frac{1 \\\\times 22 + 0 \\\\times 8}{30} \\\\\\\\ &= \\\\frac{22}{30} \\\\\\\\ &= 0.73 \\\\text{ (2 decimal places)} \\\\end{align*}$$\", sep = \"\"))\n                 ),\n                 HTML(\"<p><u>Sum:<\/u><\/p>\"),\n                 withMathJax(\n                   HTML(paste(\"$$\\\\begin{align*} \\\\text{OV} &= 1 \\\\times \\\\text{Number of TS Fans} + 0 \\\\times \\\\text{Number of Non-TS Fans} \n                            \\\\\\\\ &= 1 \\\\times 22 + 0 \\\\times 8 \\\\\\\\ &= 22 \\\\end{align*}$$\", sep = \"\"))\n                 ),\n          ),\n          column(4,\n                 HTML(\"<br>\"),\n                 grVizOutput(ns(\"intro_example_box_model\"), width = \"80%\", height = \"70%\"),\n          )\n        ),\n        HTML(\"<p><br>\n              Now that we've introduced how to set up the box for this test, as well as what the observed value is, it's your turn to use this app to test whether our\n              observed value is consistent with our null hypothesis or not. Good luck :)\n              <\/p>\"),\n        easyClose = TRUE,\n        footer = modalButton(\"Close\"),\n      ))\n    })\n    \n    # Example box model\n    output$intro_example_box_model <- renderGrViz({\n      string = \"digraph diagram {\n        graph [layout = dot, rankdir = TB]\n      \n        node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12, width = 2.5]\n        box [label = '1, 1, 1, 1, 1, 1, 1, 0, 0, 0']\n      \n        node [shape = oval,width = 1.5,fillcolor = \\\"#f9ffbd\\\", fontsize = 12]\n        sample [label = 'Data Science Class']\n      \n        edge [minlen = 2]\n          box->sample [label = '  n = 30', fontsize = 12, labeldistance = 5]\n        }\"\n      return(grViz(string))\n    })\n    \n    ################################################################\n    \n    ############################ Plots ############################# \n    \n    output$box_model <- renderGrViz({\n      \n      tickets_string = \"\"\n      \n      prop_temp = null_prop() * 100\n      \n      # Find simplified proportion of 1's and 0's so that they are equivalent to the proportion provided in the null hypothesis.\n      gcd_value = gcd(prop_temp, 100 - prop_temp)\n      proportion_of_1s = prop_temp / gcd_value\n      proportion_of_0s = (100 - prop_temp) / gcd_value\n      \n      is_float_1s = is.numeric(proportion_of_1s) && floor(proportion_of_1s) != proportion_of_1s\n      is_float_0s = is.numeric(proportion_of_0s) && floor(proportion_of_0s) != proportion_of_0s\n      \n      # Case where there are too many digits. Write using percentages.\n      if ((proportion_of_1s + proportion_of_0s) > 10) {\n        is_float_1s = FALSE\n      }\n      \n      # When the simplified proportions are floats, it is too hard to write down as integer. Write as percentages.\n      if (is_float_1s || is_float_0s) {\n        prop_temp_complement = 100 - prop_temp\n        tickets_string = paste(\"1 x \", as.character(round(proportion_of_1s, digits = 2)), \"%, 0 x \", as.character(round(proportion_of_0s, digits = 2)), \"%\", sep = \"\")\n        \n      } else {\n        \n        # Add 1's to the string\n        for (i in 1:proportion_of_1s) {\n          if (proportion_of_1s == 0) {\n            break\n          }\n          tickets_string = paste(tickets_string, \"1,\")\n        } \n        \n        # Add 0's to the string.\n        for (i in 1:proportion_of_0s) {\n          if (proportion_of_0s == 0) {\n            break\n          }\n          tickets_string = paste(tickets_string, \"0,\")\n        } \n        tickets_string <- sub(\",$\", \"\", tickets_string)\n        \n      }\n      \n      # Get other elements for the box model\n      n = sample_size()\n      sample = \"Sample Sum\"\n      if (input$box_sum_or_mean == 2) {\n        sample = \"Sample Mean\"\n      }\n      \n      # Set up graph and box\n      diagram = \"digraph diagram { graph [layout = dot, rankdir = TB] node [shape = box, style = filled, fillcolor = \\\"#bdfeff\\\", fontsize = 12, width = 2.5] box [label = '\"\n      diagram = paste(diagram, tickets_string, \"']\", sep = \"\")\n      \n      # Set up sample circle.\n      diagram = paste(diagram, \" node [shape = oval,width = 1.5,fillcolor = \\\"#f9ffbd\\\", fontsize = 12]sample [label = '\", sample, \"']\", sep = \"\")\n      \n      # Create edge between box and circle.\n      # Annotate edge with n value.\n      diagram = paste(diagram, \" edge [minlen = 2] box->sample [label = '  n = \", n, \"', fontsize = 12, labeldistance = 5]}\", sep = \"\")\n      \n      return (grViz(diagram))\n    })\n    \n    # Histogram with normal curve to shown normal curve approximation.\n    output$empirical_draws_hist = renderPlot({\n      \n      # Label titles.\n      x_axis_string = \"Sample Sum Value\"\n      title_string = \"Empirical Distribution of 10000 Sample Sums with\\nOverlaid Normal Curve\"\n      if (input$box_sum_or_mean == 2) {\n        title_string = \"Empirical Distribution of 10000 Sample Means with\\nOverlaid Normal Curve\"\n        x_axis_string = \"Sample Mean Value\"\n      }\n      \n      # Get data\n      data = 0\n      if (input$box_sum_or_mean == 1) {\n        data = replicate(10000, sum(sample(c(1,0), sample_size(), replace = TRUE, prob = c(null_prop(), 1-null_prop()))))\n      } else if (input$box_sum_or_mean == 2) {\n        data = replicate(10000, mean(sample(c(1,0), sample_size(), replace = TRUE, prob = c(null_prop(), 1-null_prop()))))\n      }\n      \n      # Normal curve parameters.\n      mean_ = null_prop()\n      sd_ = sqrt(null_prop() * (1-null_prop()))\n      EV = sample_size() * mean_\n      SE = sqrt(sample_size()) *sd_\n      if (input$box_sum_or_mean == 2) { \n        EV = mean_\n        SE = sd_/sqrt(sample_size())\n      }\n      \n      bins_to_include = length(table(data))\n      if (bins_to_include > 20) {\n        bins_to_include = 20\n      }\n      \n      plot = ggplot(data.frame(values = data), aes(x = values)) +\n        geom_histogram(aes(y = after_stat(density)), bins = bins_to_include, fill = \"lightgreen\", color = \"black\") + \n        labs(x = x_axis_string, y = \"Density\", title = title_string) +\n        theme_minimal() +\n        theme(\n          panel.grid = element_blank(),\n          axis.line = element_line(color = \"black\")\n        ) +\n        stat_function(fun = dnorm, args = list(mean = EV, sd = SE), color = \"red\", size = 1)\n      \n      return(plot)\n    })\n    \n    # Histogram with normal curve to shown normal curve approximation.\n    output$test_stat_normal_plot = renderPlot({\n      \n      return(curve_shaded_test_stat(dnorm, list(mean = 0, sd = 1), as.numeric(test_stat()), input$alternate_hypothesis_choice))\n      \n      \n      # ts = as.numeric(test_stat())\n      # \n      # # Define the plots lowest and highest x-value.\n      # lower_xlimit_plot = -3.5\n      # upper_xlimit_plot = 3.5\n      # if (input$alternate_hypothesis_choice == 1 && abs(ts) > upper_xlimit_plot) {\n      #   lower_xlimit_plot = -abs(ts) - 1\n      #   upper_xlimit_plot = abs(ts) + 1\n      # } else if (ts < lower_xlimit_plot) {\n      #   lower_xlimit_plot = ts - 1\n      # } else if (ts > upper_xlimit_plot) {\n      #   upper_xlimit_plot = ts + 1\n      # }\n      # \n      # data <- data.frame(x = seq(lower_xlimit_plot, upper_xlimit_plot, length.out = 100))\n      # \n      # # Define general ggplot.\n      # base_plot = ggplot(data, aes(x)) +\n      #   # Plot the normal distribution curve\n      #   stat_function(fun = dnorm, args = list(mean = 0, sd = 1), color = \"black\", size = 1) +\n      #   theme_minimal() +\n      #   theme(\n      #     panel.grid = element_blank(),\n      #     axis.line = element_line(color = \"black\"),\n      #     axis.text.y = element_blank(),\n      #     axis.ticks.y = element_blank(),\n      #     axis.title.y = element_blank(),\n      #     axis.title.x = element_blank(),\n      #     axis.line.y = element_blank(),\n      #     panel.border = element_blank()\n      #   )\n      # \n      # # Create a data frame for shading based upon alternate hypothesis choice.\n      # if (input$alternate_hypothesis_choice == 1) {\n      #   base_plot = base_plot + \n      #     # Lower tail\n      #     geom_area(stat = \"function\", \n      #               fun = dnorm,\n      #               args = list(mean = 0, sd = 1),\n      #               fill = \"red\",\n      #               alpha = 0.5,\n      #               xlim = c(lower_xlimit_plot, -abs(ts))) +\n      #     # Add annotated line on test statistic\n      #     geom_vline(xintercept = -abs(ts), linetype = \"dashed\", color = \"blue\") +\n      #     annotate(\"text\", x = -abs(ts) - 0.8, y = 0.3, \n      #              label = as.character(round(-abs(ts), 2)), color = \"blue\", hjust = 0) +\n      #     \n      #     # Upper tail\n      #     geom_area(stat = \"function\", \n      #               fun = dnorm,\n      #               args = list(mean = 0, sd = 1),\n      #               fill = \"red\",\n      #               alpha = 0.5,\n      #               xlim = c(abs(ts), upper_xlimit_plot)) +\n      #     # Add annotated line on test statistic\n      #     geom_vline(xintercept = abs(ts), linetype = \"dashed\", color = \"blue\") +\n      #     annotate(\"text\", x = abs(ts) + 0.25, y = 0.3, \n      #              label = as.character(round(abs(ts), 2)), color = \"blue\", hjust = 0)\n      #   \n      # } else if (input$alternate_hypothesis_choice == 2) {\n      #   base_plot = base_plot +\n      #     # Upper tail\n      #     geom_area(stat = \"function\", \n      #               fun = dnorm,\n      #               args = list(mean = 0, sd = 1),\n      #               fill = \"red\",\n      #               alpha = 0.5,\n      #               xlim = c(ts, upper_xlimit_plot)) +\n      #     # Add annotated line on test statistic\n      #     geom_vline(xintercept = ts, linetype = \"dashed\", color = \"blue\") +\n      #     annotate(\"text\", x = ts + 0.25, y = 0.3, \n      #              label = as.character(round(ts, 2)), color = \"blue\", hjust = 0)\n      #   \n      # } else if (input$alternate_hypothesis_choice == 3) {\n      #   base_plot = base_plot + \n      #     # Lower tail\n      #     geom_area(stat = \"function\", \n      #               fun = dnorm,\n      #               args = list(mean = 0, sd = 1),\n      #               fill = \"red\",\n      #               alpha = 0.5,\n      #               xlim = c(lower_xlimit_plot, ts)) +\n      #     # Add annotated line on test statistic\n      #     geom_vline(xintercept = ts, linetype = \"dashed\", color = \"blue\") +\n      #     annotate(\"text\", x = ts - 0.8, y = 0.3, \n      #              label = as.character(round(ts, 2)), color = \"blue\", hjust = 0)\n      # }\n      # \n      # return(base_plot)\n    })\n    \n    \n    \n    ################################################################\n\n  })\n    \n}","type":"text"},{"name":"z-test/proportion_test_ui.R","content":"proportionTestMainUI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    \n\n    fluidRow(\n      column(8,\n             HTML(\"<h1>Proportion Test (z-test)<\/h1><br>\"),\n      ),\n      column(4,\n             HTML(\"<br>\"),\n             tags$style(HTML(paste0(\"\n                [id='\", ns(\"learning_text\"), \"'] {\n                  font-size: 20px;\n                  padding: 10px 20px;\n                }\n             \"))),\n             actionButton(ns(\"learning_text\"), \"What is the proportion test?\", class = \"btn btn-primary\", style=\"color: #fff;\", width = \"100%\")\n      ),\n    ),\n    HTML(\"<br>\"),\n    \n    \n    ############ SECTION: The NULL Hypothesis - Setting up the Box ############\n    fluidRow(\n      column(7,\n             box(\n               title = HTML(\"<u><b>The 'NULL' Hypothesis - Setting up the Box<\/b><\/u>\"),\n               status = \"primary\",\n               width = \"100%\",\n               solidHeader = FALSE,\n               \n               p(\"We start by using the box model to represent our null hypothesis.\"),\n               \n               # Step 1: Specify NULL Hypothesis\n               box(\n                 title = \"Step 1) Specify NULL Hypotheis (Box Tickets)\",\n                 width = \"100%\",\n                 collapsible = TRUE,\n                 collapsed = TRUE,\n                 status = \"info\",\n                 solidHeader = FALSE,\n                 HTML(\"<p>\n                              <ul>\n                                <li>First, we need to specify the 'null' hypothesis for our proportion test. As it is a proportion, the value must be between <b>0<\/b> and\n                                  <b>1<\/b>.<\/li>\n                                <li>This is the proportion we are assuming our null hypothesis is equal to.<\/li>\n                                <li>The null hypothesis changes the tickets in our box that we are drawing from.<\/li>\n                              <\/ul>\n                             <\/p>\"),\n                 \n                 withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>Given \\\\( p \\\\), where \\\\( p \\\\) is the proportion of some event:<\/p>\")),\n                 fluidRow(\n                   column(7),\n                   column(2,\n                          withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>\\\\( H_0: \\\\) \\\\( p = \\\\)<\/p>\"))\n                   ),\n                   column(3,\n                          numericInput(\n                            ns(\"null_porportion\"),\n                            NULL,\n                            value = 0.7,\n                            min = 0,\n                            max = 1,\n                          ),\n                   ),\n                 ),\n                 uiOutput(ns('null_prop_warning'))\n               ),\n               \n               # Step 2: Sample Size\n               box(\n                 title = \"Step 2) Sample Size (Number of Draws)\",\n                 width = \"100%\",\n                 collapsible = TRUE,\n                 collapsed = TRUE,\n                 status = \"info\",\n                 solidHeader = FALSE,\n                 HTML(\"<p>\n                          <ul>\n                            <li>Specify how large your sample will be in the text box below.<\/li>\n                            <li>You can think of this as how many tickets we are drawing from the box with replacement.<\/li>\n                            <li>You will enter the observed value (i.e. the proportion you saw from the sample) later.<\/li>\n                          <\/ul>\n                         <\/p>\"),\n                 fluidRow(\n                   column(7),\n                   column(2,\n                          withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>\\\\( n =  \\\\)<\/p>\"))\n                   ),\n                   column(3,\n                          numericInput(\n                            ns(\"number_of_draws\"),\n                            label = NULL,\n                            value = 30,\n                            min = 1\n                          ),\n                   ),\n                 ),\n                 uiOutput(ns('n_warning_message'))\n               ),\n               \n               # Step 3: Model Type\n               box(\n                 title = \"Step 3) Model Using Sum or Sample\",\n                 width = \"100%\",\n                 collapsible = TRUE,\n                 collapsed = TRUE,\n                 status = \"info\",\n                 solidHeader = FALSE,\n                 HTML(\"<p>Third, we need to specify whether we will be modelling the sample using the mean or sum of the draws:<br><br><\/p>\"),\n                 radioButtons(\n                   ns(\"box_sum_or_mean\"),\n                   label = NULL,\n                   choices = list(\n                     \"Mean\" = 2,\n                     \"Sum\" = 1\n                   )\n                 ),\n               )\n               \n             )\n      ),\n      column(5,\n             # Box model output.\n             box(\n               solidHeader = TRUE,\n               width = \"100%\",\n               HTML(\"<center>\"),\n               grVizOutput(ns(\"box_model\"), width = \"70%\", height = \"70%\"),\n               HTML(\"<\/center>\")\n             ),\n      )\n    ),\n    \n    HTML(\"<br><br><br>\"),\n    \n    ############ SECTION: The Alternate Hypothesis ############\n    fluidRow(\n      column(7,\n             box(\n               title = HTML(\"<u><b>The Alternate Hypothesis<\/b><\/u>\"),\n               status = \"primary\",\n               width = \"100%\",\n               solidHeader = FALSE,\n               HTML(\"<p>Specify what type of alternate hypothesis you will be using below:<\/p>\"),\n               HTML(\"<br>\"),\n               radioButtons(\n                 inputId = ns(\"alternate_hypothesis_choice\"),\n                 label = NULL,\n                 choices = list(\n                   \"Two Sided\" = 1,\n                   \"One Sided (greater than)\" = 2,\n                   \"One Sided (less than)\" = 3\n                 )\n               ),\n               \n             )\n      ),\n      column(5,\n             box(\n               solidHeader = TRUE,\n               width = \"100%\",\n               HTML(\"<p><b>Null Hypothesis<\/b><\/p>\"),\n               uiOutput(ns('null_hypothesis_output')),\n               HTML(\"<p><b>Alternate Hypothesis<\/b><\/p>\"),\n               uiOutput(ns('alternate_hypothesis_output')),\n             )\n      )\n    ),\n    \n    HTML(\"<br><br><br>\"),\n    \n    ############ SECTION: Assumptions ############\n    fluidRow(\n      column(12,\n             box(\n               title = HTML(\"<u><b>Assumptions<\/b><\/u>\"),\n               status = \"primary\",\n               width = \"100%\",\n               solidHeader = FALSE,\n               HTML(\"<p>For the hypothesis test to be valid, we need to check the following assumptions:<\/p>\"),\n               \n               # Assumption 1: Independent Samples\n               box(\n                 title = \"Assumption 1: Independent Sample\",\n                 width = \"100%\",\n                 collapsible = TRUE,\n                 collapsed = TRUE,\n                 status = \"info\",\n                 solidHeader = FALSE,\n                 HTML(\"<p>The first assumption is that our sample is <b>independent and randomly chosen<\/b>.<\/p>\"),\n                 HTML(\"<p><span style='color: blue;'><b>How do we check?<\/b><\/span> <i>We check by investigating the experimental setup.<\/i><br><br>\n                                For example, consider we were investigating data for a proportion test involving human participants. We could read the accompanying scientific\n                                publication to understand the methodology they used to gather the people in the sample.<\/p>\")\n               ),\n               \n               # Assumption 2: Independent Samples\n               box(\n                 title = \"Assumption 2: Constant Proportion\",\n                 width = \"100%\",\n                 collapsible = TRUE,\n                 collapsed = TRUE,\n                 status = \"info\",\n                 solidHeader = FALSE,\n                 HTML(\"<p>The second assumption is that our sample is the <b>constant proportion<\/b> assumption. This assumption states that the probability that each sample\n                      element falls within the event of interest (stipulated in our hypotheses) is unchanging.<\/p>\"),\n                 HTML(\"<p><span style='color: blue;'><b>How do we check?<\/b><\/span> <i>We check by investigating the experimental setup.<\/i><br><br><\/p>\")\n               ),\n               \n               # Assumption 3: Normal Approximation\n               box(\n                 title = \"Assumption 3: Normal Approximation\",\n                 width = \"100%\",\n                 collapsible = TRUE,\n                 collapsed = TRUE,\n                 status = \"info\",\n                 solidHeader = FALSE,\n                 fluidRow(\n                   column(6,\n                          uiOutput(ns(\"assumption2_text_output\")),\n                          HTML(\"<br><br>\")\n                   ),\n                   column(6,\n                          plotOutput(ns(\"empirical_draws_hist\"), width = \"80%\", height = \"175px\"),\n                   )\n                 )\n               )\n             )\n      )\n    ),\n    \n    HTML(\"<br><br><br>\"),\n    \n    ############ SECTION: Test Statistics ############\n    fluidRow(\n      column(12,\n             box(\n               title = HTML(\"<u><b>Test Statistic<\/b><\/u>\"),\n               status = \"primary\",\n               width = \"100%\",\n               solidHeader = FALSE,\n               \n               fluidRow(\n                 column(6,\n                        HTML(\"<p><b>Step 1) Observed Value (OV)<\/b><\/p>\"),\n                        uiOutput(ns(\"observed_value_output\")),\n                        fluidRow(\n                          column(2),\n                          column(2,\n                                 withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>\\\\( OV = \\\\)<\/p>\"))\n                          ),\n                          column(3,\n                                 numericInput(\n                                   ns(\"observed_value\"),\n                                   NULL,\n                                   value = 0.73,\n                                   min = 0,\n                                   max = 1,\n                                   width = \"100%\"\n                                 ),\n                          ),\n                        ),\n                        uiOutput(ns(\"observed_val_warning_message\")),\n                        HTML(\"<p><b>Step 2) Calculate Expected Value (SE) and Standard Error (SE)<\/b><\/p>\"),\n                        uiOutput(ns(\"ev_and_se_text\"))\n                 ),\n                 column(6,\n                        HTML(\"<p><b>Step 3) Test Statistic Calculation<\/b><\/p>\"),\n                        uiOutput(ns(\"test_statistic_calculation\"))\n                 )\n               ),\n             ),\n      ),\n    ),\n    \n    HTML(\"<br><br><br>\"),\n    \n    ############ SECTION: p-value ############\n    fluidRow(\n      column(6,\n             box(\n               title = HTML(\"<u><b>p-value<\/b><\/u>\"),\n               status = \"primary\",\n               width = \"100%\",\n               solidHeader = FALSE,\n               uiOutput(ns(\"p_value_prelude\"))\n             )\n      ),\n      column(6,\n             plotOutput(ns(\"test_stat_normal_plot\"), width = \"80%\", heigh = \"275px\"),\n      )\n    ),\n    \n    HTML(\"<br><br><br><br><br><br><br>\"),\n    \n    ############ SECTION:Conclusion ############\n    fluidRow(\n      column(12,\n             box(\n               title = HTML(\"<u><b>Conclusion<\/b><\/u>\"),\n               status = \"primary\",\n               width = \"100%\",\n               solidHeader = FALSE,\n               \n               fluidRow(\n                 \n                 # Section to enter significance level.\n                 column(6,\n                        HTML(\"<p><b>Step 1) What is your significance level<\/b>?<\/p>\"),\n                        \n                        # Space to enter significance value.\n                        fluidRow(\n                          column(1,\n                                 withMathJax(HTML(\"<p style='font-size: 16px; text-align: right;'>\\\\( \\\\alpha = \\\\)<\/p>\"))\n                          ),\n                          column(3,\n                                 numericInput(\n                                   ns(\"alpha_value\"),\n                                   NULL,\n                                   value = 0.05,\n                                   min = 0,\n                                   max = 1,\n                                   width = \"100%\"\n                                 ),\n                          ),\n                        ),\n                        uiOutput(ns(\"significance_level_warning\")),\n                 ),\n                 \n                 # Section to provide final result.\n                 column(6,\n                        HTML(\"<p><b>Step 2) Final Conclusion<\/b><\/p>\"),\n                        uiOutput(ns(\"conclusion_output\")),\n                        \n                 )\n               )\n             )\n      ),\n    )\n    \n\n\n  )\n}","type":"text"}]
